_LINUX_VIRTIO_H  macro  include/linux/virtio.h  2  #define _LINUX_VIRTIO_H
virtqueue  struct  include/linux/virtio.h  20  struct virtqueue { struct list_head list; void (*callback)(struct virtqueue *vq); const char *name; struct virtio_device *vdev; void *priv; };
virtqueue_add_buf  prototype  include/linux/virtio.h  28  int virtqueue_add_buf(struct virtqueue *vq,struct scatterlist sg[],unsigned int out_num,unsigned int in_num,void *data,gfp_t gfp);
virtqueue_kick  prototype  include/linux/virtio.h  35  void virtqueue_kick(struct virtqueue *vq);
virtqueue_kick_prepare  prototype  include/linux/virtio.h  37  bool virtqueue_kick_prepare(struct virtqueue *vq);
virtqueue_notify  prototype  include/linux/virtio.h  39  void virtqueue_notify(struct virtqueue *vq);
virtqueue_get_buf  prototype  include/linux/virtio.h  41  void *virtqueue_get_buf(struct virtqueue *vq,unsigned int *len);
virtqueue_disable_cb  prototype  include/linux/virtio.h  43  void virtqueue_disable_cb(struct virtqueue *vq);
virtqueue_enable_cb  prototype  include/linux/virtio.h  45  bool virtqueue_enable_cb(struct virtqueue *vq);
virtqueue_enable_cb_delayed  prototype  include/linux/virtio.h  47  bool virtqueue_enable_cb_delayed(struct virtqueue *vq);
virtqueue_detach_unused_buf  prototype  include/linux/virtio.h  49  void *virtqueue_detach_unused_buf(struct virtqueue *vq);
virtqueue_get_vring_size  prototype  include/linux/virtio.h  51  unsigned int virtqueue_get_vring_size(struct virtqueue *vq);
virtio_device  struct  include/linux/virtio.h  63  struct virtio_device { int index; struct device dev; struct virtio_device_id id; struct virtio_config_ops *config; struct list_head vqs; unsigned long features[1]; void *priv; };
dev_to_virtio  macro  include/linux/virtio.h  74  #define dev_to_virtio(dev) container_of(dev,struct virtio_device,dev)
register_virtio_device  prototype  include/linux/virtio.h  75  int register_virtio_device(struct virtio_device *dev);
unregister_virtio_device  prototype  include/linux/virtio.h  76  void unregister_virtio_device(struct virtio_device *dev);
virtio_driver  struct  include/linux/virtio.h  89  struct virtio_driver { struct device_driver driver; const struct virtio_device_id *id_table; const unsigned int *feature_table; unsigned int feature_table_size; int (*probe)(struct virtio_device *dev); void (*remove)(struct virtio_device *dev); void (*config_changed)(struct virtio_device *dev); int (*freeze)(struct virtio_device *dev); int (*restore)(struct virtio_device *dev); };
register_virtio_driver  prototype  include/linux/virtio.h  103  int register_virtio_driver(struct virtio_driver *drv);
unregister_virtio_driver  prototype  include/linux/virtio.h  104  void unregister_virtio_driver(struct virtio_driver *drv);
_LINUX_VIRTIO_BALLOON_H  macro  include/linux/virtio_balloon.h  2  #define _LINUX_VIRTIO_BALLOON_H
VIRTIO_BALLOON_F_MUST_TELL_HOST  macro  include/linux/virtio_balloon.h  32  #define VIRTIO_BALLOON_F_MUST_TELL_HOST 0
VIRTIO_BALLOON_F_STATS_VQ  macro  include/linux/virtio_balloon.h  33  #define VIRTIO_BALLOON_F_STATS_VQ 1
VIRTIO_BALLOON_PFN_SHIFT  macro  include/linux/virtio_balloon.h  36  #define VIRTIO_BALLOON_PFN_SHIFT 12
virtio_balloon_config  struct  include/linux/virtio_balloon.h  38  struct virtio_balloon_config { __le32 num_pages; __le32 actual; };
VIRTIO_BALLOON_S_SWAP_IN  macro  include/linux/virtio_balloon.h  46  #define VIRTIO_BALLOON_S_SWAP_IN 0
VIRTIO_BALLOON_S_SWAP_OUT  macro  include/linux/virtio_balloon.h  47  #define VIRTIO_BALLOON_S_SWAP_OUT 1
VIRTIO_BALLOON_S_MAJFLT  macro  include/linux/virtio_balloon.h  48  #define VIRTIO_BALLOON_S_MAJFLT 2
VIRTIO_BALLOON_S_MINFLT  macro  include/linux/virtio_balloon.h  49  #define VIRTIO_BALLOON_S_MINFLT 3
VIRTIO_BALLOON_S_MEMFREE  macro  include/linux/virtio_balloon.h  50  #define VIRTIO_BALLOON_S_MEMFREE 4
VIRTIO_BALLOON_S_MEMTOT  macro  include/linux/virtio_balloon.h  51  #define VIRTIO_BALLOON_S_MEMTOT 5
VIRTIO_BALLOON_S_NR  macro  include/linux/virtio_balloon.h  52  #define VIRTIO_BALLOON_S_NR 6
virtio_balloon_stat  struct  include/linux/virtio_balloon.h  54  struct virtio_balloon_stat { u16 tag; u64 val; } __attribute__((packed));
_LINUX_SWAP_H  macro  include/linux/swap.h  2  #define _LINUX_SWAP_H
SWAP_FLAG_PREFER  macro  include/linux/swap.h  19  #define SWAP_FLAG_PREFER 0x8000
SWAP_FLAG_PRIO_MASK  macro  include/linux/swap.h  20  #define SWAP_FLAG_PRIO_MASK 0x7fff
SWAP_FLAG_PRIO_SHIFT  macro  include/linux/swap.h  21  #define SWAP_FLAG_PRIO_SHIFT 0
SWAP_FLAG_DISCARD  macro  include/linux/swap.h  22  #define SWAP_FLAG_DISCARD 0x10000
SWAP_FLAGS_VALID  macro  include/linux/swap.h  24  #define SWAP_FLAGS_VALID (SWAP_FLAG_PRIO_MASK | SWAP_FLAG_PREFER | SWAP_FLAG_DISCARD)
current_is_kswapd  function  include/linux/swap.h  27  static inline int current_is_kswapd(void)
MAX_SWAPFILES_SHIFT  macro  include/linux/swap.h  40  #define MAX_SWAPFILES_SHIFT 5
SWP_MIGRATION_NUM  macro  include/linux/swap.h  56  #define SWP_MIGRATION_NUM 0
SWP_MIGRATION_READ  macro  include/linux/swap.h  53  #define SWP_MIGRATION_READ (MAX_SWAPFILES + SWP_HWPOISON_NUM)
SWP_MIGRATION_WRITE  macro  include/linux/swap.h  54  #define SWP_MIGRATION_WRITE (MAX_SWAPFILES + SWP_HWPOISON_NUM + 1)
SWP_HWPOISON_NUM  macro  include/linux/swap.h  66  #define SWP_HWPOISON_NUM 0
SWP_HWPOISON  macro  include/linux/swap.h  64  #define SWP_HWPOISON MAX_SWAPFILES
MAX_SWAPFILES  macro  include/linux/swap.h  69  #define MAX_SWAPFILES ((1 << MAX_SWAPFILES_SHIFT) - SWP_MIGRATION_NUM - SWP_HWPOISON_NUM)
swap_header  union  include/linux/swap.h  84  union swap_header { char reserved[PAGE_SIZE - 10]; char magic[10]; } magic; struct { char bootbits[1024]; __u32 version; __u32 last_page; __u32 nr_badpages; unsigned char sws_uuid[16]; unsigned char sws_volume[16]; __u32 padding[117]; __u32 badpages[1]; } info; };
swp_entry_t  struct  include/linux/swap.h  105  typedef struct { unsigned long val; } swp_entry_t;
reclaim_state  struct  include/linux/swap.h  113  struct reclaim_state { unsigned long reclaimed_slab; };
swap_extent  struct  include/linux/swap.h  132  struct swap_extent { struct list_head list; pgoff_t start_page; pgoff_t nr_pages; sector_t start_block; };
__swapoffset  macro  include/linux/swap.h  142  #define __swapoffset(x) ((unsigned long)&((union swap_header *)0)->x)
MAX_SWAP_BADPAGES  macro  include/linux/swap.h  143  #define MAX_SWAP_BADPAGES ((__swapoffset(magic.magic) - __swapoffset(info.badpages)) / sizeof(int))
SWAP_CLUSTER_MAX  macro  include/linux/swap.h  158  #define SWAP_CLUSTER_MAX 32
COMPACT_CLUSTER_MAX  macro  include/linux/swap.h  159  #define COMPACT_CLUSTER_MAX SWAP_CLUSTER_MAX
KSWAPD_ZONE_BALANCE_GAP_RATIO  macro  include/linux/swap.h  168  #define KSWAPD_ZONE_BALANCE_GAP_RATIO 100
SWAP_MAP_MAX  macro  include/linux/swap.h  170  #define SWAP_MAP_MAX 0x3e
SWAP_MAP_BAD  macro  include/linux/swap.h  171  #define SWAP_MAP_BAD 0x3f
SWAP_HAS_CACHE  macro  include/linux/swap.h  172  #define SWAP_HAS_CACHE 0x40
SWAP_CONT_MAX  macro  include/linux/swap.h  173  #define SWAP_CONT_MAX 0x7f
COUNT_CONTINUED  macro  include/linux/swap.h  174  #define COUNT_CONTINUED 0x80
SWAP_MAP_SHMEM  macro  include/linux/swap.h  175  #define SWAP_MAP_SHMEM 0xbf
swap_info_struct  struct  include/linux/swap.h  180  struct swap_info_struct { unsigned long flags; signed short prio; signed char type; signed char next; unsigned int max; unsigned char *swap_map; unsigned int lowest_bit; unsigned int highest_bit; unsigned int pages; unsigned int inuse_pages; unsigned int cluster_next; unsigned int cluster_nr; unsigned int lowest_alloc; unsigned int highest_alloc; struct swap_extent *curr_swap_extent; struct swap_extent first_swap_extent; struct block_device *bdev; struct file *swap_file; unsigned int old_block_size; unsigned long *frontswap_map; atomic_t frontswap_pages; };
swap_list_t  struct  include/linux/swap.h  206  struct swap_list_t { int head; int next; };
vm_swap_full  macro  include/linux/swap.h  212  #define vm_swap_full() (nr_swap_pages*2 < total_swap_pages)
nr_free_buffer_pages  prototype  include/linux/swap.h  218  extern unsigned int nr_free_buffer_pages(void);
nr_free_pagecache_pages  prototype  include/linux/swap.h  219  extern unsigned int nr_free_pagecache_pages(void);
nr_free_pages  macro  include/linux/swap.h  222  #define nr_free_pages() global_page_state(NR_FREE_PAGES)
__lru_cache_add  prototype  include/linux/swap.h  226  extern void __lru_cache_add(struct page *,enum lru_list lru);
lru_cache_add_lru  prototype  include/linux/swap.h  227  extern void lru_cache_add_lru(struct page *,enum lru_list lru);
lru_add_page_tail  prototype  include/linux/swap.h  228  extern void lru_add_page_tail(struct page *page,struct page *page_tail,struct lruvec *lruvec);
activate_page  prototype  include/linux/swap.h  230  extern void activate_page(struct page *);
mark_page_accessed  prototype  include/linux/swap.h  231  extern void mark_page_accessed(struct page *);
lru_add_drain  prototype  include/linux/swap.h  232  extern void lru_add_drain(void);
lru_add_drain_cpu  prototype  include/linux/swap.h  233  extern void lru_add_drain_cpu(int cpu);
lru_add_drain_all  prototype  include/linux/swap.h  234  extern int lru_add_drain_all(void);
rotate_reclaimable_page  prototype  include/linux/swap.h  235  extern void rotate_reclaimable_page(struct page *page);
deactivate_page  prototype  include/linux/swap.h  236  extern void deactivate_page(struct page *page);
swap_setup  prototype  include/linux/swap.h  237  extern void swap_setup(void);
add_page_to_unevictable_list  prototype  include/linux/swap.h  239  extern void add_page_to_unevictable_list(struct page *page);
lru_cache_add_anon  function  include/linux/swap.h  245  static inline void lru_cache_add_anon(struct page *page)
lru_cache_add_file  function  include/linux/swap.h  250  static inline void lru_cache_add_file(struct page *page)
try_to_free_pages  prototype  include/linux/swap.h  256  extern unsigned long try_to_free_pages(struct zonelist *zonelist,int order,gfp_t gfp_mask, nodemask_t *mask);
__isolate_lru_page  prototype  include/linux/swap.h  258  extern int __isolate_lru_page(struct page *page,isolate_mode_t mode);
try_to_free_mem_cgroup_pages  prototype  include/linux/swap.h  259  extern unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *mem,gfp_t gfp_mask, bool noswap);
mem_cgroup_shrink_node_zone  prototype  include/linux/swap.h  261  extern unsigned long mem_cgroup_shrink_node_zone(struct mem_cgroup *mem,gfp_t gfp_mask, bool noswap,struct zone *zone,unsigned long *nr_scanned);
shrink_all_memory  prototype  include/linux/swap.h  265  extern unsigned long shrink_all_memory(unsigned long nr_pages);
remove_mapping  prototype  include/linux/swap.h  267  extern int remove_mapping(struct address_space *mapping,struct page *page);
zone_reclaim  function  include/linux/swap.h  277  static inline int zone_reclaim(struct zone *z,gfp_t mask,unsigned int order)
zone_reclaim_mode  macro  include/linux/swap.h  276  #define zone_reclaim_mode 0
page_evictable  prototype  include/linux/swap.h  283  extern int page_evictable(struct page *page,struct vm_area_struct *vma);
check_move_unevictable_pages  prototype  include/linux/swap.h  284  extern void check_move_unevictable_pages(struct page **,int nr_pages);
scan_unevictable_handler  prototype  include/linux/swap.h  287  extern int scan_unevictable_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
scan_unevictable_register_node  function  include/linux/swap.h  293  static inline int scan_unevictable_register_node(struct node *node)
scan_unevictable_unregister_node  function  include/linux/swap.h  297  static inline void scan_unevictable_unregister_node(struct node *node)
kswapd_run  prototype  include/linux/swap.h  302  extern int kswapd_run(int nid);
kswapd_stop  prototype  include/linux/swap.h  303  extern void kswapd_stop(int nid);
mem_cgroup_swappiness  function  include/linux/swap.h  307  static inline int mem_cgroup_swappiness(struct mem_cgroup *mem)
mem_cgroup_uncharge_swap  function  include/linux/swap.h  315  static inline void mem_cgroup_uncharge_swap(swp_entry_t ent)
swap_readpage  prototype  include/linux/swap.h  321  extern int swap_readpage(struct page *);
swap_writepage  function  include/linux/swap.h  423  static inline int swap_writepage(struct page *p,struct writeback_control *wbc)
end_swap_bio_read  prototype  include/linux/swap.h  323  extern void end_swap_bio_read(struct bio *bio,int err);
total_swapcache_pages  macro  include/linux/swap.h  377  #define total_swapcache_pages 0UL
show_swap_cache_info  function  include/linux/swap.h  388  static inline void show_swap_cache_info(void)
add_to_swap  function  include/linux/swap.h  433  static inline int add_to_swap(struct page *page)
add_to_swap_cache  function  include/linux/swap.h  438  static inline int add_to_swap_cache(struct page *page,swp_entry_t entry,gfp_t gfp_mask)
__delete_from_swap_cache  function  include/linux/swap.h  444  static inline void __delete_from_swap_cache(struct page *page)
delete_from_swap_cache  function  include/linux/swap.h  448  static inline void delete_from_swap_cache(struct page *page)
free_page_and_swap_cache  macro  include/linux/swap.h  383  #define free_page_and_swap_cache(page) page_cache_release(page)
free_pages_and_swap_cache  macro  include/linux/swap.h  385  #define free_pages_and_swap_cache(pages,nr) release_pages((pages), (nr), 0);
lookup_swap_cache  function  include/linux/swap.h  428  static inline struct page *lookup_swap_cache(swp_entry_t swp)
read_swap_cache_async  prototype  include/linux/swap.h  336  extern struct page *read_swap_cache_async(swp_entry_t,gfp_t,struct vm_area_struct *vma, unsigned long addr);
swapin_readahead  function  include/linux/swap.h  417  static inline struct page *swapin_readahead(swp_entry_t swp,gfp_t gfp_mask,struct vm_area_struct *vma, unsigned long addr)
si_swapinfo  macro  include/linux/swap.h  379  #define si_swapinfo(val) do { (val)->freeswap = (val)->totalswap = 0; } while (0)
get_swap_page  function  include/linux/swap.h  464  static inline swp_entry_t get_swap_page(void)
get_swap_page_of_type  prototype  include/linux/swap.h  346  extern swp_entry_t get_swap_page_of_type(int);
add_swap_count_continuation  function  include/linux/swap.h  395  static inline int add_swap_count_continuation(swp_entry_t swp,gfp_t gfp_mask)
swap_shmem_alloc  function  include/linux/swap.h  400  static inline void swap_shmem_alloc(swp_entry_t swp)
swap_duplicate  function  include/linux/swap.h  404  static inline int swap_duplicate(swp_entry_t swp)
swapcache_prepare  macro  include/linux/swap.h  393  #define swapcache_prepare(swp) is_migration_entry(swp)
swap_free  function  include/linux/swap.h  409  static inline void swap_free(swp_entry_t swp)
swapcache_free  function  include/linux/swap.h  413  static inline void swapcache_free(swp_entry_t swp,struct page *page)
free_swap_and_cache  macro  include/linux/swap.h  392  #define free_swap_and_cache(swp) is_migration_entry(swp)
swap_type_of  prototype  include/linux/swap.h  354  extern int swap_type_of(dev_t,sector_t,struct block_device **);
count_swap_pages  prototype  include/linux/swap.h  355  extern unsigned int count_swap_pages(int,int);
map_swap_page  prototype  include/linux/swap.h  356  extern sector_t map_swap_page(struct page *,struct block_device **);
swapdev_block  prototype  include/linux/swap.h  357  extern sector_t swapdev_block(int,pgoff_t);
page_swapcount  function  include/linux/swap.h  452  static inline int page_swapcount(struct page *page)
reuse_swap_page  macro  include/linux/swap.h  457  #define reuse_swap_page(page) (page_mapcount(page) == 1)
try_to_free_swap  function  include/linux/swap.h  459  static inline int try_to_free_swap(struct page *page)
mem_cgroup_uncharge_swapcache  function  include/linux/swap.h  472  mem_cgroup_uncharge_swapcache(struct page *page,swp_entry_t ent)
nr_swap_pages  macro  include/linux/swap.h  375  #define nr_swap_pages 0L
total_swap_pages  macro  include/linux/swap.h  376  #define total_swap_pages 0L
_LINUX_KTHREAD_H  macro  include/linux/kthread.h  2  #define _LINUX_KTHREAD_H
kthread_create_on_node  prototype  include/linux/kthread.h  8  struct task_struct *kthread_create_on_node(int (*threadfn)(void *data),void *data,int node,const char namefmt[], ...);
kthread_create  macro  include/linux/kthread.h  13  #define kthread_create(threadfn,data,namefmt,arg...) kthread_create_on_node(threadfn, data, -1, namefmt, ##arg)
kthread_run  macro  include/linux/kthread.h  26  #define kthread_run(threadfn,data,namefmt,...) ({ struct task_struct *__k = kthread_create(threadfn, data, namefmt, ## __VA_ARGS__); if (!IS_ERR(__k)) wake_up_process(__k); __k; })
kthread_bind  prototype  include/linux/kthread.h  35  void kthread_bind(struct task_struct *k,unsigned int cpu);
kthread_stop  prototype  include/linux/kthread.h  36  int kthread_stop(struct task_struct *k);
kthread_should_stop  prototype  include/linux/kthread.h  37  int kthread_should_stop(void);
kthread_freezable_should_stop  prototype  include/linux/kthread.h  38  bool kthread_freezable_should_stop(bool *was_frozen);
kthread_data  prototype  include/linux/kthread.h  39  void *kthread_data(struct task_struct *k);
kthreadd  prototype  include/linux/kthread.h  41  int kthreadd(void *unused);
tsk_fork_get_node  prototype  include/linux/kthread.h  43  extern int tsk_fork_get_node(struct task_struct *tsk);
kthread_worker  struct  include/linux/kthread.h  56  struct kthread_worker { spinlock_t lock; struct list_head work_list; struct task_struct *task; struct kthread_work *current_work; };
kthread_work  struct  include/linux/kthread.h  63  struct kthread_work { struct list_head node; kthread_work_func_t func; wait_queue_head_t done; struct kthread_worker *worker; };
KTHREAD_WORKER_INIT  macro  include/linux/kthread.h  70  #define KTHREAD_WORKER_INIT(worker) { .lock = __SPIN_LOCK_UNLOCKED((worker).lock), .work_list = LIST_HEAD_INIT((worker).work_list), }
KTHREAD_WORK_INIT  macro  include/linux/kthread.h  75  #define KTHREAD_WORK_INIT(work,fn) { .node = LIST_HEAD_INIT((work).node), .func = (fn), .done = __WAIT_QUEUE_HEAD_INITIALIZER((work).done), }
DEFINE_KTHREAD_WORKER  macro  include/linux/kthread.h  81  #define DEFINE_KTHREAD_WORKER(worker) struct kthread_worker worker = KTHREAD_WORKER_INIT(worker)
DEFINE_KTHREAD_WORK  macro  include/linux/kthread.h  84  #define DEFINE_KTHREAD_WORK(work,fn) struct kthread_work work = KTHREAD_WORK_INIT(work, fn)
KTHREAD_WORKER_INIT_ONSTACK  macro  include/linux/kthread.h  93  # define KTHREAD_WORKER_INIT_ONSTACK(worker) ({ init_kthread_worker(&worker); worker; })
DEFINE_KTHREAD_WORKER_ONSTACK  macro  include/linux/kthread.h  102  # define DEFINE_KTHREAD_WORKER_ONSTACK(worker) DEFINE_KTHREAD_WORKER(worker)
KTHREAD_WORK_INIT_ONSTACK  macro  include/linux/kthread.h  97  # define KTHREAD_WORK_INIT_ONSTACK(work,fn) ({ init_kthread_work((&work), fn); work; })
DEFINE_KTHREAD_WORK_ONSTACK  macro  include/linux/kthread.h  103  # define DEFINE_KTHREAD_WORK_ONSTACK(work,fn) DEFINE_KTHREAD_WORK(work,fn)
__init_kthread_worker  prototype  include/linux/kthread.h  106  extern void __init_kthread_worker(struct kthread_worker *worker,const char *name, struct lock_class_key *key);
init_kthread_worker  macro  include/linux/kthread.h  109  #define init_kthread_worker(worker) do { static struct lock_class_key __key; __init_kthread_worker((worker), "("#worker")->lock", &__key); } while (0)
init_kthread_work  macro  include/linux/kthread.h  115  #define init_kthread_work(work,fn) do { memset((work), 0, sizeof(struct kthread_work)); INIT_LIST_HEAD(&(work)->node); (work)->func = (fn); init_waitqueue_head(&(work)->done); } while (0)
kthread_worker_fn  prototype  include/linux/kthread.h  123  int kthread_worker_fn(void *worker_ptr);
queue_kthread_work  prototype  include/linux/kthread.h  125  bool queue_kthread_work(struct kthread_worker *worker,struct kthread_work *work);
flush_kthread_work  prototype  include/linux/kthread.h  127  void flush_kthread_work(struct kthread_work *work);
flush_kthread_worker  prototype  include/linux/kthread.h  128  void flush_kthread_worker(struct kthread_worker *worker);
FREEZER_H_INCLUDED  macro  include/linux/freezer.h  4  #define FREEZER_H_INCLUDED
frozen  function  include/linux/freezer.h  170  static inline bool frozen(struct task_struct *p) { return false; }
freezing_slow_path  prototype  include/linux/freezer.h  23  extern bool freezing_slow_path(struct task_struct *p);
freezing  function  include/linux/freezer.h  171  static inline bool freezing(struct task_struct *p) { return false; }
__thaw_task  function  include/linux/freezer.h  172  static inline void __thaw_task(struct task_struct *t) {}
__refrigerator  function  include/linux/freezer.h  174  static inline bool __refrigerator(bool check_kthr_stop) { return false; }
freeze_processes  function  include/linux/freezer.h  175  static inline int freeze_processes(void) { return -ENOSYS; }
freeze_kernel_threads  function  include/linux/freezer.h  176  static inline int freeze_kernel_threads(void) { return -ENOSYS; }
thaw_processes  function  include/linux/freezer.h  177  static inline void thaw_processes(void) {}
thaw_kernel_threads  function  include/linux/freezer.h  178  static inline void thaw_kernel_threads(void) {}
try_to_freeze  function  include/linux/freezer.h  180  static inline bool try_to_freeze(void) { return false; }
freeze_task  prototype  include/linux/freezer.h  52  extern bool freeze_task(struct task_struct *p);
set_freezable  function  include/linux/freezer.h  185  static inline void set_freezable(void) {}
cgroup_freezing  function  include/linux/freezer.h  58  static inline bool cgroup_freezing(struct task_struct *task)
freezer_do_not_count  function  include/linux/freezer.h  182  static inline void freezer_do_not_count(void) {}
freezer_count  function  include/linux/freezer.h  183  static inline void freezer_count(void) {}
freezer_should_skip  function  include/linux/freezer.h  184  static inline int freezer_should_skip(struct task_struct *p) { return 0; }
freezable_schedule  macro  include/linux/freezer.h  187  #define freezable_schedule() schedule()
freezable_schedule_timeout_killable  macro  include/linux/freezer.h  189  #define freezable_schedule_timeout_killable(timeout) schedule_timeout_killable(timeout)
wait_event_freezekillable  macro  include/linux/freezer.h  198  #define wait_event_freezekillable(wq,condition) wait_event_killable(wq, condition)
wait_event_freezable  macro  include/linux/freezer.h  192  #define wait_event_freezable(wq,condition) wait_event_interruptible(wq, condition)
wait_event_freezable_timeout  macro  include/linux/freezer.h  195  #define wait_event_freezable_timeout(wq,condition,timeout) wait_event_interruptible_timeout(wq, condition, timeout)
_LINUX_DELAY_H  macro  include/linux/delay.h  2  #define _LINUX_DELAY_H
MAX_UDELAY_MS  macro  include/linux/delay.h  27  #define MAX_UDELAY_MS 5
mdelay  macro  include/linux/delay.h  31  #define mdelay(n) ( (__builtin_constant_p(n) && (n)<=MAX_UDELAY_MS) ? udelay((n)*1000) : ({unsigned long __ms=(n); while (__ms--) udelay(1000);}))
ndelay  macro  include/asm-generic/delay.h  32  #define ndelay(n) ({ if (__builtin_constant_p(n)) { if ((n) / 20000 >= 1) __bad_ndelay(); else __const_udelay((n) * 5ul); } else { __ndelay(n); } })
calibrate_delay  prototype  include/linux/delay.h  45  void calibrate_delay(void);
msleep  prototype  include/linux/delay.h  46  void msleep(unsigned int msecs);
msleep_interruptible  prototype  include/linux/delay.h  47  unsigned long msleep_interruptible(unsigned int msecs);
usleep_range  prototype  include/linux/delay.h  48  void usleep_range(unsigned long min,unsigned long max);
ssleep  function  include/linux/delay.h  50  static inline void ssleep(unsigned int seconds)
_LINUX_SLAB_H  macro  include/linux/slab.h  10  #define _LINUX_SLAB_H
SLAB_DEBUG_FREE  macro  include/linux/slab.h  19  #define SLAB_DEBUG_FREE 0x00000100UL
SLAB_RED_ZONE  macro  include/linux/slab.h  20  #define SLAB_RED_ZONE 0x00000400UL
SLAB_POISON  macro  include/linux/slab.h  21  #define SLAB_POISON 0x00000800UL
SLAB_HWCACHE_ALIGN  macro  include/linux/slab.h  22  #define SLAB_HWCACHE_ALIGN 0x00002000UL
SLAB_CACHE_DMA  macro  include/linux/slab.h  23  #define SLAB_CACHE_DMA 0x00004000UL
SLAB_STORE_USER  macro  include/linux/slab.h  24  #define SLAB_STORE_USER 0x00010000UL
SLAB_PANIC  macro  include/linux/slab.h  25  #define SLAB_PANIC 0x00040000UL
SLAB_DESTROY_BY_RCU  macro  include/linux/slab.h  54  #define SLAB_DESTROY_BY_RCU 0x00080000UL
SLAB_MEM_SPREAD  macro  include/linux/slab.h  55  #define SLAB_MEM_SPREAD 0x00100000UL
SLAB_TRACE  macro  include/linux/slab.h  56  #define SLAB_TRACE 0x00200000UL
SLAB_DEBUG_OBJECTS  macro  include/linux/slab.h  62  # define SLAB_DEBUG_OBJECTS 0x00000000UL
SLAB_NOLEAKTRACE  macro  include/linux/slab.h  65  #define SLAB_NOLEAKTRACE 0x00800000UL
SLAB_NOTRACK  macro  include/linux/slab.h  71  # define SLAB_NOTRACK 0x00000000UL
SLAB_FAILSLAB  macro  include/linux/slab.h  76  # define SLAB_FAILSLAB 0x00000000UL
SLAB_RECLAIM_ACCOUNT  macro  include/linux/slab.h  80  #define SLAB_RECLAIM_ACCOUNT 0x00020000UL
SLAB_TEMPORARY  macro  include/linux/slab.h  81  #define SLAB_TEMPORARY SLAB_RECLAIM_ACCOUNT
ZERO_SIZE_PTR  macro  include/linux/slab.h  90  #define ZERO_SIZE_PTR ((void *)16)
ZERO_OR_NULL_PTR  macro  include/linux/slab.h  92  #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= (unsigned long)ZERO_SIZE_PTR)
kmem_cache_init  prototype  include/linux/slab.h  98  void __init kmem_cache_init(void);
slab_is_available  prototype  include/linux/slab.h  99  int slab_is_available(void);
kmem_cache_create  prototype  include/linux/slab.h  101  struct kmem_cache *kmem_cache_create(const char *,size_t,size_t,unsigned long,void (*)(void *));
kmem_cache_destroy  prototype  include/linux/slab.h  104  void kmem_cache_destroy(struct kmem_cache *);
kmem_cache_shrink  prototype  include/linux/slab.h  105  int kmem_cache_shrink(struct kmem_cache *);
kmem_cache_free  prototype  include/linux/slab.h  106  void kmem_cache_free(struct kmem_cache *,void *);
kmem_cache_size  prototype  include/linux/slab.h  107  unsigned int kmem_cache_size(struct kmem_cache *);
KMEM_CACHE  macro  include/linux/slab.h  117  #define KMEM_CACHE(__struct,__flags) kmem_cache_create(#__struct, sizeof(struct __struct), __alignof__(struct __struct), (__flags), NULL)
KMALLOC_SHIFT_HIGH  macro  include/linux/slab.h  130  #define KMALLOC_SHIFT_HIGH ((MAX_ORDER + PAGE_SHIFT - 1) <= 25 ? (MAX_ORDER + PAGE_SHIFT - 1) : 25)
KMALLOC_MAX_SIZE  macro  include/linux/slab.h  133  #define KMALLOC_MAX_SIZE (1UL << KMALLOC_SHIFT_HIGH)
KMALLOC_MAX_ORDER  macro  include/linux/slab.h  134  #define KMALLOC_MAX_ORDER (KMALLOC_SHIFT_HIGH - PAGE_SHIFT)
ARCH_KMALLOC_MINALIGN  macro  include/linux/slab.h  144  #define ARCH_KMALLOC_MINALIGN __alignof__(unsigned long long)
ARCH_SLAB_MINALIGN  macro  include/linux/slab.h  153  #define ARCH_SLAB_MINALIGN __alignof__(unsigned long long)
__krealloc  prototype  include/linux/slab.h  159  void * __must_check __krealloc(const void *,size_t,gfp_t);
krealloc  prototype  include/linux/slab.h  160  void * __must_check krealloc(const void *,size_t,gfp_t);
kfree  prototype  include/linux/slab.h  161  void kfree(const void *);
kzfree  prototype  include/linux/slab.h  162  void kzfree(const void *);
ksize  prototype  include/linux/slab.h  163  size_t ksize(const void *);
kmalloc_array  function  include/linux/slab.h  243  static inline void *kmalloc_array(size_t n,size_t size,gfp_t flags)
kcalloc  function  include/linux/slab.h  256  static inline void *kcalloc(size_t n,size_t size,gfp_t flags)
kmalloc_node  function  include/linux/slab_def.h  182  static __always_inline void *kmalloc_node(size_t size,gfp_t flags,int node)
__kmalloc_node  prototype  include/linux/slab_def.h  163  extern void *__kmalloc_node(size_t size,gfp_t flags,int node);
kmem_cache_alloc  prototype  include/linux/slab_def.h  109  void *kmem_cache_alloc(struct kmem_cache *,gfp_t);
kmem_cache_alloc_node  prototype  include/linux/slab_def.h  164  extern void *kmem_cache_alloc_node(struct kmem_cache *,gfp_t flags,int node);
__kmalloc_track_caller  prototype  include/linux/slab.h  301  extern void *__kmalloc_track_caller(size_t,gfp_t,unsigned long);
kmalloc_track_caller  macro  include/linux/slab.h  305  #define kmalloc_track_caller(size,flags) __kmalloc(size, flags)
__kmalloc_node_track_caller  prototype  include/linux/slab.h  320  extern void *__kmalloc_node_track_caller(size_t,gfp_t,int,unsigned long);
kmalloc_node_track_caller  macro  include/linux/slab.h  331  #define kmalloc_node_track_caller(size,flags,node) kmalloc_track_caller(size, flags)
kmem_cache_zalloc  function  include/linux/slab.h  339  static inline void *kmem_cache_zalloc(struct kmem_cache *k,gfp_t flags)
kzalloc  function  include/linux/slab.h  349  static inline void *kzalloc(size_t size,gfp_t flags)
kzalloc_node  function  include/linux/slab.h  360  static inline void *kzalloc_node(size_t size,gfp_t flags,int node)
kmem_cache_init_late  prototype  include/linux/slab.h  365  void __init kmem_cache_init_late(void);
_LINUX_MODULE_H  macro  include/linux/module.h  2  #define _LINUX_MODULE_H
MODULE_SUPPORTED_DEVICE  macro  include/linux/module.h  25  #define MODULE_SUPPORTED_DEVICE(name)
MODULE_NAME_LEN  macro  include/linux/module.h  27  #define MODULE_NAME_LEN MAX_PARAM_PREFIX_LEN
modversion_info  struct  include/linux/module.h  29  struct modversion_info { unsigned long crc; char name[MODULE_NAME_LEN]; };
module_kobject  struct  include/linux/module.h  37  struct module_kobject { struct kobject kobj; struct module *mod; struct kobject *drivers_dir; struct module_param_attrs *mp; };
module_attribute  struct  include/linux/module.h  44  struct module_attribute { struct attribute attr; ssize_t (*show)(struct module_attribute *, struct module_kobject *,char *); ssize_t (*store)(struct module_attribute *, struct module_kobject *,const char *, size_t count); void (*setup)(struct module *, const char *); int (*test)(struct module *); void (*free)(struct module *); };
module_version_attribute  struct  include/linux/module.h  55  struct module_version_attribute { struct module_attribute mattr; const char *module_name; const char *version; } __attribute__ ((__aligned__(sizeof(void *))));
__modver_version_show  prototype  include/linux/module.h  61  extern ssize_t __modver_version_show(struct module_attribute *,struct module_kobject *, char *);
init_module  prototype  include/linux/module.h  67  extern int init_module(void);
cleanup_module  prototype  include/linux/module.h  68  extern void cleanup_module(void);
search_extable  prototype  include/linux/module.h  74  search_extable(const struct exception_table_entry *first,const struct exception_table_entry *last,unsigned long value);
sort_extable  prototype  include/linux/module.h  77  void sort_extable(struct exception_table_entry *start,struct exception_table_entry *finish);
sort_main_extable  prototype  include/linux/module.h  79  void sort_main_extable(void);
trim_init_extable  prototype  include/linux/module.h  80  void trim_init_extable(struct module *m);
MODULE_GENERIC_TABLE  macro  include/linux/module.h  88  #define MODULE_GENERIC_TABLE(gtype,name)
MODULE_INFO  macro  include/linux/module.h  92  #define MODULE_INFO(tag,info) __MODULE_INFO(tag,tag,info)
MODULE_ALIAS  macro  include/linux/module.h  95  #define MODULE_ALIAS(_alias) MODULE_INFO(alias,_alias)
MODULE_LICENSE  macro  include/linux/module.h  125  #define MODULE_LICENSE(_license) MODULE_INFO(license,_license)
MODULE_AUTHOR  macro  include/linux/module.h  131  #define MODULE_AUTHOR(_author) MODULE_INFO(author,_author)
MODULE_DESCRIPTION  macro  include/linux/module.h  134  #define MODULE_DESCRIPTION(_description) MODULE_INFO(description,_description)
MODULE_DEVICE_TABLE  macro  include/linux/module.h  136  #define MODULE_DEVICE_TABLE(type,name) MODULE_GENERIC_TABLE(type##_device,name)
MODULE_VERSION  macro  include/linux/module.h  157  #define MODULE_VERSION(_version) static struct module_version_attribute ___modver_attr = { .mattr	= { .attr	= { .name	= "version", .mode	= S_IRUGO, }, .show	= __modver_version_show, }, .module_name	= KBUILD_MODNAME, .version	= _version, }; static const struct module_version_attribute __used __attribute__ ((__section__ ("__modver"))) * __moduleparam_const __modver_attr = &___modver_attr
MODULE_FIRMWARE  macro  include/linux/module.h  177  #define MODULE_FIRMWARE(_firmware) MODULE_INFO(firmware,_firmware)
search_exception_tables  prototype  include/linux/module.h  180  const struct exception_table_entry *search_exception_tables(unsigned long add);
__symbol_get  prototype  include/linux/module.h  188  void *__symbol_get(const char *symbol);
__symbol_get_gpl  prototype  include/linux/module.h  189  void *__symbol_get_gpl(const char *symbol);
symbol_get  macro  include/linux/module.h  539  #define symbol_get(x) ({ extern typeof(x) x __attribute__((weak)); &(x); })
module_use  struct  include/linux/module.h  193  struct module_use { struct list_head source_list; struct list_head target_list; struct module *source, *target; };
module_state  enum  include/linux/module.h  199  enum module_state { MODULE_STATE_LIVE, MODULE_STATE_COMING, MODULE_STATE_GOING, };
module_ref  struct  include/linux/module.h  215  struct module_ref { unsigned long incs; unsigned long decs; } __attribute((aligned(2 * sizeof(unsigned long))));
module  struct  include/linux/module.h  220  struct module { enum module_state state; struct list_head list; char name[MODULE_NAME_LEN]; struct module_kobject mkobj; struct module_attribute *modinfo_attrs; const char *version; const char *srcversion; struct kobject *holders_dir; const struct kernel_symbol *syms; const unsigned long *crcs; unsigned int num_syms; struct kernel_param *kp; unsigned int num_kp; unsigned int num_gpl_syms; const struct kernel_symbol *gpl_syms; const unsigned long *gpl_crcs; const struct kernel_symbol *unused_syms; const unsigned long *unused_crcs; unsigned int num_unused_syms; unsigned int num_unused_gpl_syms; const struct kernel_symbol *unused_gpl_syms; const unsigned long *unused_gpl_crcs; const struct kernel_symbol *gpl_future_syms; const unsigned long *gpl_future_crcs; unsigned int num_gpl_future_syms; unsigned int num_exentries; struct exception_table_entry *extable; int (*init)(void); void *module_init; void *module_core; unsigned int init_size, core_size; unsigned int init_text_size, core_text_size; unsigned int init_ro_size, core_ro_size; struct mod_arch_specific arch; unsigned int taints; unsigned num_bugs; struct list_head bug_list; struct bug_entry *bug_table; Elf_Sym *symtab, *core_symtab; unsigned int num_symtab, core_num_syms; char *strtab, *core_strtab; struct module_sect_attrs *sect_attrs; struct module_notes_attrs *notes_attrs; char *args; void __percpu *percpu; unsigned int percpu_size; unsigned int num_tracepoints; struct tracepoint * const *tracepoints_ptrs; struct jump_entry *jump_entries; unsigned int num_jump_entries; unsigned int num_trace_bprintk_fmt; const char **trace_bprintk_fmt_start; struct ftrace_event_call **trace_events; unsigned int num_trace_events; unsigned int num_ftrace_callsites; unsigned long *ftrace_callsites; struct list_head source_list; struct list_head target_list; struct task_struct *waiter; void (*exit)(void); struct module_ref __percpu *refptr; ctor_fn_t *ctors; unsigned int num_ctors; };
MODULE_ARCH_INIT  macro  include/linux/module.h  372  #define MODULE_ARCH_INIT {}
module_is_live  function  include/linux/module.h  380  static inline int module_is_live(struct module *mod)
__module_text_address  function  include/linux/module.h  518  static inline struct module *__module_text_address(unsigned long addr)
__module_address  function  include/linux/module.h  513  static inline struct module *__module_address(unsigned long addr)
is_module_address  function  include/linux/module.h  523  static inline bool is_module_address(unsigned long addr)
is_module_percpu_address  function  include/linux/module.h  528  static inline bool is_module_percpu_address(unsigned long addr)
is_module_text_address  function  include/linux/module.h  533  static inline bool is_module_text_address(unsigned long addr)
within_module_core  function  include/linux/module.h  391  static inline int within_module_core(unsigned long addr,struct module *mod)
within_module_init  function  include/linux/module.h  397  static inline int within_module_init(unsigned long addr,struct module *mod)
find_module  prototype  include/linux/module.h  404  struct module *find_module(const char *name);
symsearch  struct  include/linux/module.h  406  struct symsearch { const struct kernel_symbol *start, *stop; const unsigned long *crcs; enum { NOT_GPL_ONLY, WILL_BE_GPL_ONLY, } licence; bool unused; };
find_symbol  prototype  include/linux/module.h  418  const struct kernel_symbol *find_symbol(const char *name,struct module **owner,const unsigned long **crc,bool gplok,bool warn);
each_symbol_section  prototype  include/linux/module.h  425  bool each_symbol_section(bool (*fn)(const struct symsearch *arr,struct module *owner,void *data), void *data);
module_get_kallsym  function  include/linux/module.h  578  static inline int module_get_kallsym(unsigned int symnum,unsigned long *value,char *type, char *name,char *module_name, int *exported)
module_kallsyms_lookup_name  function  include/linux/module.h  585  static inline unsigned long module_kallsyms_lookup_name(const char *name)
module_kallsyms_on_each_symbol  function  include/linux/module.h  590  static inline int module_kallsyms_on_each_symbol(int (*fn)(void *,const char *,struct module *,unsigned long),void *data)
__module_put_and_exit  prototype  include/linux/module.h  441  extern void __module_put_and_exit(struct module *mod,long code)
module_put_and_exit  macro  include/linux/module.h  609  #define module_put_and_exit(code) do_exit(code)
module_refcount  prototype  include/linux/module.h  446  unsigned long module_refcount(struct module *mod);
__symbol_put  prototype  include/linux/module.h  447  void __symbol_put(const char *symbol);
symbol_put  macro  include/linux/module.h  540  #define symbol_put(x) do { } while(0)
symbol_put_addr  macro  include/linux/module.h  541  #define symbol_put_addr(x) do { } while(0)
__module_get  function  include/linux/module.h  543  static inline void __module_get(struct module *module)
try_module_get  function  include/linux/module.h  547  static inline int try_module_get(struct module *module)
module_put  function  include/linux/module.h  552  static inline void module_put(struct module *module)
ref_module  prototype  include/linux/module.h  476  int ref_module(struct module *a,struct module *b);
module_name  macro  include/linux/module.h  556  #define module_name(mod) "kernel"
module_address_lookup  function  include/linux/module.h  559  static inline const char *module_address_lookup(unsigned long addr,unsigned long *symbolsize,unsigned long *offset,char **modname,char *namebuf)
lookup_module_symbol_name  function  include/linux/module.h  568  static inline int lookup_module_symbol_name(unsigned long addr,char *symname)
lookup_module_symbol_attrs  function  include/linux/module.h  573  static inline int lookup_module_symbol_attrs(unsigned long addr,unsigned long *size,unsigned long *offset,char *modname,char *name)
search_module_extables  function  include/linux/module.h  508  search_module_extables(unsigned long addr)
register_module_notifier  function  include/linux/module.h  598  static inline int register_module_notifier(struct notifier_block * nb)
unregister_module_notifier  function  include/linux/module.h  604  static inline int unregister_module_notifier(struct notifier_block * nb)
print_modules  function  include/linux/module.h  611  static inline void print_modules(void)
symbol_request  macro  include/linux/module.h  622  #define symbol_request(x) try_then_request_module(symbol_get(x),"symbol:" #x)
__MODULE_STRING  macro  include/linux/module.h  626  #define __MODULE_STRING(x) __stringify(x)
set_all_modules_text_rw  function  include/linux/module.h  632  static inline void set_all_modules_text_rw(void) { }
set_all_modules_text_ro  function  include/linux/module.h  633  static inline void set_all_modules_text_ro(void) { }
module_bug_finalize  function  include/linux/module.h  643  static inline void module_bug_finalize(const Elf_Ehdr *hdr,const Elf_Shdr *sechdrs,struct module *mod)
module_bug_cleanup  function  include/linux/module.h  648  static inline void module_bug_cleanup(struct module *mod) {}
_LINUX_TYPES_H  macro  include/linux/types.h  2  #define _LINUX_TYPES_H
DECLARE_BITMAP  prototype  include/linux/cpumask.h  689  extern const DECLARE_BITMAP(cpu_all_bits,NR_CPUS);
_SIZE_T  macro  include/linux/types.h  62  #define _SIZE_T
_SSIZE_T  macro  include/linux/types.h  67  #define _SSIZE_T
_PTRDIFF_T  macro  include/linux/types.h  72  #define _PTRDIFF_T
_TIME_T  macro  include/linux/types.h  77  #define _TIME_T
_CLOCK_T  macro  include/linux/types.h  82  #define _CLOCK_T
_CADDR_T  macro  include/linux/types.h  87  #define _CADDR_T
__BIT_TYPES_DEFINED__  macro  include/linux/types.h  104  #define __BIT_TYPES_DEFINED__
aligned_u64  macro  include/linux/types.h  126  #define aligned_u64 __u64 __attribute__((aligned(8)))
aligned_be64  macro  include/linux/types.h  127  #define aligned_be64 __be64 __attribute__((aligned(8)))
aligned_le64  macro  include/linux/types.h  128  #define aligned_le64 __le64 __attribute__((aligned(8)))
pgoff_t  macro  include/linux/types.h  151  #define pgoff_t unsigned long
__bitwise__  macro  include/linux/types.h  170  #define __bitwise__
__bitwise  macro  include/linux/types.h  175  #define __bitwise
__aligned_u64  macro  include/linux/types.h  197  #define __aligned_u64 __u64 __attribute__((aligned(8)))
__aligned_be64  macro  include/linux/types.h  198  #define __aligned_be64 __be64 __attribute__((aligned(8)))
__aligned_le64  macro  include/linux/types.h  199  #define __aligned_le64 __le64 __attribute__((aligned(8)))
atomic_t  struct  include/linux/types.h  219  typedef struct { int counter; } atomic_t;
atomic64_t  struct  include/asm-generic/atomic64.h  15  typedef struct { long long counter; } atomic64_t;
list_head  struct  include/linux/types.h  229  struct list_head { struct list_head *next, *prev; };
hlist_head  struct  include/linux/types.h  233  struct hlist_head { struct hlist_node *first; };
hlist_node  struct  include/linux/types.h  237  struct hlist_node { struct hlist_node *next, **pprev; };
ustat  struct  include/linux/types.h  241  struct ustat { __kernel_daddr_t f_tfree; __kernel_ino_t f_tinode; char f_fname[6]; char f_fpack[6]; };
rcu_head  struct  include/linux/types.h  253  struct rcu_head { struct rcu_head *next; void (*func)(struct rcu_head *head); };
_LINUX_SCATTERLIST_H  macro  include/linux/scatterlist.h  2  #define _LINUX_SCATTERLIST_H
sg_table  struct  include/linux/scatterlist.h  12  struct sg_table { struct scatterlist *sgl; unsigned int nents; unsigned int orig_nents; };
SG_MAGIC  macro  include/linux/scatterlist.h  35  #define SG_MAGIC 0x87654321
sg_is_chain  macro  include/linux/scatterlist.h  42  #define sg_is_chain(sg) ((sg)->page_link & 0x01)
sg_is_last  macro  include/linux/scatterlist.h  43  #define sg_is_last(sg) ((sg)->page_link & 0x02)
sg_chain_ptr  macro  include/linux/scatterlist.h  44  #define sg_chain_ptr(sg) ((struct scatterlist *) ((sg)->page_link & ~0x03))
sg_assign_page  function  include/linux/scatterlist.h  57  static inline void sg_assign_page(struct scatterlist *sg,struct page *page)
sg_set_page  function  include/linux/scatterlist.h  87  static inline void sg_set_page(struct scatterlist *sg,struct page *page,unsigned int len, unsigned int offset)
sg_page  function  include/linux/scatterlist.h  95  static inline struct page *sg_page(struct scatterlist *sg)
sg_set_buf  function  include/linux/scatterlist.h  111  static inline void sg_set_buf(struct scatterlist *sg,const void *buf,unsigned int buflen)
for_each_sg  macro  include/linux/scatterlist.h  120  #define for_each_sg(sglist,sg,nr,__i) for (__i = 0, sg = (sglist); __i < (nr); __i++, sg = sg_next(sg))
sg_chain  function  include/linux/scatterlist.h  133  static inline void sg_chain(struct scatterlist *prv,unsigned int prv_nents,struct scatterlist *sgl)
sg_mark_end  function  include/linux/scatterlist.h  162  static inline void sg_mark_end(struct scatterlist *sg)
sg_phys  function  include/linux/scatterlist.h  184  static inline dma_addr_t sg_phys(struct scatterlist *sg)
sg_virt  function  include/linux/scatterlist.h  199  static inline void *sg_virt(struct scatterlist *sg)
sg_next  prototype  include/linux/scatterlist.h  204  struct scatterlist *sg_next(struct scatterlist *);
sg_last  prototype  include/linux/scatterlist.h  205  struct scatterlist *sg_last(struct scatterlist *s,unsigned int);
sg_init_table  prototype  include/linux/scatterlist.h  206  void sg_init_table(struct scatterlist *,unsigned int);
sg_init_one  prototype  include/linux/scatterlist.h  207  void sg_init_one(struct scatterlist *,const void *,unsigned int);
__sg_free_table  prototype  include/linux/scatterlist.h  212  void __sg_free_table(struct sg_table *,unsigned int,sg_free_fn *);
sg_free_table  prototype  include/linux/scatterlist.h  213  void sg_free_table(struct sg_table *);
__sg_alloc_table  prototype  include/linux/scatterlist.h  214  int __sg_alloc_table(struct sg_table *,unsigned int,unsigned int,gfp_t,sg_alloc_fn *);
sg_alloc_table  prototype  include/linux/scatterlist.h  216  int sg_alloc_table(struct sg_table *,unsigned int,gfp_t);
sg_copy_from_buffer  prototype  include/linux/scatterlist.h  218  size_t sg_copy_from_buffer(struct scatterlist *sgl,unsigned int nents,void *buf, size_t buflen);
sg_copy_to_buffer  prototype  include/linux/scatterlist.h  220  size_t sg_copy_to_buffer(struct scatterlist *sgl,unsigned int nents,void *buf, size_t buflen);
SG_MAX_SINGLE_ALLOC  macro  include/linux/scatterlist.h  227  #define SG_MAX_SINGLE_ALLOC (PAGE_SIZE / sizeof(struct scatterlist))
SG_MITER_ATOMIC  macro  include/linux/scatterlist.h  246  #define SG_MITER_ATOMIC (1 << 0)
SG_MITER_TO_SG  macro  include/linux/scatterlist.h  247  #define SG_MITER_TO_SG (1 << 1)
SG_MITER_FROM_SG  macro  include/linux/scatterlist.h  248  #define SG_MITER_FROM_SG (1 << 2)
sg_mapping_iter  struct  include/linux/scatterlist.h  250  struct sg_mapping_iter { struct page *page; void *addr; size_t length; size_t consumed; struct scatterlist *__sg; unsigned int __nents; unsigned int __offset; unsigned int __flags; };
sg_miter_start  prototype  include/linux/scatterlist.h  264  void sg_miter_start(struct sg_mapping_iter *miter,struct scatterlist *sgl,unsigned int nents, unsigned int flags);
sg_miter_next  prototype  include/linux/scatterlist.h  266  bool sg_miter_next(struct sg_mapping_iter *miter);
sg_miter_stop  prototype  include/linux/scatterlist.h  267  void sg_miter_stop(struct sg_mapping_iter *miter);
__LINUX_SPINLOCK_H  macro  include/linux/spinlock.h  2  #define __LINUX_SPINLOCK_H
LOCK_SECTION_NAME  macro  include/linux/spinlock.h  64  #define LOCK_SECTION_NAME ".text..lock."KBUILD_BASENAME
LOCK_SECTION_START  macro  include/linux/spinlock.h  66  #define LOCK_SECTION_START(extra) ".subsection 1\n\t" extra ".ifndef " LOCK_SECTION_NAME "\n\t" LOCK_SECTION_NAME ":\n\t" ".endif\n"
LOCK_SECTION_END  macro  include/linux/spinlock.h  73  #define LOCK_SECTION_END ".previous\n\t"
__lockfunc  macro  include/linux/spinlock.h  76  #define __lockfunc __attribute__((section(".spinlock.text")))
__raw_spin_lock_init  prototype  include/linux/spinlock.h  93  extern void __raw_spin_lock_init(raw_spinlock_t *lock,const char *name,struct lock_class_key *key);
raw_spin_lock_init  macro  include/linux/spinlock.h  103  # define raw_spin_lock_init(lock) do { *(lock) = __RAW_SPIN_LOCK_UNLOCKED(lock); } while (0)
raw_spin_is_locked  macro  include/linux/spinlock.h  107  #define raw_spin_is_locked(lock) arch_spin_is_locked(&(lock)->raw_lock)
raw_spin_is_contended  macro  include/linux/spinlock.h  116  #define raw_spin_is_contended(lock) (((void)(lock),0))
smp_mb__after_lock  function  arch/x86/include/asm/spinlock.h  238  static inline void smp_mb__after_lock(void) { }
raw_spin_unlock_wait  macro  include/linux/spinlock.h  129  #define raw_spin_unlock_wait(lock) arch_spin_unlock_wait(&(lock)->raw_lock)
do_raw_spin_lock_flags  macro  include/linux/spinlock.h  133  #define do_raw_spin_lock_flags(lock,flags) do_raw_spin_lock(lock)
do_raw_spin_trylock  function  include/linux/spinlock.h  150  static inline int do_raw_spin_trylock(raw_spinlock_t *lock)
__acquires  macro  include/linux/compiler.h  36  # define __acquires(x)
__releases  macro  include/linux/compiler.h  37  # define __releases(x)
raw_spin_trylock  macro  include/linux/spinlock.h  168  #define raw_spin_trylock(lock) __cond_lock(lock,_raw_spin_trylock(lock))
raw_spin_lock  macro  include/linux/spinlock.h  170  #define raw_spin_lock(lock) _raw_spin_lock(lock)
raw_spin_lock_nested  macro  include/linux/spinlock.h  182  # define raw_spin_lock_nested(lock,subclass) _raw_spin_lock(lock)
raw_spin_lock_nest_lock  macro  include/linux/spinlock.h  183  # define raw_spin_lock_nest_lock(lock,nest_lock) _raw_spin_lock(lock)
raw_spin_lock_irqsave  macro  include/linux/spinlock.h  210  #define raw_spin_lock_irqsave(lock,flags) do { typecheck(unsigned long, flags); _raw_spin_lock_irqsave(lock, flags); } while (0)
raw_spin_lock_irqsave_nested  macro  include/linux/spinlock.h  216  #define raw_spin_lock_irqsave_nested(lock,flags,subclass) raw_spin_lock_irqsave(lock, flags)
raw_spin_lock_irq  macro  include/linux/spinlock.h  221  #define raw_spin_lock_irq(lock) _raw_spin_lock_irq(lock)
raw_spin_lock_bh  macro  include/linux/spinlock.h  222  #define raw_spin_lock_bh(lock) _raw_spin_lock_bh(lock)
raw_spin_unlock  macro  include/linux/spinlock.h  223  #define raw_spin_unlock(lock) _raw_spin_unlock(lock)
raw_spin_unlock_irq  macro  include/linux/spinlock.h  224  #define raw_spin_unlock_irq(lock) _raw_spin_unlock_irq(lock)
raw_spin_unlock_irqrestore  macro  include/linux/spinlock.h  226  #define raw_spin_unlock_irqrestore(lock,flags) do { typecheck(unsigned long, flags); _raw_spin_unlock_irqrestore(lock, flags); } while (0)
raw_spin_unlock_bh  macro  include/linux/spinlock.h  231  #define raw_spin_unlock_bh(lock) _raw_spin_unlock_bh(lock)
raw_spin_trylock_bh  macro  include/linux/spinlock.h  233  #define raw_spin_trylock_bh(lock) __cond_lock(lock, _raw_spin_trylock_bh(lock))
raw_spin_trylock_irq  macro  include/linux/spinlock.h  236  #define raw_spin_trylock_irq(lock) ({ local_irq_disable(); raw_spin_trylock(lock) ? 1 : ({ local_irq_enable(); 0;  }); })
raw_spin_trylock_irqsave  macro  include/linux/spinlock.h  243  #define raw_spin_trylock_irqsave(lock,flags) ({ local_irq_save(flags); raw_spin_trylock(lock) ? 1 : ({ local_irq_restore(flags); 0; }); })
raw_spin_can_lock  macro  include/linux/spinlock.h  254  #define raw_spin_can_lock(lock) (!raw_spin_is_locked(lock))
spinlock_check  function  include/linux/spinlock.h  272  static inline raw_spinlock_t *spinlock_check(spinlock_t *lock)
spin_lock_init  macro  include/linux/spinlock.h  277  #define spin_lock_init(_lock) do { spinlock_check(_lock); raw_spin_lock_init(&(_lock)->rlock); } while (0)
spin_lock  function  include/linux/spinlock.h  283  static inline void spin_lock(spinlock_t *lock)
spin_lock_bh  function  include/linux/spinlock.h  288  static inline void spin_lock_bh(spinlock_t *lock)
spin_trylock  function  include/linux/spinlock.h  293  static inline int spin_trylock(spinlock_t *lock)
spin_lock_nested  macro  include/linux/spinlock.h  298  #define spin_lock_nested(lock,subclass) do { raw_spin_lock_nested(spinlock_check(lock), subclass); } while (0)
spin_lock_nest_lock  macro  include/linux/spinlock.h  303  #define spin_lock_nest_lock(lock,nest_lock) do { raw_spin_lock_nest_lock(spinlock_check(lock), nest_lock); } while (0)
spin_lock_irq  function  include/linux/spinlock.h  308  static inline void spin_lock_irq(spinlock_t *lock)
spin_lock_irqsave  macro  include/linux/spinlock.h  313  #define spin_lock_irqsave(lock,flags) do { raw_spin_lock_irqsave(spinlock_check(lock), flags); } while (0)
spin_lock_irqsave_nested  macro  include/linux/spinlock.h  318  #define spin_lock_irqsave_nested(lock,flags,subclass) do { raw_spin_lock_irqsave_nested(spinlock_check(lock), flags, subclass); } while (0)
spin_unlock  function  include/linux/spinlock.h  323  static inline void spin_unlock(spinlock_t *lock)
spin_unlock_bh  function  include/linux/spinlock.h  328  static inline void spin_unlock_bh(spinlock_t *lock)
spin_unlock_irq  function  include/linux/spinlock.h  333  static inline void spin_unlock_irq(spinlock_t *lock)
spin_unlock_irqrestore  function  include/linux/spinlock.h  338  static inline void spin_unlock_irqrestore(spinlock_t *lock,unsigned long flags)
spin_trylock_bh  function  include/linux/spinlock.h  343  static inline int spin_trylock_bh(spinlock_t *lock)
spin_trylock_irq  function  include/linux/spinlock.h  348  static inline int spin_trylock_irq(spinlock_t *lock)
spin_trylock_irqsave  macro  include/linux/spinlock.h  353  #define spin_trylock_irqsave(lock,flags) ({ raw_spin_trylock_irqsave(spinlock_check(lock), flags); })
spin_unlock_wait  function  include/linux/spinlock.h  358  static inline void spin_unlock_wait(spinlock_t *lock)
spin_is_locked  function  include/linux/spinlock.h  363  static inline int spin_is_locked(spinlock_t *lock)
spin_is_contended  function  include/linux/spinlock.h  368  static inline int spin_is_contended(spinlock_t *lock)
spin_can_lock  function  include/linux/spinlock.h  373  static inline int spin_can_lock(spinlock_t *lock)
assert_spin_locked  macro  include/linux/spinlock.h  378  #define assert_spin_locked(lock) assert_raw_spin_locked(&(lock)->rlock)
_atomic_dec_and_lock  prototype  include/linux/spinlock.h  393  extern int _atomic_dec_and_lock(atomic_t *atomic,spinlock_t *lock);
atomic_dec_and_lock  macro  include/linux/spinlock.h  394  #define atomic_dec_and_lock(atomic,lock) __cond_lock(lock, _atomic_dec_and_lock(atomic, lock))
_DEVICE_H_  macro  include/linux/device.h  14  #define _DEVICE_H_
bus_attribute  struct  include/linux/device.h  40  struct bus_attribute { struct attribute attr; ssize_t (*show)(struct bus_type *bus, char *buf); ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count); };
BUS_ATTR  macro  include/linux/device.h  46  #define BUS_ATTR(_name,_mode,_show,_store) struct bus_attribute bus_attr_##_name = __ATTR(_name, _mode, _show, _store)
bus_create_file  prototype  include/linux/device.h  49  extern int __must_check bus_create_file(struct bus_type *,struct bus_attribute *);
bus_remove_file  prototype  include/linux/device.h  51  extern void bus_remove_file(struct bus_type *,struct bus_attribute *);
bus_type  struct  include/linux/device.h  90  struct bus_type { const char *name; const char *dev_name; struct device *dev_root; struct bus_attribute *bus_attrs; struct device_attribute *dev_attrs; struct driver_attribute *drv_attrs; int (*match)(struct device *dev, struct device_driver *drv); int (*uevent)(struct device *dev, struct kobj_uevent_env *env); int (*probe)(struct device *dev); int (*remove)(struct device *dev); void (*shutdown)(struct device *dev); int (*suspend)(struct device *dev, pm_message_t state); int (*resume)(struct device *dev); const struct dev_pm_ops *pm; struct iommu_ops *iommu_ops; struct subsys_private *p; };
bus_register  macro  include/linux/device.h  116  #define bus_register(subsys) ({ static struct lock_class_key __key; __bus_register(subsys, &__key); })
__bus_register  prototype  include/linux/device.h  121  extern int __must_check __bus_register(struct bus_type *bus,struct lock_class_key *key);
bus_unregister  prototype  include/linux/device.h  123  extern void bus_unregister(struct bus_type *bus);
bus_rescan_devices  prototype  include/linux/device.h  125  extern int __must_check bus_rescan_devices(struct bus_type *bus);
subsys_dev_iter  struct  include/linux/device.h  128  struct subsys_dev_iter { struct klist_iter ki; const struct device_type *type; };
subsys_dev_iter_init  prototype  include/linux/device.h  132  void subsys_dev_iter_init(struct subsys_dev_iter *iter,struct bus_type *subsys,struct device *start,const struct device_type *type);
subsys_dev_iter_next  prototype  include/linux/device.h  136  struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
subsys_dev_iter_exit  prototype  include/linux/device.h  137  void subsys_dev_iter_exit(struct subsys_dev_iter *iter);
bus_for_each_dev  prototype  include/linux/device.h  139  int bus_for_each_dev(struct bus_type *bus,struct device *start,void *data,int (*fn)(struct device *dev, void *data));
bus_find_device  prototype  include/linux/device.h  141  struct device *bus_find_device(struct bus_type *bus,struct device *start,void *data,int (*match)(struct device *dev, void *data));
bus_find_device_by_name  prototype  include/linux/device.h  144  struct device *bus_find_device_by_name(struct bus_type *bus,struct device *start,const char *name);
subsys_find_device_by_id  prototype  include/linux/device.h  147  struct device *subsys_find_device_by_id(struct bus_type *bus,unsigned int id,struct device *hint);
bus_for_each_drv  prototype  include/linux/device.h  149  int bus_for_each_drv(struct bus_type *bus,struct device_driver *start,void *data, int (*fn)(struct device_driver *, void *));
bus_sort_breadthfirst  prototype  include/linux/device.h  151  void bus_sort_breadthfirst(struct bus_type *bus,int (*compare)(const struct device *a,const struct device *b));
bus_register_notifier  prototype  include/linux/device.h  162  extern int bus_register_notifier(struct bus_type *bus,struct notifier_block *nb);
bus_unregister_notifier  prototype  include/linux/device.h  164  extern int bus_unregister_notifier(struct bus_type *bus,struct notifier_block *nb);
BUS_NOTIFY_ADD_DEVICE  macro  include/linux/device.h  171  #define BUS_NOTIFY_ADD_DEVICE 0x00000001
BUS_NOTIFY_DEL_DEVICE  macro  include/linux/device.h  172  #define BUS_NOTIFY_DEL_DEVICE 0x00000002
BUS_NOTIFY_BIND_DRIVER  macro  include/linux/device.h  173  #define BUS_NOTIFY_BIND_DRIVER 0x00000003
BUS_NOTIFY_BOUND_DRIVER  macro  include/linux/device.h  175  #define BUS_NOTIFY_BOUND_DRIVER 0x00000004
BUS_NOTIFY_UNBIND_DRIVER  macro  include/linux/device.h  176  #define BUS_NOTIFY_UNBIND_DRIVER 0x00000005
BUS_NOTIFY_UNBOUND_DRIVER  macro  include/linux/device.h  178  #define BUS_NOTIFY_UNBOUND_DRIVER 0x00000006
bus_get_kset  prototype  include/linux/device.h  181  extern struct kset *bus_get_kset(struct bus_type *bus);
bus_get_device_klist  prototype  include/linux/device.h  182  extern struct klist *bus_get_device_klist(struct bus_type *bus);
device_driver  struct  include/linux/device.h  215  struct device_driver { const char *name; struct bus_type *bus; struct module *owner; const char *mod_name; bool suppress_bind_attrs; const struct of_device_id *of_match_table; int (*probe) (struct device *dev); int (*remove) (struct device *dev); void (*shutdown) (struct device *dev); int (*suspend) (struct device *dev, pm_message_t state); int (*resume) (struct device *dev); const struct attribute_group **groups; const struct dev_pm_ops *pm; struct driver_private *p; };
driver_register  prototype  include/linux/device.h  239  extern int __must_check driver_register(struct device_driver *drv);
driver_unregister  prototype  include/linux/device.h  240  extern void driver_unregister(struct device_driver *drv);
driver_find  prototype  include/linux/device.h  242  extern struct device_driver *driver_find(const char *name,struct bus_type *bus);
driver_probe_done  prototype  include/linux/device.h  244  extern int driver_probe_done(void);
wait_for_device_probe  prototype  include/linux/device.h  245  extern void wait_for_device_probe(void);
driver_attribute  struct  include/linux/device.h  250  struct driver_attribute { struct attribute attr; ssize_t (*show)(struct device_driver *driver, char *buf); ssize_t (*store)(struct device_driver *driver, const char *buf,size_t count); };
DRIVER_ATTR  macro  include/linux/device.h  257  #define DRIVER_ATTR(_name,_mode,_show,_store) struct driver_attribute driver_attr_##_name = __ATTR(_name, _mode, _show, _store)
driver_create_file  prototype  include/linux/device.h  261  extern int __must_check driver_create_file(struct device_driver *driver,const struct driver_attribute *attr);
driver_remove_file  prototype  include/linux/device.h  263  extern void driver_remove_file(struct device_driver *driver,const struct driver_attribute *attr);
driver_for_each_device  prototype  include/linux/device.h  266  extern int __must_check driver_for_each_device(struct device_driver *drv,struct device *start,void *data,int (*fn)(struct device *dev,void *));
driver_find_device  prototype  include/linux/device.h  271  struct device *driver_find_device(struct device_driver *drv,struct device *start, void *data,int (*match)(struct device *dev, void *data));
subsys_interface  struct  include/linux/device.h  288  struct subsys_interface { const char *name; struct bus_type *subsys; struct list_head node; int (*add_dev)(struct device *dev, struct subsys_interface *sif); int (*remove_dev)(struct device *dev, struct subsys_interface *sif); };
subsys_interface_register  prototype  include/linux/device.h  296  int subsys_interface_register(struct subsys_interface *sif);
subsys_interface_unregister  prototype  include/linux/device.h  297  void subsys_interface_unregister(struct subsys_interface *sif);
subsys_system_register  prototype  include/linux/device.h  299  int subsys_system_register(struct bus_type *subsys,const struct attribute_group **groups);
class_dev_iter  struct  include/linux/device.h  357  struct class_dev_iter { struct klist_iter ki; const struct device_type *type; };
__class_register  prototype  include/linux/device.h  364  extern int __must_check __class_register(struct class *class,struct lock_class_key *key);
class_unregister  prototype  include/linux/device.h  366  extern void class_unregister(struct class *class);
class_register  macro  include/linux/device.h  370  #define class_register(class) ({ static struct lock_class_key __key; __class_register(class, &__key); })
class_compat_register  prototype  include/linux/device.h  377  struct class_compat *class_compat_register(const char *name);
class_compat_unregister  prototype  include/linux/device.h  378  void class_compat_unregister(struct class_compat *cls);
class_compat_create_link  prototype  include/linux/device.h  379  int class_compat_create_link(struct class_compat *cls,struct device *dev,struct device *device_link);
class_compat_remove_link  prototype  include/linux/device.h  381  void class_compat_remove_link(struct class_compat *cls,struct device *dev,struct device *device_link);
class_dev_iter_init  prototype  include/linux/device.h  384  extern void class_dev_iter_init(struct class_dev_iter *iter,struct class *class,struct device *start,const struct device_type *type);
class_dev_iter_next  prototype  include/linux/device.h  388  extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
class_dev_iter_exit  prototype  include/linux/device.h  389  extern void class_dev_iter_exit(struct class_dev_iter *iter);
class_for_each_device  prototype  include/linux/device.h  391  extern int class_for_each_device(struct class *class,struct device *start,void *data,int (*fn)(struct device *dev, void *data));
class_find_device  prototype  include/linux/device.h  394  extern struct device *class_find_device(struct class *class,struct device *start, void *data,int (*match)(struct device *, void *));
class_attribute  struct  include/linux/device.h  398  struct class_attribute { struct attribute attr; ssize_t (*show)(struct class *class, struct class_attribute *attr,char *buf); ssize_t (*store)(struct class *class, struct class_attribute *attr,const char *buf, size_t count); };
CLASS_ATTR  macro  include/linux/device.h  408  #define CLASS_ATTR(_name,_mode,_show,_store) struct class_attribute class_attr_##_name = __ATTR(_name, _mode, _show, _store)
class_create_file  prototype  include/linux/device.h  411  extern int __must_check class_create_file(struct class *class,const struct class_attribute *attr);
class_remove_file  prototype  include/linux/device.h  413  extern void class_remove_file(struct class *class,const struct class_attribute *attr);
class_attribute_string  struct  include/linux/device.h  418  struct class_attribute_string { struct class_attribute attr; char *str; };
_CLASS_ATTR_STRING  macro  include/linux/device.h  424  #define _CLASS_ATTR_STRING(_name,_mode,_str) { __ATTR(_name, _mode, show_class_attr_string, NULL), _str }
CLASS_ATTR_STRING  macro  include/linux/device.h  426  #define CLASS_ATTR_STRING(_name,_mode,_str) struct class_attribute_string class_attr_##_name = _CLASS_ATTR_STRING(_name, _mode, _str)
show_class_attr_string  prototype  include/linux/device.h  430  extern ssize_t show_class_attr_string(struct class *class,struct class_attribute *attr,char *buf);
class_interface  struct  include/linux/device.h  433  struct class_interface { struct list_head node; int (*add_dev) (struct device *, struct class_interface *); void (*remove_dev) (struct device *, struct class_interface *); };
class_interface_register  prototype  include/linux/device.h  441  extern int __must_check class_interface_register(struct class_interface *);
class_interface_unregister  prototype  include/linux/device.h  442  extern void class_interface_unregister(struct class_interface *);
__class_create  prototype  include/linux/device.h  444  extern struct class * __must_check __class_create(struct module *owner,const char *name,struct lock_class_key *key);
class_destroy  prototype  include/linux/device.h  447  extern void class_destroy(struct class *cls);
class_create  macro  include/linux/device.h  451  #define class_create(owner,name) ({ static struct lock_class_key __key; __class_create(owner, name, &__key); })
device_type  struct  include/linux/device.h  466  struct device_type { const char *name; const struct attribute_group **groups; int (*uevent)(struct device *dev, struct kobj_uevent_env *env); char *(*devnode)(struct device *dev, umode_t *mode); void (*release)(struct device *dev); const struct dev_pm_ops *pm; };
device_attribute  struct  include/linux/device.h  477  struct device_attribute { struct attribute attr; ssize_t (*show)(struct device *dev, struct device_attribute *attr,char *buf); ssize_t (*store)(struct device *dev, struct device_attribute *attr,const char *buf, size_t count); };
dev_ext_attribute  struct  include/linux/device.h  485  struct dev_ext_attribute { struct device_attribute attr; void *var; };
device_show_ulong  prototype  include/linux/device.h  490  ssize_t device_show_ulong(struct device *dev,struct device_attribute *attr,char *buf);
device_store_ulong  prototype  include/linux/device.h  492  ssize_t device_store_ulong(struct device *dev,struct device_attribute *attr,const char *buf, size_t count);
device_show_int  prototype  include/linux/device.h  494  ssize_t device_show_int(struct device *dev,struct device_attribute *attr,char *buf);
device_store_int  prototype  include/linux/device.h  496  ssize_t device_store_int(struct device *dev,struct device_attribute *attr,const char *buf, size_t count);
DEVICE_ATTR  macro  include/linux/device.h  499  #define DEVICE_ATTR(_name,_mode,_show,_store) struct device_attribute dev_attr_##_name = __ATTR(_name, _mode, _show, _store)
DEVICE_ULONG_ATTR  macro  include/linux/device.h  501  #define DEVICE_ULONG_ATTR(_name,_mode,_var) struct dev_ext_attribute dev_attr_##_name = { __ATTR(_name, _mode, device_show_ulong, device_store_ulong), &(_var) }
DEVICE_INT_ATTR  macro  include/linux/device.h  504  #define DEVICE_INT_ATTR(_name,_mode,_var) struct dev_ext_attribute dev_attr_##_name = { __ATTR(_name, _mode, device_show_int, device_store_int), &(_var) }
DEVICE_ATTR_IGNORE_LOCKDEP  macro  include/linux/device.h  507  #define DEVICE_ATTR_IGNORE_LOCKDEP(_name,_mode,_show,_store) struct device_attribute dev_attr_##_name = __ATTR_IGNORE_LOCKDEP(_name, _mode, _show, _store)
device_create_file  prototype  include/linux/device.h  511  extern int device_create_file(struct device *device,const struct device_attribute *entry);
device_remove_file  prototype  include/linux/device.h  513  extern void device_remove_file(struct device *dev,const struct device_attribute *attr);
device_create_bin_file  prototype  include/linux/device.h  515  extern int __must_check device_create_bin_file(struct device *dev,const struct bin_attribute *attr);
device_remove_bin_file  prototype  include/linux/device.h  517  extern void device_remove_bin_file(struct device *dev,const struct bin_attribute *attr);
device_schedule_callback_owner  prototype  include/linux/device.h  519  extern int device_schedule_callback_owner(struct device *dev,void (*func)(struct device *dev), struct module *owner);
device_schedule_callback  macro  include/linux/device.h  523  #define device_schedule_callback(dev,func) device_schedule_callback_owner(dev, func, THIS_MODULE)
__devres_alloc  prototype  include/linux/device.h  531  extern void *__devres_alloc(dr_release_t release,size_t size,gfp_t gfp,const char *name);
devres_alloc  prototype  include/linux/device.h  536  extern void *devres_alloc(dr_release_t release,size_t size,gfp_t gfp);
devres_free  prototype  include/linux/device.h  538  extern void devres_free(void *res);
devres_add  prototype  include/linux/device.h  539  extern void devres_add(struct device *dev,void *res);
devres_find  prototype  include/linux/device.h  540  extern void *devres_find(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_get  prototype  include/linux/device.h  542  extern void *devres_get(struct device *dev,void *new_res,dr_match_t match, void *match_data);
devres_remove  prototype  include/linux/device.h  544  extern void *devres_remove(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_destroy  prototype  include/linux/device.h  546  extern int devres_destroy(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_release  prototype  include/linux/device.h  548  extern int devres_release(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_open_group  prototype  include/linux/device.h  552  extern void * __must_check devres_open_group(struct device *dev,void *id,gfp_t gfp);
devres_close_group  prototype  include/linux/device.h  554  extern void devres_close_group(struct device *dev,void *id);
devres_remove_group  prototype  include/linux/device.h  555  extern void devres_remove_group(struct device *dev,void *id);
devres_release_group  prototype  include/linux/device.h  556  extern int devres_release_group(struct device *dev,void *id);
devm_kzalloc  prototype  include/linux/device.h  559  extern void *devm_kzalloc(struct device *dev,size_t size,gfp_t gfp);
devm_kfree  prototype  include/linux/device.h  560  extern void devm_kfree(struct device *dev,void *p);
devm_request_and_ioremap  prototype  include/linux/device.h  562  void __iomem *devm_request_and_ioremap(struct device *dev,struct resource *res);
device_dma_parameters  struct  include/linux/device.h  565  struct device_dma_parameters { unsigned int max_segment_size; unsigned long segment_boundary_mask; };
device  struct  include/linux/device.h  633  struct device { struct device *parent; struct device_private *p; struct kobject kobj; const char *init_name; const struct device_type *type; struct mutex mutex; struct bus_type *bus; struct device_driver *driver; void *platform_data; struct dev_pm_info power; struct dev_pm_domain *pm_domain; int numa_node; u64 *dma_mask; u64 coherent_dma_mask; struct device_dma_parameters *dma_parms; struct list_head dma_pools; struct dma_coherent_mem *dma_mem; struct cma *cma_area; struct dev_archdata archdata; struct device_node *of_node; dev_t devt; u32 id; spinlock_t devres_lock; struct list_head devres_head; struct klist_node knode_class; const struct attribute_group **groups; void (*release)(struct device *dev); };
dev_name  function  include/linux/device.h  695  static inline const char *dev_name(const struct device *dev)
dev_set_name  prototype  include/linux/device.h  705  int dev_set_name(struct device *dev,const char *name,...);
dev_to_node  function  include/linux/device.h  717  static inline int dev_to_node(struct device *dev)
set_dev_node  function  include/linux/device.h  721  static inline void set_dev_node(struct device *dev,int node)
dev_to_psd  function  include/linux/device.h  726  static inline struct pm_subsys_data *dev_to_psd(struct device *dev)
dev_get_uevent_suppress  function  include/linux/device.h  731  static inline unsigned int dev_get_uevent_suppress(const struct device *dev)
dev_set_uevent_suppress  function  include/linux/device.h  736  static inline void dev_set_uevent_suppress(struct device *dev,int val)
device_is_registered  function  include/linux/device.h  741  static inline int device_is_registered(struct device *dev)
device_enable_async_suspend  function  include/linux/device.h  746  static inline void device_enable_async_suspend(struct device *dev)
device_disable_async_suspend  function  include/linux/device.h  752  static inline void device_disable_async_suspend(struct device *dev)
device_async_suspend_enabled  function  include/linux/device.h  758  static inline bool device_async_suspend_enabled(struct device *dev)
pm_suspend_ignore_children  function  include/linux/device.h  763  static inline void pm_suspend_ignore_children(struct device *dev,bool enable)
device_lock  function  include/linux/device.h  768  static inline void device_lock(struct device *dev)
device_trylock  function  include/linux/device.h  773  static inline int device_trylock(struct device *dev)
device_unlock  function  include/linux/device.h  778  static inline void device_unlock(struct device *dev)
driver_init  prototype  include/linux/device.h  783  void driver_init(void);
device_register  prototype  include/linux/device.h  788  extern int __must_check device_register(struct device *dev);
device_unregister  prototype  include/linux/device.h  789  extern void device_unregister(struct device *dev);
device_initialize  prototype  include/linux/device.h  790  extern void device_initialize(struct device *dev);
device_add  prototype  include/linux/device.h  791  extern int __must_check device_add(struct device *dev);
device_del  prototype  include/linux/device.h  792  extern void device_del(struct device *dev);
device_for_each_child  prototype  include/linux/device.h  793  extern int device_for_each_child(struct device *dev,void *data,int (*fn)(struct device *dev, void *data));
device_find_child  prototype  include/linux/device.h  795  extern struct device *device_find_child(struct device *dev,void *data,int (*match)(struct device *dev, void *data));
device_rename  prototype  include/linux/device.h  797  extern int device_rename(struct device *dev,const char *new_name);
device_move  prototype  include/linux/device.h  798  extern int device_move(struct device *dev,struct device *new_parent,enum dpm_order dpm_order);
device_get_devnode  prototype  include/linux/device.h  800  extern const char *device_get_devnode(struct device *dev,umode_t *mode, const char **tmp);
dev_get_drvdata  prototype  include/linux/device.h  802  extern void *dev_get_drvdata(const struct device *dev);
dev_set_drvdata  prototype  include/linux/device.h  803  extern int dev_set_drvdata(struct device *dev,void *data);
__root_device_register  prototype  include/linux/device.h  808  extern struct device *__root_device_register(const char *name,struct module *owner);
root_device_register  macro  include/linux/device.h  815  #define root_device_register(name) __root_device_register(name, THIS_MODULE)
root_device_unregister  prototype  include/linux/device.h  818  extern void root_device_unregister(struct device *root);
dev_get_platdata  function  include/linux/device.h  820  static inline void *dev_get_platdata(const struct device *dev)
device_bind_driver  prototype  include/linux/device.h  829  extern int __must_check device_bind_driver(struct device *dev);
device_release_driver  prototype  include/linux/device.h  830  extern void device_release_driver(struct device *dev);
device_attach  prototype  include/linux/device.h  831  extern int __must_check device_attach(struct device *dev);
driver_attach  prototype  include/linux/device.h  832  extern int __must_check driver_attach(struct device_driver *drv);
device_reprobe  prototype  include/linux/device.h  833  extern int __must_check device_reprobe(struct device *dev);
device_create_vargs  prototype  include/linux/device.h  838  extern struct device *device_create_vargs(struct class *cls,struct device *parent,dev_t devt,void *drvdata,const char *fmt,va_list vargs);
device_create  prototype  include/linux/device.h  845  struct device *device_create(struct class *cls,struct device *parent,dev_t devt, void *drvdata,const char *fmt, ...);
device_destroy  prototype  include/linux/device.h  848  extern void device_destroy(struct class *cls,dev_t devt);
get_device  prototype  include/linux/device.h  865  extern struct device *get_device(struct device *dev);
put_device  prototype  include/linux/device.h  866  extern void put_device(struct device *dev);
devtmpfs_create_node  function  include/linux/device.h  873  static inline int devtmpfs_create_node(struct device *dev) { return 0; }
devtmpfs_delete_node  function  include/linux/device.h  874  static inline int devtmpfs_delete_node(struct device *dev) { return 0; }
devtmpfs_mount  function  include/linux/device.h  875  static inline int devtmpfs_mount(const char *mountpoint) { return 0; }
device_shutdown  prototype  include/linux/device.h  879  extern void device_shutdown(void);
dev_driver_string  prototype  include/linux/device.h  882  extern const char *dev_driver_string(const struct device *dev);
__dev_printk  function  include/linux/device.h  910  static inline int __dev_printk(const char *level,const struct device *dev,struct va_format *vaf)
dev_printk  function  include/linux/device.h  914  int dev_printk(const char *level,const struct device *dev,const char *fmt, ...)
dev_emerg  function  include/linux/device.h  919  int dev_emerg(const struct device *dev,const char *fmt,...)
dev_alert  function  include/linux/device.h  925  int dev_alert(const struct device *dev,const char *fmt,...)
dev_crit  function  include/linux/device.h  922  int dev_crit(const struct device *dev,const char *fmt,...)
dev_err  function  include/linux/device.h  928  int dev_err(const struct device *dev,const char *fmt,...)
dev_warn  function  include/linux/device.h  931  int dev_warn(const struct device *dev,const char *fmt,...)
dev_notice  function  include/linux/device.h  934  int dev_notice(const struct device *dev,const char *fmt,...)
_dev_info  function  include/linux/device.h  937  int _dev_info(const struct device *dev,const char *fmt,...)
dev_level_ratelimited  macro  include/linux/device.h  942  #define dev_level_ratelimited(dev_level,dev,fmt,...) do { static DEFINE_RATELIMIT_STATE(_rs, DEFAULT_RATELIMIT_INTERVAL, DEFAULT_RATELIMIT_BURST); if (__ratelimit(&_rs)) dev_level(dev, fmt, ##__VA_ARGS__); } while (0)
dev_emerg_ratelimited  macro  include/linux/device.h  951  #define dev_emerg_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_emerg, dev, fmt, ##__VA_ARGS__)
dev_alert_ratelimited  macro  include/linux/device.h  953  #define dev_alert_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_alert, dev, fmt, ##__VA_ARGS__)
dev_crit_ratelimited  macro  include/linux/device.h  955  #define dev_crit_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_crit, dev, fmt, ##__VA_ARGS__)
dev_err_ratelimited  macro  include/linux/device.h  957  #define dev_err_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_err, dev, fmt, ##__VA_ARGS__)
dev_warn_ratelimited  macro  include/linux/device.h  959  #define dev_warn_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_warn, dev, fmt, ##__VA_ARGS__)
dev_notice_ratelimited  macro  include/linux/device.h  961  #define dev_notice_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_notice, dev, fmt, ##__VA_ARGS__)
dev_info_ratelimited  macro  include/linux/device.h  963  #define dev_info_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_info, dev, fmt, ##__VA_ARGS__)
dev_dbg_ratelimited  macro  include/linux/device.h  965  #define dev_dbg_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_dbg, dev, fmt, ##__VA_ARGS__)
dev_info  macro  include/linux/device.h  975  #define dev_info(dev,fmt,arg...) _dev_info(dev,fmt,##arg)
dev_dbg  macro  include/linux/device.h  986  #define dev_dbg(dev,format,arg...) ({ if (0) dev_printk(KERN_DEBUG, dev, format, ##arg); 0; })
dev_vdbg  macro  include/linux/device.h  997  #define dev_vdbg(dev,format,arg...) ({ if (0) dev_printk(KERN_DEBUG, dev, format, ##arg); 0; })
dev_WARN  macro  include/linux/device.h  1010  #define dev_WARN(dev,format,arg...) WARN(1, "Device: %s\n" format, dev_driver_string(dev), ## arg);
dev_WARN_ONCE  macro  include/linux/device.h  1013  #define dev_WARN_ONCE(dev,condition,format,arg...) WARN_ONCE(condition, "Device %s\n" format, dev_driver_string(dev), ## arg)
MODULE_ALIAS_CHARDEV  macro  include/linux/device.h  1018  #define MODULE_ALIAS_CHARDEV(major,minor) MODULE_ALIAS("char-major-" __stringify(major) "-" __stringify(minor))
MODULE_ALIAS_CHARDEV_MAJOR  macro  include/linux/device.h  1020  #define MODULE_ALIAS_CHARDEV_MAJOR(major) MODULE_ALIAS("char-major-" __stringify(major) "-*")
sysfs_deprecated  macro  include/linux/device.h  1026  #define sysfs_deprecated 0
module_driver  macro  include/linux/device.h  1043  #define module_driver(__driver,__register,__unregister,...) static int __init __driver##_init(void) { return __register(&(__driver) , ##__VA_ARGS__); } module_init(__driver##_init); static void __exit __driver##_exit(void) { __unregister(&(__driver) , ##__VA_ARGS__); } module_exit(__driver##_exit);
LINUX_MOD_DEVICETABLE_H  macro  include/linux/mod_devicetable.h  8  #define LINUX_MOD_DEVICETABLE_H
PCI_ANY_ID  macro  include/linux/mod_devicetable.h  15  #define PCI_ANY_ID (~0)
pci_device_id  struct  include/linux/mod_devicetable.h  17  struct pci_device_id { __u32 vendor, device; __u32 subvendor, subdevice; __u32 class, class_mask; kernel_ulong_t driver_data; };
IEEE1394_MATCH_VENDOR_ID  macro  include/linux/mod_devicetable.h  25  #define IEEE1394_MATCH_VENDOR_ID 0x0001
IEEE1394_MATCH_MODEL_ID  macro  include/linux/mod_devicetable.h  26  #define IEEE1394_MATCH_MODEL_ID 0x0002
IEEE1394_MATCH_SPECIFIER_ID  macro  include/linux/mod_devicetable.h  27  #define IEEE1394_MATCH_SPECIFIER_ID 0x0004
IEEE1394_MATCH_VERSION  macro  include/linux/mod_devicetable.h  28  #define IEEE1394_MATCH_VERSION 0x0008
ieee1394_device_id  struct  include/linux/mod_devicetable.h  30  struct ieee1394_device_id { __u32 match_flags; __u32 vendor_id; __u32 model_id; __u32 specifier_id; __u32 version; kernel_ulong_t driver_data };
usb_device_id  struct  include/linux/mod_devicetable.h  98  struct usb_device_id { __u16 match_flags; __u16 idVendor; __u16 idProduct; __u16 bcdDevice_lo; __u16 bcdDevice_hi; __u8 bDeviceClass; __u8 bDeviceSubClass; __u8 bDeviceProtocol; __u8 bInterfaceClass; __u8 bInterfaceSubClass; __u8 bInterfaceProtocol; kernel_ulong_t driver_info; };
USB_DEVICE_ID_MATCH_VENDOR  macro  include/linux/mod_devicetable.h  123  #define USB_DEVICE_ID_MATCH_VENDOR 0x0001
USB_DEVICE_ID_MATCH_PRODUCT  macro  include/linux/mod_devicetable.h  124  #define USB_DEVICE_ID_MATCH_PRODUCT 0x0002
USB_DEVICE_ID_MATCH_DEV_LO  macro  include/linux/mod_devicetable.h  125  #define USB_DEVICE_ID_MATCH_DEV_LO 0x0004
USB_DEVICE_ID_MATCH_DEV_HI  macro  include/linux/mod_devicetable.h  126  #define USB_DEVICE_ID_MATCH_DEV_HI 0x0008
USB_DEVICE_ID_MATCH_DEV_CLASS  macro  include/linux/mod_devicetable.h  127  #define USB_DEVICE_ID_MATCH_DEV_CLASS 0x0010
USB_DEVICE_ID_MATCH_DEV_SUBCLASS  macro  include/linux/mod_devicetable.h  128  #define USB_DEVICE_ID_MATCH_DEV_SUBCLASS 0x0020
USB_DEVICE_ID_MATCH_DEV_PROTOCOL  macro  include/linux/mod_devicetable.h  129  #define USB_DEVICE_ID_MATCH_DEV_PROTOCOL 0x0040
USB_DEVICE_ID_MATCH_INT_CLASS  macro  include/linux/mod_devicetable.h  130  #define USB_DEVICE_ID_MATCH_INT_CLASS 0x0080
USB_DEVICE_ID_MATCH_INT_SUBCLASS  macro  include/linux/mod_devicetable.h  131  #define USB_DEVICE_ID_MATCH_INT_SUBCLASS 0x0100
USB_DEVICE_ID_MATCH_INT_PROTOCOL  macro  include/linux/mod_devicetable.h  132  #define USB_DEVICE_ID_MATCH_INT_PROTOCOL 0x0200
HID_ANY_ID  macro  include/linux/mod_devicetable.h  134  #define HID_ANY_ID (~0)
HID_BUS_ANY  macro  include/linux/mod_devicetable.h  135  #define HID_BUS_ANY 0xffff
HID_GROUP_ANY  macro  include/linux/mod_devicetable.h  136  #define HID_GROUP_ANY 0x0000
hid_device_id  struct  include/linux/mod_devicetable.h  138  struct hid_device_id { __u16 bus; __u16 group; __u32 vendor; __u32 product; kernel_ulong_t driver_data };
ccw_device_id  struct  include/linux/mod_devicetable.h  148  struct ccw_device_id { __u16 match_flags; __u16 cu_type; __u16 dev_type; __u8 cu_model; __u8 dev_model; kernel_ulong_t driver_info; };
CCW_DEVICE_ID_MATCH_CU_TYPE  macro  include/linux/mod_devicetable.h  159  #define CCW_DEVICE_ID_MATCH_CU_TYPE 0x01
CCW_DEVICE_ID_MATCH_CU_MODEL  macro  include/linux/mod_devicetable.h  160  #define CCW_DEVICE_ID_MATCH_CU_MODEL 0x02
CCW_DEVICE_ID_MATCH_DEVICE_TYPE  macro  include/linux/mod_devicetable.h  161  #define CCW_DEVICE_ID_MATCH_DEVICE_TYPE 0x04
CCW_DEVICE_ID_MATCH_DEVICE_MODEL  macro  include/linux/mod_devicetable.h  162  #define CCW_DEVICE_ID_MATCH_DEVICE_MODEL 0x08
ap_device_id  struct  include/linux/mod_devicetable.h  165  struct ap_device_id { __u16 match_flags; __u8 dev_type; __u8 pad1; __u32 pad2; kernel_ulong_t driver_info; };
AP_DEVICE_ID_MATCH_DEVICE_TYPE  macro  include/linux/mod_devicetable.h  173  #define AP_DEVICE_ID_MATCH_DEVICE_TYPE 0x01
css_device_id  struct  include/linux/mod_devicetable.h  176  struct css_device_id { __u8 match_flags; __u8 type; __u16 pad2; __u32 pad3; kernel_ulong_t driver_data; };
ACPI_ID_LEN  macro  include/linux/mod_devicetable.h  184  #define ACPI_ID_LEN 16
acpi_device_id  struct  include/linux/mod_devicetable.h  187  struct acpi_device_id { __u8 id[ACPI_ID_LEN]; kernel_ulong_t driver_data; };
PNP_ID_LEN  macro  include/linux/mod_devicetable.h  192  #define PNP_ID_LEN 8
PNP_MAX_DEVICES  macro  include/linux/mod_devicetable.h  193  #define PNP_MAX_DEVICES 8
pnp_device_id  struct  include/linux/mod_devicetable.h  195  struct pnp_device_id { __u8 id[PNP_ID_LEN]; kernel_ulong_t driver_data; };
pnp_card_device_id  struct  include/linux/mod_devicetable.h  200  struct pnp_card_device_id { __u8 id[PNP_ID_LEN]; kernel_ulong_t driver_data; struct { __u8 id[PNP_ID_LEN]; } devs[PNP_MAX_DEVICES]; };
SERIO_ANY  macro  include/linux/mod_devicetable.h  209  #define SERIO_ANY 0xff
serio_device_id  struct  include/linux/mod_devicetable.h  211  struct serio_device_id { __u8 type; __u8 extra; __u8 id; __u8 proto; };
of_device_id  struct  include/linux/mod_devicetable.h  221  struct of_device_id { char name[32]; char type[32]; char compatible[128]; void *data; kernel_ulong_t data; };
vio_device_id  struct  include/linux/mod_devicetable.h  234  struct vio_device_id { char type[32]; char compat[32]; };
pcmcia_device_id  struct  include/linux/mod_devicetable.h  241  struct pcmcia_device_id { __u16 match_flags; __u16 manf_id; __u16 card_id; __u8 func_id; __u8 function; __u8 device_no; __u32 prod_id_hash[4] const char * prod_id[4]; kernel_ulong_t prod_id[4] kernel_ulong_t driver_info; char * cisfile; kernel_ulong_t cisfile; };
PCMCIA_DEV_ID_MATCH_MANF_ID  macro  include/linux/mod_devicetable.h  275  #define PCMCIA_DEV_ID_MATCH_MANF_ID 0x0001
PCMCIA_DEV_ID_MATCH_CARD_ID  macro  include/linux/mod_devicetable.h  276  #define PCMCIA_DEV_ID_MATCH_CARD_ID 0x0002
PCMCIA_DEV_ID_MATCH_FUNC_ID  macro  include/linux/mod_devicetable.h  277  #define PCMCIA_DEV_ID_MATCH_FUNC_ID 0x0004
PCMCIA_DEV_ID_MATCH_FUNCTION  macro  include/linux/mod_devicetable.h  278  #define PCMCIA_DEV_ID_MATCH_FUNCTION 0x0008
PCMCIA_DEV_ID_MATCH_PROD_ID1  macro  include/linux/mod_devicetable.h  279  #define PCMCIA_DEV_ID_MATCH_PROD_ID1 0x0010
PCMCIA_DEV_ID_MATCH_PROD_ID2  macro  include/linux/mod_devicetable.h  280  #define PCMCIA_DEV_ID_MATCH_PROD_ID2 0x0020
PCMCIA_DEV_ID_MATCH_PROD_ID3  macro  include/linux/mod_devicetable.h  281  #define PCMCIA_DEV_ID_MATCH_PROD_ID3 0x0040
PCMCIA_DEV_ID_MATCH_PROD_ID4  macro  include/linux/mod_devicetable.h  282  #define PCMCIA_DEV_ID_MATCH_PROD_ID4 0x0080
PCMCIA_DEV_ID_MATCH_DEVICE_NO  macro  include/linux/mod_devicetable.h  283  #define PCMCIA_DEV_ID_MATCH_DEVICE_NO 0x0100
PCMCIA_DEV_ID_MATCH_FAKE_CIS  macro  include/linux/mod_devicetable.h  284  #define PCMCIA_DEV_ID_MATCH_FAKE_CIS 0x0200
PCMCIA_DEV_ID_MATCH_ANONYMOUS  macro  include/linux/mod_devicetable.h  285  #define PCMCIA_DEV_ID_MATCH_ANONYMOUS 0x0400
INPUT_DEVICE_ID_EV_MAX  macro  include/linux/mod_devicetable.h  288  #define INPUT_DEVICE_ID_EV_MAX 0x1f
INPUT_DEVICE_ID_KEY_MIN_INTERESTING  macro  include/linux/mod_devicetable.h  289  #define INPUT_DEVICE_ID_KEY_MIN_INTERESTING 0x71
INPUT_DEVICE_ID_KEY_MAX  macro  include/linux/mod_devicetable.h  290  #define INPUT_DEVICE_ID_KEY_MAX 0x2ff
INPUT_DEVICE_ID_REL_MAX  macro  include/linux/mod_devicetable.h  291  #define INPUT_DEVICE_ID_REL_MAX 0x0f
INPUT_DEVICE_ID_ABS_MAX  macro  include/linux/mod_devicetable.h  292  #define INPUT_DEVICE_ID_ABS_MAX 0x3f
INPUT_DEVICE_ID_MSC_MAX  macro  include/linux/mod_devicetable.h  293  #define INPUT_DEVICE_ID_MSC_MAX 0x07
INPUT_DEVICE_ID_LED_MAX  macro  include/linux/mod_devicetable.h  294  #define INPUT_DEVICE_ID_LED_MAX 0x0f
INPUT_DEVICE_ID_SND_MAX  macro  include/linux/mod_devicetable.h  295  #define INPUT_DEVICE_ID_SND_MAX 0x07
INPUT_DEVICE_ID_FF_MAX  macro  include/linux/mod_devicetable.h  296  #define INPUT_DEVICE_ID_FF_MAX 0x7f
INPUT_DEVICE_ID_SW_MAX  macro  include/linux/mod_devicetable.h  297  #define INPUT_DEVICE_ID_SW_MAX 0x0f
INPUT_DEVICE_ID_MATCH_BUS  macro  include/linux/mod_devicetable.h  299  #define INPUT_DEVICE_ID_MATCH_BUS 1
INPUT_DEVICE_ID_MATCH_VENDOR  macro  include/linux/mod_devicetable.h  300  #define INPUT_DEVICE_ID_MATCH_VENDOR 2
INPUT_DEVICE_ID_MATCH_PRODUCT  macro  include/linux/mod_devicetable.h  301  #define INPUT_DEVICE_ID_MATCH_PRODUCT 4
INPUT_DEVICE_ID_MATCH_VERSION  macro  include/linux/mod_devicetable.h  302  #define INPUT_DEVICE_ID_MATCH_VERSION 8
INPUT_DEVICE_ID_MATCH_EVBIT  macro  include/linux/mod_devicetable.h  304  #define INPUT_DEVICE_ID_MATCH_EVBIT 0x0010
INPUT_DEVICE_ID_MATCH_KEYBIT  macro  include/linux/mod_devicetable.h  305  #define INPUT_DEVICE_ID_MATCH_KEYBIT 0x0020
INPUT_DEVICE_ID_MATCH_RELBIT  macro  include/linux/mod_devicetable.h  306  #define INPUT_DEVICE_ID_MATCH_RELBIT 0x0040
INPUT_DEVICE_ID_MATCH_ABSBIT  macro  include/linux/mod_devicetable.h  307  #define INPUT_DEVICE_ID_MATCH_ABSBIT 0x0080
INPUT_DEVICE_ID_MATCH_MSCIT  macro  include/linux/mod_devicetable.h  308  #define INPUT_DEVICE_ID_MATCH_MSCIT 0x0100
INPUT_DEVICE_ID_MATCH_LEDBIT  macro  include/linux/mod_devicetable.h  309  #define INPUT_DEVICE_ID_MATCH_LEDBIT 0x0200
INPUT_DEVICE_ID_MATCH_SNDBIT  macro  include/linux/mod_devicetable.h  310  #define INPUT_DEVICE_ID_MATCH_SNDBIT 0x0400
INPUT_DEVICE_ID_MATCH_FFBIT  macro  include/linux/mod_devicetable.h  311  #define INPUT_DEVICE_ID_MATCH_FFBIT 0x0800
INPUT_DEVICE_ID_MATCH_SWBIT  macro  include/linux/mod_devicetable.h  312  #define INPUT_DEVICE_ID_MATCH_SWBIT 0x1000
input_device_id  struct  include/linux/mod_devicetable.h  314  struct input_device_id { kernel_ulong_t flags; __u16 bustype; __u16 vendor; __u16 product; __u16 version; kernel_ulong_t evbit[INPUT_DEVICE_ID_EV_MAX / BITS_PER_LONG + 1]; kernel_ulong_t keybit[INPUT_DEVICE_ID_KEY_MAX / BITS_PER_LONG + 1]; kernel_ulong_t relbit[INPUT_DEVICE_ID_REL_MAX / BITS_PER_LONG + 1]; kernel_ulong_t absbit[INPUT_DEVICE_ID_ABS_MAX / BITS_PER_LONG + 1]; kernel_ulong_t mscbit[INPUT_DEVICE_ID_MSC_MAX / BITS_PER_LONG + 1]; kernel_ulong_t ledbit[INPUT_DEVICE_ID_LED_MAX / BITS_PER_LONG + 1]; kernel_ulong_t sndbit[INPUT_DEVICE_ID_SND_MAX / BITS_PER_LONG + 1]; kernel_ulong_t ffbit[INPUT_DEVICE_ID_FF_MAX / BITS_PER_LONG + 1]; kernel_ulong_t swbit[INPUT_DEVICE_ID_SW_MAX / BITS_PER_LONG + 1]; kernel_ulong_t driver_info; };
EISA_SIG_LEN  macro  include/linux/mod_devicetable.h  338  #define EISA_SIG_LEN 8
eisa_device_id  struct  include/linux/mod_devicetable.h  341  struct eisa_device_id { char sig[EISA_SIG_LEN]; kernel_ulong_t driver_data; };
EISA_DEVICE_MODALIAS_FMT  macro  include/linux/mod_devicetable.h  346  #define EISA_DEVICE_MODALIAS_FMT "eisa:s%s"
parisc_device_id  struct  include/linux/mod_devicetable.h  348  struct parisc_device_id { __u8 hw_type; __u8 hversion_rev; __u16 hversion; __u32 sversion; };
PA_HWTYPE_ANY_ID  macro  include/linux/mod_devicetable.h  355  #define PA_HWTYPE_ANY_ID 0xff
PA_HVERSION_REV_ANY_ID  macro  include/linux/mod_devicetable.h  356  #define PA_HVERSION_REV_ANY_ID 0xff
PA_HVERSION_ANY_ID  macro  include/linux/mod_devicetable.h  357  #define PA_HVERSION_ANY_ID 0xffff
PA_SVERSION_ANY_ID  macro  include/linux/mod_devicetable.h  358  #define PA_SVERSION_ANY_ID 0xffffffff
SDIO_ANY_ID  macro  include/linux/mod_devicetable.h  362  #define SDIO_ANY_ID (~0)
sdio_device_id  struct  include/linux/mod_devicetable.h  364  struct sdio_device_id { __u16 vendor; __u16 device; kernel_ulong_t driver_data };
ssb_device_id  struct  include/linux/mod_devicetable.h  373  struct ssb_device_id { __u16 vendor; __u16 coreid; __u8 revision; };
SSB_DEVICE  macro  include/linux/mod_devicetable.h  378  #define SSB_DEVICE(_vendor,_coreid,_revision) { .vendor = _vendor, .coreid = _coreid, .revision = _revision, }
SSB_DEVTABLE_END  macro  include/linux/mod_devicetable.h  380  #define SSB_DEVTABLE_END { 0, },
SSB_ANY_VENDOR  macro  include/linux/mod_devicetable.h  383  #define SSB_ANY_VENDOR 0xFFFF
SSB_ANY_ID  macro  include/linux/mod_devicetable.h  384  #define SSB_ANY_ID 0xFFFF
SSB_ANY_REV  macro  include/linux/mod_devicetable.h  385  #define SSB_ANY_REV 0xFF
bcma_device_id  struct  include/linux/mod_devicetable.h  388  struct bcma_device_id { __u16 manuf; __u16 id; __u8 rev; };
BCMA_CORE  macro  include/linux/mod_devicetable.h  394  #define BCMA_CORE(_manuf,_id,_rev,_class) { .manuf = _manuf, .id = _id, .rev = _rev, .class = _class, }
BCMA_CORETABLE_END  macro  include/linux/mod_devicetable.h  396  #define BCMA_CORETABLE_END { 0, },
BCMA_ANY_MANUF  macro  include/linux/mod_devicetable.h  399  #define BCMA_ANY_MANUF 0xFFFF
BCMA_ANY_ID  macro  include/linux/mod_devicetable.h  400  #define BCMA_ANY_ID 0xFFFF
BCMA_ANY_REV  macro  include/linux/mod_devicetable.h  401  #define BCMA_ANY_REV 0xFF
BCMA_ANY_CLASS  macro  include/linux/mod_devicetable.h  402  #define BCMA_ANY_CLASS 0xFF
virtio_device_id  struct  include/linux/mod_devicetable.h  404  struct virtio_device_id { __u32 device; __u32 vendor; };
VIRTIO_DEV_ANY_ID  macro  include/linux/mod_devicetable.h  408  #define VIRTIO_DEV_ANY_ID 0xffffffff
hv_vmbus_device_id  struct  include/linux/mod_devicetable.h  413  struct hv_vmbus_device_id { __u8 guid[16]; kernel_ulong_t driver_data };
RPMSG_NAME_SIZE  macro  include/linux/mod_devicetable.h  421  #define RPMSG_NAME_SIZE 32
RPMSG_DEVICE_MODALIAS_FMT  macro  include/linux/mod_devicetable.h  422  #define RPMSG_DEVICE_MODALIAS_FMT "rpmsg:%s"
rpmsg_device_id  struct  include/linux/mod_devicetable.h  424  struct rpmsg_device_id { char name[RPMSG_NAME_SIZE]; };
I2C_NAME_SIZE  macro  include/linux/mod_devicetable.h  430  #define I2C_NAME_SIZE 20
I2C_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  431  #define I2C_MODULE_PREFIX "i2c:"
i2c_device_id  struct  include/linux/mod_devicetable.h  433  struct i2c_device_id { char name[I2C_NAME_SIZE]; kernel_ulong_t driver_data };
SPI_NAME_SIZE  macro  include/linux/mod_devicetable.h  441  #define SPI_NAME_SIZE 32
SPI_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  442  #define SPI_MODULE_PREFIX "spi:"
spi_device_id  struct  include/linux/mod_devicetable.h  444  struct spi_device_id { char name[SPI_NAME_SIZE]; kernel_ulong_t driver_data };
dmi_field  enum  include/linux/mod_devicetable.h  451  enum dmi_field { DMI_NONE, DMI_BIOS_VENDOR, DMI_BIOS_VERSION, DMI_BIOS_DATE, DMI_SYS_VENDOR, DMI_PRODUCT_NAME, DMI_PRODUCT_VERSION, DMI_PRODUCT_SERIAL, DMI_PRODUCT_UUID, DMI_BOARD_VENDOR, DMI_BOARD_NAME, DMI_BOARD_VERSION, DMI_BOARD_SERIAL, DMI_BOARD_ASSET_TAG, DMI_CHASSIS_VENDOR, DMI_CHASSIS_TYPE, DMI_CHASSIS_VERSION, DMI_CHASSIS_SERIAL, DMI_CHASSIS_ASSET_TAG, DMI_STRING_MAX, };
dmi_strmatch  struct  include/linux/mod_devicetable.h  474  struct dmi_strmatch { unsigned char slot; char substr[79]; };
dmi_system_id  struct  include/linux/mod_devicetable.h  488  struct dmi_system_id { int (*callback)(const struct dmi_system_id *); const char *ident; struct dmi_strmatch matches[4]; void *driver_data; };
dmi_device_id  macro  include/linux/mod_devicetable.h  500  #define dmi_device_id dmi_system_id
DMI_MATCH  macro  include/linux/mod_devicetable.h  503  #define DMI_MATCH(a,b) { a,b }
PLATFORM_NAME_SIZE  macro  include/linux/mod_devicetable.h  505  #define PLATFORM_NAME_SIZE 20
PLATFORM_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  506  #define PLATFORM_MODULE_PREFIX "platform:"
platform_device_id  struct  include/linux/mod_devicetable.h  508  struct platform_device_id { char name[PLATFORM_NAME_SIZE]; kernel_ulong_t driver_data };
MDIO_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  514  #define MDIO_MODULE_PREFIX "mdio:"
MDIO_ID_FMT  macro  include/linux/mod_devicetable.h  516  #define MDIO_ID_FMT "%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d"
MDIO_ID_ARGS  macro  include/linux/mod_devicetable.h  517  #define MDIO_ID_ARGS(_id) (_id)>>31, ((_id)>>30) & 1, ((_id)>>29) & 1, ((_id)>>28) & 1, ((_id)>>27) & 1, ((_id)>>26) & 1, ((_id)>>25) & 1, ((_id)>>24) & 1, ((_id)>>23) & 1, ((_id)>>22) & 1, ((_id)>>21) & 1, ((_id)>>20) & 1, ((_id)>>19) & 1, ((_id)>>18) & 1, ((_id)>>17) & 1, ((_id)>>16) & 1, ((_id)>>15) & 1, ((_id)>>14) & 1, ((_id)>>13) & 1, ((_id)>>12) & 1, ((_id)>>11) & 1, ((_id)>>10) & 1, ((_id)>>9) & 1, ((_id)>>8) & 1, ((_id)>>7) & 1, ((_id)>>6) & 1, ((_id)>>5) & 1, ((_id)>>4) & 1, ((_id)>>3) & 1, ((_id)>>2) & 1, ((_id)>>1) & 1, (_id) & 1
mdio_device_id  struct  include/linux/mod_devicetable.h  535  struct mdio_device_id { __u32 phy_id; __u32 phy_id_mask; };
zorro_device_id  struct  include/linux/mod_devicetable.h  540  struct zorro_device_id { __u32 id; kernel_ulong_t driver_data; };
ZORRO_WILDCARD  macro  include/linux/mod_devicetable.h  545  #define ZORRO_WILDCARD (0xffffffff)
ZORRO_DEVICE_MODALIAS_FMT  macro  include/linux/mod_devicetable.h  547  #define ZORRO_DEVICE_MODALIAS_FMT "zorro:i%08X"
ISAPNP_ANY_ID  macro  include/linux/mod_devicetable.h  549  #define ISAPNP_ANY_ID 0xffff
isapnp_device_id  struct  include/linux/mod_devicetable.h  550  struct isapnp_device_id { unsigned short card_vendor, card_device; unsigned short vendor, function; kernel_ulong_t driver_data; };
amba_id  struct  include/linux/mod_devicetable.h  564  struct amba_id { unsigned int id; unsigned int mask; kernel_ulong_t data; void *data; };
x86_cpu_id  struct  include/linux/mod_devicetable.h  579  struct x86_cpu_id { __u16 vendor; __u16 family; __u16 model; __u16 feature; kernel_ulong_t driver_data; };
X86_FEATURE_MATCH  macro  include/linux/mod_devicetable.h  587  #define X86_FEATURE_MATCH(x) { X86_VENDOR_ANY, X86_FAMILY_ANY, X86_MODEL_ANY, x }
X86_VENDOR_ANY  macro  include/linux/mod_devicetable.h  590  #define X86_VENDOR_ANY 0xffff
X86_FAMILY_ANY  macro  include/linux/mod_devicetable.h  591  #define X86_FAMILY_ANY 0
X86_MODEL_ANY  macro  include/linux/mod_devicetable.h  592  #define X86_MODEL_ANY 0
X86_FEATURE_ANY  macro  include/linux/mod_devicetable.h  593  #define X86_FEATURE_ANY 0
__LINUX_GFP_H  macro  include/linux/gfp.h  2  #define __LINUX_GFP_H
___GFP_DMA  macro  include/linux/gfp.h  13  #define ___GFP_DMA 0x01u
___GFP_HIGHMEM  macro  include/linux/gfp.h  14  #define ___GFP_HIGHMEM 0x02u
___GFP_DMA32  macro  include/linux/gfp.h  15  #define ___GFP_DMA32 0x04u
___GFP_MOVABLE  macro  include/linux/gfp.h  16  #define ___GFP_MOVABLE 0x08u
___GFP_WAIT  macro  include/linux/gfp.h  17  #define ___GFP_WAIT 0x10u
___GFP_HIGH  macro  include/linux/gfp.h  18  #define ___GFP_HIGH 0x20u
___GFP_IO  macro  include/linux/gfp.h  19  #define ___GFP_IO 0x40u
___GFP_FS  macro  include/linux/gfp.h  20  #define ___GFP_FS 0x80u
___GFP_COLD  macro  include/linux/gfp.h  21  #define ___GFP_COLD 0x100u
___GFP_NOWARN  macro  include/linux/gfp.h  22  #define ___GFP_NOWARN 0x200u
___GFP_REPEAT  macro  include/linux/gfp.h  23  #define ___GFP_REPEAT 0x400u
___GFP_NOFAIL  macro  include/linux/gfp.h  24  #define ___GFP_NOFAIL 0x800u
___GFP_NORETRY  macro  include/linux/gfp.h  25  #define ___GFP_NORETRY 0x1000u
___GFP_COMP  macro  include/linux/gfp.h  26  #define ___GFP_COMP 0x4000u
___GFP_ZERO  macro  include/linux/gfp.h  27  #define ___GFP_ZERO 0x8000u
___GFP_NOMEMALLOC  macro  include/linux/gfp.h  28  #define ___GFP_NOMEMALLOC 0x10000u
___GFP_HARDWALL  macro  include/linux/gfp.h  29  #define ___GFP_HARDWALL 0x20000u
___GFP_THISNODE  macro  include/linux/gfp.h  30  #define ___GFP_THISNODE 0x40000u
___GFP_RECLAIMABLE  macro  include/linux/gfp.h  31  #define ___GFP_RECLAIMABLE 0x80000u
___GFP_NOTRACK  macro  include/linux/gfp.h  35  #define ___GFP_NOTRACK 0
___GFP_NO_KSWAPD  macro  include/linux/gfp.h  37  #define ___GFP_NO_KSWAPD 0x400000u
___GFP_OTHER_NODE  macro  include/linux/gfp.h  38  #define ___GFP_OTHER_NODE 0x800000u
___GFP_WRITE  macro  include/linux/gfp.h  39  #define ___GFP_WRITE 0x1000000u
__GFP_DMA  macro  include/linux/gfp.h  50  #define __GFP_DMA ((__force gfp_t)___GFP_DMA)
__GFP_HIGHMEM  macro  include/linux/gfp.h  51  #define __GFP_HIGHMEM ((__force gfp_t)___GFP_HIGHMEM)
__GFP_DMA32  macro  include/linux/gfp.h  52  #define __GFP_DMA32 ((__force gfp_t)___GFP_DMA32)
__GFP_MOVABLE  macro  include/linux/gfp.h  53  #define __GFP_MOVABLE ((__force gfp_t)___GFP_MOVABLE)
GFP_ZONEMASK  macro  include/linux/gfp.h  54  #define GFP_ZONEMASK (__GFP_DMA|__GFP_HIGHMEM|__GFP_DMA32|__GFP_MOVABLE)
__GFP_WAIT  macro  include/linux/gfp.h  70  #define __GFP_WAIT ((__force gfp_t)___GFP_WAIT)
__GFP_HIGH  macro  include/linux/gfp.h  71  #define __GFP_HIGH ((__force gfp_t)___GFP_HIGH)
__GFP_IO  macro  include/linux/gfp.h  72  #define __GFP_IO ((__force gfp_t)___GFP_IO)
__GFP_FS  macro  include/linux/gfp.h  73  #define __GFP_FS ((__force gfp_t)___GFP_FS)
__GFP_COLD  macro  include/linux/gfp.h  74  #define __GFP_COLD ((__force gfp_t)___GFP_COLD)
__GFP_NOWARN  macro  include/linux/gfp.h  75  #define __GFP_NOWARN ((__force gfp_t)___GFP_NOWARN)
__GFP_REPEAT  macro  include/linux/gfp.h  76  #define __GFP_REPEAT ((__force gfp_t)___GFP_REPEAT)
__GFP_NOFAIL  macro  include/linux/gfp.h  77  #define __GFP_NOFAIL ((__force gfp_t)___GFP_NOFAIL)
__GFP_NORETRY  macro  include/linux/gfp.h  78  #define __GFP_NORETRY ((__force gfp_t)___GFP_NORETRY)
__GFP_COMP  macro  include/linux/gfp.h  79  #define __GFP_COMP ((__force gfp_t)___GFP_COMP)
__GFP_ZERO  macro  include/linux/gfp.h  80  #define __GFP_ZERO ((__force gfp_t)___GFP_ZERO)
__GFP_NOMEMALLOC  macro  include/linux/gfp.h  81  #define __GFP_NOMEMALLOC ((__force gfp_t)___GFP_NOMEMALLOC)
__GFP_HARDWALL  macro  include/linux/gfp.h  82  #define __GFP_HARDWALL ((__force gfp_t)___GFP_HARDWALL)
__GFP_THISNODE  macro  include/linux/gfp.h  83  #define __GFP_THISNODE ((__force gfp_t)___GFP_THISNODE)
__GFP_RECLAIMABLE  macro  include/linux/gfp.h  84  #define __GFP_RECLAIMABLE ((__force gfp_t)___GFP_RECLAIMABLE)
__GFP_NOTRACK  macro  include/linux/gfp.h  85  #define __GFP_NOTRACK ((__force gfp_t)___GFP_NOTRACK)
__GFP_NO_KSWAPD  macro  include/linux/gfp.h  87  #define __GFP_NO_KSWAPD ((__force gfp_t)___GFP_NO_KSWAPD)
__GFP_OTHER_NODE  macro  include/linux/gfp.h  88  #define __GFP_OTHER_NODE ((__force gfp_t)___GFP_OTHER_NODE)
__GFP_WRITE  macro  include/linux/gfp.h  89  #define __GFP_WRITE ((__force gfp_t)___GFP_WRITE)
__GFP_NOTRACK_FALSE_POSITIVE  macro  include/linux/gfp.h  95  #define __GFP_NOTRACK_FALSE_POSITIVE (__GFP_NOTRACK)
__GFP_BITS_SHIFT  macro  include/linux/gfp.h  97  #define __GFP_BITS_SHIFT 25
__GFP_BITS_MASK  macro  include/linux/gfp.h  98  #define __GFP_BITS_MASK ((__force gfp_t)((1 << __GFP_BITS_SHIFT) - 1))
GFP_NOWAIT  macro  include/linux/gfp.h  101  #define GFP_NOWAIT (GFP_ATOMIC & ~__GFP_HIGH)
GFP_ATOMIC  macro  include/linux/gfp.h  103  #define GFP_ATOMIC (__GFP_HIGH)
GFP_NOIO  macro  include/linux/gfp.h  104  #define GFP_NOIO (__GFP_WAIT)
GFP_NOFS  macro  include/linux/gfp.h  105  #define GFP_NOFS (__GFP_WAIT | __GFP_IO)
GFP_KERNEL  macro  include/linux/gfp.h  106  #define GFP_KERNEL (__GFP_WAIT | __GFP_IO | __GFP_FS)
GFP_TEMPORARY  macro  include/linux/gfp.h  107  #define GFP_TEMPORARY (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_RECLAIMABLE)
GFP_USER  macro  include/linux/gfp.h  109  #define GFP_USER (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL)
GFP_HIGHUSER  macro  include/linux/gfp.h  110  #define GFP_HIGHUSER (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL | __GFP_HIGHMEM)
GFP_HIGHUSER_MOVABLE  macro  include/linux/gfp.h  112  #define GFP_HIGHUSER_MOVABLE (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL | __GFP_HIGHMEM | __GFP_MOVABLE)
GFP_IOFS  macro  include/linux/gfp.h  115  #define GFP_IOFS (__GFP_IO | __GFP_FS)
GFP_TRANSHUGE  macro  include/linux/gfp.h  116  #define GFP_TRANSHUGE (GFP_HIGHUSER_MOVABLE | __GFP_COMP | __GFP_NOMEMALLOC | __GFP_NORETRY | __GFP_NOWARN | __GFP_NO_KSWAPD)
GFP_THISNODE  macro  include/linux/gfp.h  123  #define GFP_THISNODE ((__force gfp_t)0)
GFP_MOVABLE_MASK  macro  include/linux/gfp.h  127  #define GFP_MOVABLE_MASK (__GFP_RECLAIMABLE|__GFP_MOVABLE)
GFP_RECLAIM_MASK  macro  include/linux/gfp.h  130  #define GFP_RECLAIM_MASK (__GFP_WAIT|__GFP_HIGH|__GFP_IO|__GFP_FS| __GFP_NOWARN|__GFP_REPEAT|__GFP_NOFAIL| __GFP_NORETRY|__GFP_NOMEMALLOC)
GFP_BOOT_MASK  macro  include/linux/gfp.h  135  #define GFP_BOOT_MASK (__GFP_BITS_MASK & ~(__GFP_WAIT|__GFP_IO|__GFP_FS))
GFP_CONSTRAINT_MASK  macro  include/linux/gfp.h  138  #define GFP_CONSTRAINT_MASK (__GFP_HARDWALL|__GFP_THISNODE)
GFP_SLAB_BUG_MASK  macro  include/linux/gfp.h  141  #define GFP_SLAB_BUG_MASK (__GFP_DMA32|__GFP_HIGHMEM|~__GFP_BITS_MASK)
GFP_DMA  macro  include/linux/gfp.h  146  #define GFP_DMA __GFP_DMA
GFP_DMA32  macro  include/linux/gfp.h  149  #define GFP_DMA32 __GFP_DMA32
allocflags_to_migratetype  function  include/linux/gfp.h  152  static inline int allocflags_to_migratetype(gfp_t gfp_flags)
OPT_ZONE_HIGHMEM  macro  include/linux/gfp.h  167  #define OPT_ZONE_HIGHMEM ZONE_NORMAL
OPT_ZONE_DMA  macro  include/linux/gfp.h  173  #define OPT_ZONE_DMA ZONE_NORMAL
OPT_ZONE_DMA32  macro  include/linux/gfp.h  179  #define OPT_ZONE_DMA32 ZONE_NORMAL
GFP_ZONE_TABLE  macro  include/linux/gfp.h  219  #define GFP_ZONE_TABLE ( (ZONE_NORMAL << 0 * ZONES_SHIFT) | (OPT_ZONE_DMA << ___GFP_DMA * ZONES_SHIFT) | (OPT_ZONE_HIGHMEM << ___GFP_HIGHMEM * ZONES_SHIFT) | (OPT_ZONE_DMA32 << ___GFP_DMA32 * ZONES_SHIFT) | (ZONE_NORMAL << ___GFP_MOVABLE * ZONES_SHIFT) | (OPT_ZONE_DMA << (___GFP_MOVABLE | ___GFP_DMA) * ZONES_SHIFT) | (ZONE_MOVABLE << (___GFP_MOVABLE | ___GFP_HIGHMEM) * ZONES_SHIFT) | (OPT_ZONE_DMA32 << (___GFP_MOVABLE | ___GFP_DMA32) * ZONES_SHIFT) )
GFP_ZONE_BAD  macro  include/linux/gfp.h  236  #define GFP_ZONE_BAD ( 1 << (___GFP_DMA | ___GFP_HIGHMEM) | 1 << (___GFP_DMA | ___GFP_DMA32) | 1 << (___GFP_DMA32 | ___GFP_HIGHMEM) | 1 << (___GFP_DMA | ___GFP_DMA32 | ___GFP_HIGHMEM) | 1 << (___GFP_MOVABLE | ___GFP_HIGHMEM | ___GFP_DMA) | 1 << (___GFP_MOVABLE | ___GFP_DMA32 | ___GFP_DMA) | 1 << (___GFP_MOVABLE | ___GFP_DMA32 | ___GFP_HIGHMEM) | 1 << (___GFP_MOVABLE | ___GFP_DMA32 | ___GFP_DMA | ___GFP_HIGHMEM) )
gfp_zone  function  include/linux/gfp.h  247  static inline enum zone_type gfp_zone(gfp_t flags)
gfp_zonelist  function  include/linux/gfp.h  265  static inline int gfp_zonelist(gfp_t flags)
node_zonelist  function  include/linux/gfp.h  282  static inline struct zonelist *node_zonelist(int nid,gfp_t flags)
arch_free_page  function  include/linux/gfp.h  288  static inline void arch_free_page(struct page *page,int order) { }
arch_alloc_page  function  include/linux/gfp.h  291  static inline void arch_alloc_page(struct page *page,int order) { }
__alloc_pages_nodemask  prototype  include/linux/gfp.h  295  __alloc_pages_nodemask(gfp_t gfp_mask,unsigned int order,struct zonelist *zonelist, nodemask_t *nodemask);
__alloc_pages  function  include/linux/gfp.h  299  __alloc_pages(gfp_t gfp_mask,unsigned int order,struct zonelist *zonelist)
alloc_pages_node  function  include/linux/gfp.h  305  static inline struct page *alloc_pages_node(int nid,gfp_t gfp_mask,unsigned int order)
alloc_pages_exact_node  function  include/linux/gfp.h  315  static inline struct page *alloc_pages_exact_node(int nid,gfp_t gfp_mask,unsigned int order)
alloc_pages_current  prototype  include/linux/gfp.h  324  extern struct page *alloc_pages_current(gfp_t gfp_mask,unsigned order);
alloc_pages  macro  include/linux/gfp.h  335  #define alloc_pages(gfp_mask,order) alloc_pages_node(numa_node_id(), gfp_mask, order)
alloc_pages_vma  macro  include/linux/gfp.h  337  #define alloc_pages_vma(gfp_mask,order,vma,addr,node) alloc_pages(gfp_mask, order)
alloc_page  macro  include/linux/gfp.h  340  #define alloc_page(gfp_mask) alloc_pages(gfp_mask,0)
alloc_page_vma  macro  include/linux/gfp.h  341  #define alloc_page_vma(gfp_mask,vma,addr) alloc_pages_vma(gfp_mask, 0, vma, addr, numa_node_id())
alloc_page_vma_node  macro  include/linux/gfp.h  343  #define alloc_page_vma_node(gfp_mask,vma,addr,node) alloc_pages_vma(gfp_mask, 0, vma, addr, node)
__get_free_pages  prototype  include/linux/gfp.h  346  extern unsigned long __get_free_pages(gfp_t gfp_mask,unsigned int order);
get_zeroed_page  prototype  include/linux/gfp.h  347  extern unsigned long get_zeroed_page(gfp_t gfp_mask);
alloc_pages_exact  prototype  include/linux/gfp.h  349  void *alloc_pages_exact(size_t size,gfp_t gfp_mask);
free_pages_exact  prototype  include/linux/gfp.h  350  void free_pages_exact(void *virt,size_t size);
alloc_pages_exact_nid  prototype  include/linux/gfp.h  352  void *alloc_pages_exact_nid(int nid,size_t size,gfp_t gfp_mask);
__get_free_page  macro  include/linux/gfp.h  354  #define __get_free_page(gfp_mask) __get_free_pages((gfp_mask), 0)
__get_dma_pages  macro  include/linux/gfp.h  357  #define __get_dma_pages(gfp_mask,order) __get_free_pages((gfp_mask) | GFP_DMA, (order))
__free_pages  prototype  include/linux/gfp.h  360  extern void __free_pages(struct page *page,unsigned int order);
free_pages  prototype  include/linux/gfp.h  361  extern void free_pages(unsigned long addr,unsigned int order);
free_hot_cold_page  prototype  include/linux/gfp.h  362  extern void free_hot_cold_page(struct page *page,int cold);
free_hot_cold_page_list  prototype  include/linux/gfp.h  363  extern void free_hot_cold_page_list(struct list_head *list,int cold);
__free_page  macro  include/linux/gfp.h  365  #define __free_page(page) __free_pages((page),0)
free_page  macro  include/linux/gfp.h  366  #define free_page(addr) free_pages((addr),0)
page_alloc_init  prototype  include/linux/gfp.h  368  void page_alloc_init(void);
drain_zone_pages  prototype  include/linux/gfp.h  369  void drain_zone_pages(struct zone *zone,struct per_cpu_pages *pcp);
drain_all_pages  prototype  include/linux/gfp.h  370  void drain_all_pages(void);
drain_local_pages  prototype  include/linux/gfp.h  371  void drain_local_pages(void *dummy);
pm_restrict_gfp_mask  prototype  include/linux/gfp.h  382  extern void pm_restrict_gfp_mask(void);
pm_restore_gfp_mask  prototype  include/linux/gfp.h  383  extern void pm_restore_gfp_mask(void);
pm_suspended_storage  function  include/linux/gfp.h  388  static inline bool pm_suspended_storage(void)
alloc_contig_range  prototype  include/linux/gfp.h  397  extern int alloc_contig_range(unsigned long start,unsigned long end,unsigned migratetype);
free_contig_range  prototype  include/linux/gfp.h  399  extern void free_contig_range(unsigned long pfn,unsigned nr_pages);
init_cma_reserved_pageblock  prototype  include/linux/gfp.h  402  extern void init_cma_reserved_pageblock(struct page *page);
_LINUX_VIRTIO_IDS_H  macro  include/linux/virtio_ids.h  2  #define _LINUX_VIRTIO_IDS_H
VIRTIO_ID_NET  macro  include/linux/virtio_ids.h  32  #define VIRTIO_ID_NET 1
VIRTIO_ID_BLOCK  macro  include/linux/virtio_ids.h  33  #define VIRTIO_ID_BLOCK 2
VIRTIO_ID_CONSOLE  macro  include/linux/virtio_ids.h  34  #define VIRTIO_ID_CONSOLE 3
VIRTIO_ID_RNG  macro  include/linux/virtio_ids.h  35  #define VIRTIO_ID_RNG 4
VIRTIO_ID_BALLOON  macro  include/linux/virtio_ids.h  36  #define VIRTIO_ID_BALLOON 5
VIRTIO_ID_RPMSG  macro  include/linux/virtio_ids.h  37  #define VIRTIO_ID_RPMSG 7
VIRTIO_ID_SCSI  macro  include/linux/virtio_ids.h  38  #define VIRTIO_ID_SCSI 8
VIRTIO_ID_9P  macro  include/linux/virtio_ids.h  39  #define VIRTIO_ID_9P 9
_LINUX_VIRTIO_CONFIG_H  macro  include/linux/virtio_config.h  2  #define _LINUX_VIRTIO_CONFIG_H
VIRTIO_CONFIG_S_ACKNOWLEDGE  macro  include/linux/virtio_config.h  36  #define VIRTIO_CONFIG_S_ACKNOWLEDGE 1
VIRTIO_CONFIG_S_DRIVER  macro  include/linux/virtio_config.h  38  #define VIRTIO_CONFIG_S_DRIVER 2
VIRTIO_CONFIG_S_DRIVER_OK  macro  include/linux/virtio_config.h  40  #define VIRTIO_CONFIG_S_DRIVER_OK 4
VIRTIO_CONFIG_S_FAILED  macro  include/linux/virtio_config.h  42  #define VIRTIO_CONFIG_S_FAILED 0x80
VIRTIO_TRANSPORT_F_START  macro  include/linux/virtio_config.h  47  #define VIRTIO_TRANSPORT_F_START 28
VIRTIO_TRANSPORT_F_END  macro  include/linux/virtio_config.h  48  #define VIRTIO_TRANSPORT_F_END 32
VIRTIO_F_NOTIFY_ON_EMPTY  macro  include/linux/virtio_config.h  52  #define VIRTIO_F_NOTIFY_ON_EMPTY 24
virtio_config_ops  struct  include/linux/virtio_config.h  103  struct virtio_config_ops { void (*get)(struct virtio_device *vdev, unsigned offset,void *buf, unsigned len); void (*set)(struct virtio_device *vdev, unsigned offset,const void *buf, unsigned len); u8 (*get_status)(struct virtio_device *vdev); void (*set_status)(struct virtio_device *vdev, u8 status); void (*reset)(struct virtio_device *vdev); int (*find_vqs)(struct virtio_device *, unsigned nvqs,struct virtqueue *vqs[],vq_callback_t *callbacks[],const char *names[]); void (*del_vqs)(struct virtio_device *); u32 (*get_features)(struct virtio_device *vdev); void (*finalize_features)(struct virtio_device *vdev); const char *(*bus_name)(struct virtio_device *vdev); };
virtio_check_driver_offered_feature  prototype  include/linux/virtio_config.h  122  void virtio_check_driver_offered_feature(const struct virtio_device *vdev,unsigned int fbit);
virtio_has_feature  function  include/linux/virtio_config.h  130  static inline bool virtio_has_feature(const struct virtio_device *vdev,unsigned int fbit)
virtio_config_val  macro  include/linux/virtio_config.h  154  #define virtio_config_val(vdev,fbit,offset,v) virtio_config_buf((vdev), (fbit), (offset), (v), sizeof(*v))
virtio_config_val_len  macro  include/linux/virtio_config.h  157  #define virtio_config_val_len(vdev,fbit,offset,v,len) virtio_config_buf((vdev), (fbit), (offset), (v), (len))
virtio_config_buf  function  include/linux/virtio_config.h  160  static inline int virtio_config_buf(struct virtio_device *vdev,unsigned int fbit,unsigned int offset,void *buf, unsigned len)
virtio_find_single_vq  function  include/linux/virtio_config.h  173  struct virtqueue *virtio_find_single_vq(struct virtio_device *vdev,vq_callback_t *c, const char *n)
virtio_bus_name  function  include/linux/virtio_config.h  186  const char *virtio_bus_name(struct virtio_device *vdev)
_LINUX_LINKAGE_H  macro  include/linux/linkage.h  2  #define _LINUX_LINKAGE_H
CPP_ASMLINKAGE  macro  include/linux/linkage.h  10  #define CPP_ASMLINKAGE
asmlinkage  macro  arch/x86/include/asm/linkage.h  10  #define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(0)))
__page_aligned_data  macro  include/linux/linkage.h  17  #define __page_aligned_data __section(.data..page_aligned) __aligned(PAGE_SIZE)
__page_aligned_bss  macro  include/linux/linkage.h  18  #define __page_aligned_bss __section(.bss..page_aligned) __aligned(PAGE_SIZE)
__PAGE_ALIGNED_DATA  macro  include/linux/linkage.h  26  #define __PAGE_ALIGNED_DATA .section ".data..page_aligned","aw"
__PAGE_ALIGNED_BSS  macro  include/linux/linkage.h  27  #define __PAGE_ALIGNED_BSS .section ".bss..page_aligned","aw"
asmlinkage_protect  macro  arch/x86/include/asm/linkage.h  23  #define asmlinkage_protect(n,ret,args...) __asmlinkage_protect##n(ret, ##args)
__ALIGN  macro  arch/x86/include/asm/linkage.h  54  #define __ALIGN .p2align 4,0x90
__ALIGN_STR  macro  arch/x86/include/asm/linkage.h  55  #define __ALIGN_STR __stringify(__ALIGN)
ALIGN  macro  include/linux/kernel.h  44  #define ALIGN(x,a) __ALIGN_KERNEL((x),(a))
ALIGN_STR  macro  include/linux/linkage.h  58  #define ALIGN_STR __ALIGN_STR
ENTRY  macro  include/linux/linkage.h  61  #define ENTRY(name) .globl name; ALIGN; name:
WEAK  macro  include/linux/linkage.h  69  #define WEAK(name) .weak name; name:
END  macro  include/linux/linkage.h  75  #define END(name) .size name, .-name
ENDPROC  macro  include/linux/linkage.h  84  #define ENDPROC(name) .type name, @function; END(name)
_LINUX_MMZONE_H  macro  include/linux/mmzone.h  2  #define _LINUX_MMZONE_H
MAX_ORDER  macro  include/linux/mmzone.h  26  #define MAX_ORDER CONFIG_FORCE_MAX_ZONEORDER
MAX_ORDER_NR_PAGES  macro  include/linux/mmzone.h  28  #define MAX_ORDER_NR_PAGES (1 << (MAX_ORDER - 1))
PAGE_ALLOC_COSTLY_ORDER  macro  include/linux/mmzone.h  36  #define PAGE_ALLOC_COSTLY_ORDER 3
is_migrate_cma  macro  include/linux/mmzone.h  68  # define is_migrate_cma(migratetype) false
cma_wmark_pages  macro  include/linux/mmzone.h  69  # define cma_wmark_pages(zone) 0
for_each_migratetype_order  macro  include/linux/mmzone.h  72  #define for_each_migratetype_order(order,type) for (order = 0; order < MAX_ORDER; order++) for (type = 0; type < MIGRATE_TYPES; type++)
get_pageblock_migratetype  function  include/linux/mmzone.h  78  static inline int get_pageblock_migratetype(struct page *page)
free_area  struct  include/linux/mmzone.h  83  struct free_area { struct list_head free_list[MIGRATE_TYPES]; unsigned long nr_free; };
zone_padding  struct  include/linux/mmzone.h  97  struct zone_padding { char x[0]; } ____cacheline_internodealigned_in_smp;
ZONE_PADDING  macro  include/linux/mmzone.h  102  #define ZONE_PADDING(name)
zone_stat_item  enum  include/linux/mmzone.h  105  enum zone_stat_item { NR_FREE_PAGES, NR_LRU_BASE, NR_INACTIVE_ANON = NR_LRU_BASE, NR_ACTIVE_ANON, NR_INACTIVE_FILE, NR_ACTIVE_FILE, NR_UNEVICTABLE, NR_MLOCK, NR_ANON_PAGES, NR_FILE_MAPPED, NR_FILE_PAGES, NR_FILE_DIRTY, NR_WRITEBACK, NR_SLAB_RECLAIMABLE, NR_SLAB_UNRECLAIMABLE, NR_PAGETABLE, NR_KERNEL_STACK, NR_UNSTABLE_NFS, NR_BOUNCE, NR_VMSCAN_WRITE, NR_VMSCAN_IMMEDIATE, NR_WRITEBACK_TEMP, NR_ISOLATED_ANON, NR_ISOLATED_FILE, NR_SHMEM, NR_DIRTIED, NR_WRITTEN, NUMA_HIT, NUMA_MISS, NUMA_FOREIGN, NUMA_INTERLEAVE_HIT, NUMA_LOCAL, NUMA_OTHER, NR_ANON_TRANSPARENT_HUGEPAGES, NR_VM_ZONE_STAT_ITEMS };
LRU_BASE  macro  include/linux/mmzone.h  156  #define LRU_BASE 0
LRU_ACTIVE  macro  include/linux/mmzone.h  157  #define LRU_ACTIVE 1
LRU_FILE  macro  include/linux/mmzone.h  158  #define LRU_FILE 2
lru_list  enum  include/linux/mmzone.h  160  enum lru_list { LRU_INACTIVE_ANON = LRU_BASE, LRU_ACTIVE_ANON = LRU_BASE + LRU_ACTIVE, LRU_INACTIVE_FILE = LRU_BASE + LRU_FILE, LRU_ACTIVE_FILE = LRU_BASE + LRU_FILE + LRU_ACTIVE, LRU_UNEVICTABLE, NR_LRU_LISTS };
for_each_lru  macro  include/linux/mmzone.h  169  #define for_each_lru(lru) for (lru = 0; lru < NR_LRU_LISTS; lru++)
for_each_evictable_lru  macro  include/linux/mmzone.h  171  #define for_each_evictable_lru(lru) for (lru = 0; lru <= LRU_ACTIVE_FILE; lru++)
is_file_lru  function  include/linux/mmzone.h  173  static inline int is_file_lru(enum lru_list lru)
is_active_lru  function  include/linux/mmzone.h  178  static inline int is_active_lru(enum lru_list lru)
is_unevictable_lru  function  include/linux/mmzone.h  183  static inline int is_unevictable_lru(enum lru_list lru)
zone_reclaim_stat  struct  include/linux/mmzone.h  188  struct zone_reclaim_stat { unsigned long recent_rotated[2]; unsigned long recent_scanned[2]; };
lruvec  struct  include/linux/mmzone.h  201  struct lruvec { struct list_head lists[NR_LRU_LISTS]; struct zone_reclaim_stat reclaim_stat; struct zone *zone; };
LRU_ALL_FILE  macro  include/linux/mmzone.h  210  #define LRU_ALL_FILE (BIT(LRU_INACTIVE_FILE) | BIT(LRU_ACTIVE_FILE))
LRU_ALL_ANON  macro  include/linux/mmzone.h  211  #define LRU_ALL_ANON (BIT(LRU_INACTIVE_ANON) | BIT(LRU_ACTIVE_ANON))
LRU_ALL_EVICTABLE  macro  include/linux/mmzone.h  212  #define LRU_ALL_EVICTABLE (LRU_ALL_FILE | LRU_ALL_ANON)
LRU_ALL  macro  include/linux/mmzone.h  213  #define LRU_ALL ((1 << NR_LRU_LISTS) - 1)
ISOLATE_CLEAN  macro  include/linux/mmzone.h  216  #define ISOLATE_CLEAN ((__force isolate_mode_t)0x1)
ISOLATE_UNMAPPED  macro  include/linux/mmzone.h  218  #define ISOLATE_UNMAPPED ((__force isolate_mode_t)0x2)
ISOLATE_ASYNC_MIGRATE  macro  include/linux/mmzone.h  220  #define ISOLATE_ASYNC_MIGRATE ((__force isolate_mode_t)0x4)
zone_watermarks  enum  include/linux/mmzone.h  225  enum zone_watermarks { WMARK_MIN, WMARK_LOW, WMARK_HIGH, NR_WMARK };
min_wmark_pages  macro  include/linux/mmzone.h  232  #define min_wmark_pages(z) (z->watermark[WMARK_MIN])
low_wmark_pages  macro  include/linux/mmzone.h  233  #define low_wmark_pages(z) (z->watermark[WMARK_LOW])
high_wmark_pages  macro  include/linux/mmzone.h  234  #define high_wmark_pages(z) (z->watermark[WMARK_HIGH])
per_cpu_pages  struct  include/linux/mmzone.h  236  struct per_cpu_pages { int count; int high; int batch; struct list_head lists[MIGRATE_PCPTYPES]; };
per_cpu_pageset  struct  include/linux/mmzone.h  245  struct per_cpu_pageset { struct per_cpu_pages pcp; s8 expire; s8 stat_threshold; s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS]; };
zone_type  enum  include/linux/mmzone.h  258  enum zone_type { ZONE_DMA, ZONE_DMA32, ZONE_NORMAL, ZONE_HIGHMEM, ZONE_MOVABLE, __MAX_NR_ZONES };
ZONES_SHIFT  macro  include/linux/mmzone.h  324  #define ZONES_SHIFT 2
zone  struct  include/linux/mmzone.h  329  struct zone { unsigned long watermark[NR_WMARK]; unsigned long percpu_drift_mark; unsigned long lowmem_reserve[MAX_NR_ZONES]; unsigned long dirty_balance_reserve; int node; unsigned long min_unmapped_pages; unsigned long min_slab_pages; struct per_cpu_pageset __percpu *pageset; spinlock_t lock; int all_unreclaimable; seqlock_t span_seqlock; unsigned long min_cma_pages; struct free_area free_area[MAX_ORDER]; unsigned long *pageblock_flags; unsigned int compact_considered; unsigned int compact_defer_shift; int compact_order_failed; spinlock_t lru_lock; struct lruvec lruvec; unsigned long pages_scanned; unsigned long flags; atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS]; unsigned int inactive_ratio; wait_queue_head_t * wait_table; unsigned long wait_table_hash_nr_entries; unsigned long wait_table_bits; struct pglist_data *zone_pgdat; unsigned long zone_start_pfn; unsigned long spanned_pages; unsigned long present_pages; const char *name; } ____cacheline_internodealigned_in_smp;
zone_flags_t  enum  include/linux/mmzone.h  480  typedef enum { ZONE_RECLAIM_LOCKED, ZONE_OOM_LOCKED, ZONE_CONGESTED, } zone_flags_t;
zone_set_flag  function  include/linux/mmzone.h  488  static inline void zone_set_flag(struct zone *zone,zone_flags_t flag)
zone_test_and_set_flag  function  include/linux/mmzone.h  493  static inline int zone_test_and_set_flag(struct zone *zone,zone_flags_t flag)
zone_clear_flag  function  include/linux/mmzone.h  498  static inline void zone_clear_flag(struct zone *zone,zone_flags_t flag)
zone_is_reclaim_congested  function  include/linux/mmzone.h  503  static inline int zone_is_reclaim_congested(const struct zone *zone)
zone_is_reclaim_locked  function  include/linux/mmzone.h  508  static inline int zone_is_reclaim_locked(const struct zone *zone)
zone_is_oom_locked  function  include/linux/mmzone.h  513  static inline int zone_is_oom_locked(const struct zone *zone)
DEF_PRIORITY  macro  include/linux/mmzone.h  523  #define DEF_PRIORITY 12
MAX_ZONES_PER_ZONELIST  macro  include/linux/mmzone.h  526  #define MAX_ZONES_PER_ZONELIST (MAX_NUMNODES * MAX_NR_ZONES)
MAX_ZONELISTS  macro  include/linux/mmzone.h  605  #define MAX_ZONELISTS 1
zonelist_cache  struct  include/linux/mmzone.h  599  struct zonelist_cache { unsigned short z_to_n[MAX_ZONES_PER_ZONELIST]; DECLARE_BITMAP(fullzones, MAX_ZONES_PER_ZONELIST); unsigned long last_full_zap; };
zoneref  struct  include/linux/mmzone.h  613  struct zoneref { struct zone *zone; int zone_idx; };
zonelist  struct  include/linux/mmzone.h  635  struct zonelist { struct zonelist_cache *zlcache_ptr; // NULL or &zlcache struct zoneref _zonerefs[MAX_ZONES_PER_ZONELIST + 1]; struct zonelist_cache zlcache; // optional ... };
node_active_region  struct  include/linux/mmzone.h  644  struct node_active_region { unsigned long start_pfn; unsigned long end_pfn; int nid; };
pglist_data  struct  include/linux/mmzone.h  668  typedef struct pglist_data { struct zone node_zones[MAX_NR_ZONES]; struct zonelist node_zonelists[MAX_ZONELISTS]; int nr_zones; struct page *node_mem_map; struct page_cgroup *node_page_cgroup; struct bootmem_data *bdata; spinlock_t node_size_lock; unsigned long node_start_pfn; unsigned long node_present_pages; unsigned long node_spanned_pages; int node_id; wait_queue_head_t kswapd_wait; struct task_struct *kswapd; int kswapd_max_order; enum zone_type classzone_idx; } pg_data_t;
pg_data_t  struct  include/linux/mmzone.h  668  typedef struct pglist_data { struct zone node_zones[MAX_NR_ZONES]; struct zonelist node_zonelists[MAX_ZONELISTS]; int nr_zones; struct page *node_mem_map; struct page_cgroup *node_page_cgroup; struct bootmem_data *bdata; spinlock_t node_size_lock; unsigned long node_start_pfn; unsigned long node_present_pages; unsigned long node_spanned_pages; int node_id; wait_queue_head_t kswapd_wait; struct task_struct *kswapd; int kswapd_max_order; enum zone_type classzone_idx; } pg_data_t;
node_present_pages  macro  include/linux/mmzone.h  702  #define node_present_pages(nid) (NODE_DATA(nid)->node_present_pages)
node_spanned_pages  macro  include/linux/mmzone.h  703  #define node_spanned_pages(nid) (NODE_DATA(nid)->node_spanned_pages)
pgdat_page_nr  macro  include/linux/mmzone.h  707  #define pgdat_page_nr(pgdat,pagenr) pfn_to_page((pgdat)->node_start_pfn + (pagenr))
nid_page_nr  macro  include/linux/mmzone.h  709  #define nid_page_nr(nid,pagenr) pgdat_page_nr(NODE_DATA(nid),(pagenr))
node_start_pfn  macro  include/linux/mmzone.h  711  #define node_start_pfn(nid) (NODE_DATA(nid)->node_start_pfn)
node_end_pfn  macro  include/linux/mmzone.h  713  #define node_end_pfn(nid) ({ pg_data_t *__pgdat = NODE_DATA(nid); __pgdat->node_start_pfn + __pgdat->node_spanned_pages; })
build_all_zonelists  prototype  include/linux/mmzone.h  721  void build_all_zonelists(void *data);
wakeup_kswapd  prototype  include/linux/mmzone.h  722  void wakeup_kswapd(struct zone *zone,int order,enum zone_type classzone_idx);
zone_watermark_ok  prototype  include/linux/mmzone.h  723  bool zone_watermark_ok(struct zone *z,int order,unsigned long mark,int classzone_idx, int alloc_flags);
zone_watermark_ok_safe  prototype  include/linux/mmzone.h  725  bool zone_watermark_ok_safe(struct zone *z,int order,unsigned long mark,int classzone_idx, int alloc_flags);
memmap_context  enum  include/linux/mmzone.h  727  enum memmap_context { MEMMAP_EARLY, MEMMAP_HOTPLUG, };
init_currently_empty_zone  prototype  include/linux/mmzone.h  731  extern int init_currently_empty_zone(struct zone *zone,unsigned long start_pfn,unsigned long size,enum memmap_context context);
lruvec_init  prototype  include/linux/mmzone.h  735  extern void lruvec_init(struct lruvec *lruvec,struct zone *zone);
lruvec_zone  function  include/linux/mmzone.h  737  static inline struct zone *lruvec_zone(struct lruvec *lruvec)
memory_present  prototype  include/linux/mmzone.h  1181  void memory_present(int nid,unsigned long start,unsigned long end);
local_memory_node  function  include/linux/mmzone.h  755  static inline int local_memory_node(int node_id) { return node_id; };
node_memmap_size_bytes  prototype  include/linux/mmzone.h  1182  unsigned long __init node_memmap_size_bytes(int,unsigned long,unsigned long);
zone_idx  macro  include/linux/mmzone.h  765  #define zone_idx(zone) ((zone) - (zone)->zone_pgdat->node_zones)
populated_zone  function  include/linux/mmzone.h  767  static inline int populated_zone(struct zone *zone)
zone_movable_is_highmem  function  include/linux/mmzone.h  774  static inline int zone_movable_is_highmem(void)
is_highmem_idx  function  include/linux/mmzone.h  783  static inline int is_highmem_idx(enum zone_type idx)
is_normal_idx  function  include/linux/mmzone.h  793  static inline int is_normal_idx(enum zone_type idx)
is_highmem  function  include/linux/mmzone.h  804  static inline int is_highmem(struct zone *zone)
is_normal  function  include/linux/mmzone.h  816  static inline int is_normal(struct zone *zone)
is_dma32  function  include/linux/mmzone.h  821  static inline int is_dma32(struct zone *zone)
is_dma  function  include/linux/mmzone.h  830  static inline int is_dma(struct zone *zone)
min_free_kbytes_sysctl_handler  prototype  include/linux/mmzone.h  841  int min_free_kbytes_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
lowmem_reserve_ratio_sysctl_handler  prototype  include/linux/mmzone.h  844  int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
percpu_pagelist_fraction_sysctl_handler  prototype  include/linux/mmzone.h  846  int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
sysctl_min_unmapped_ratio_sysctl_handler  prototype  include/linux/mmzone.h  848  int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
sysctl_min_slab_ratio_sysctl_handler  prototype  include/linux/mmzone.h  850  int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
numa_zonelist_order_handler  prototype  include/linux/mmzone.h  853  extern int numa_zonelist_order_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
NUMA_ZONELIST_ORDER_LEN  macro  include/linux/mmzone.h  856  #define NUMA_ZONELIST_ORDER_LEN 16
NODE_DATA  macro  include/linux/mmzone.h  861  #define NODE_DATA(nid) (&contig_page_data)
NODE_MEM_MAP  macro  include/linux/mmzone.h  862  #define NODE_MEM_MAP(nid) mem_map
first_online_pgdat  prototype  include/linux/mmzone.h  870  extern struct pglist_data *first_online_pgdat(void);
next_online_pgdat  prototype  include/linux/mmzone.h  871  extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
next_zone  prototype  include/linux/mmzone.h  872  extern struct zone *next_zone(struct zone *zone);
for_each_online_pgdat  macro  include/linux/mmzone.h  878  #define for_each_online_pgdat(pgdat) for (pgdat = first_online_pgdat(); pgdat; pgdat = next_online_pgdat(pgdat))
for_each_zone  macro  include/linux/mmzone.h  889  #define for_each_zone(zone) for (zone = (first_online_pgdat())->node_zones; zone; zone = next_zone(zone))
for_each_populated_zone  macro  include/linux/mmzone.h  894  #define for_each_populated_zone(zone) for (zone = (first_online_pgdat())->node_zones; zone; zone = next_zone(zone)) if (!populated_zone(zone)) ; /* do nothing */ else
zonelist_zone  function  include/linux/mmzone.h  902  static inline struct zone *zonelist_zone(struct zoneref *zoneref)
zonelist_zone_idx  function  include/linux/mmzone.h  907  static inline int zonelist_zone_idx(struct zoneref *zoneref)
zonelist_node_idx  function  include/linux/mmzone.h  912  static inline int zonelist_node_idx(struct zoneref *zoneref)
next_zones_zonelist  prototype  include/linux/mmzone.h  935  struct zoneref *next_zones_zonelist(struct zoneref *z,enum zone_type highest_zoneidx,nodemask_t *nodes,struct zone **zone);
first_zones_zonelist  function  include/linux/mmzone.h  952  static inline struct zoneref *first_zones_zonelist(struct zonelist *zonelist,enum zone_type highest_zoneidx,nodemask_t *nodes,struct zone **zone)
for_each_zone_zonelist_nodemask  macro  include/linux/mmzone.h  972  #define for_each_zone_zonelist_nodemask(zone,z,zlist,highidx,nodemask) for (z = first_zones_zonelist(zlist, highidx, nodemask, &zone); zone; z = next_zones_zonelist(++z, highidx, nodemask, &zone)) 
for_each_zone_zonelist  macro  include/linux/mmzone.h  986  #define for_each_zone_zonelist(zone,z,zlist,highidx) for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, NULL)
early_pfn_to_nid  prototype  include/linux/mm.h  1309  extern int __meminit early_pfn_to_nid(unsigned long pfn);
pfn_to_nid  macro  include/linux/mmzone.h  1161  #define pfn_to_nid(pfn) (0)
SECTIONS_SHIFT  macro  include/linux/mmzone.h  1013  #define SECTIONS_SHIFT (MAX_PHYSMEM_BITS - SECTION_SIZE_BITS)
PA_SECTION_SHIFT  macro  include/linux/mmzone.h  1015  #define PA_SECTION_SHIFT (SECTION_SIZE_BITS)
PFN_SECTION_SHIFT  macro  include/linux/mmzone.h  1016  #define PFN_SECTION_SHIFT (SECTION_SIZE_BITS - PAGE_SHIFT)
NR_MEM_SECTIONS  macro  include/linux/mmzone.h  1018  #define NR_MEM_SECTIONS (1UL << SECTIONS_SHIFT)
PAGES_PER_SECTION  macro  include/linux/mmzone.h  1020  #define PAGES_PER_SECTION (1UL << PFN_SECTION_SHIFT)
PAGE_SECTION_MASK  macro  include/linux/mmzone.h  1021  #define PAGE_SECTION_MASK (~(PAGES_PER_SECTION-1))
SECTION_BLOCKFLAGS_BITS  macro  include/linux/mmzone.h  1023  #define SECTION_BLOCKFLAGS_BITS ((1UL << (PFN_SECTION_SHIFT - pageblock_order)) * NR_PAGEBLOCK_BITS)
pfn_to_section_nr  macro  include/linux/mmzone.h  1030  #define pfn_to_section_nr(pfn) ((pfn) >> PFN_SECTION_SHIFT)
section_nr_to_pfn  macro  include/linux/mmzone.h  1031  #define section_nr_to_pfn(sec) ((sec) << PFN_SECTION_SHIFT)
SECTION_ALIGN_UP  macro  include/linux/mmzone.h  1033  #define SECTION_ALIGN_UP(pfn) (((pfn) + PAGES_PER_SECTION - 1) & PAGE_SECTION_MASK)
SECTION_ALIGN_DOWN  macro  include/linux/mmzone.h  1034  #define SECTION_ALIGN_DOWN(pfn) ((pfn) & PAGE_SECTION_MASK)
mem_section  struct  include/linux/mmzone.h  1038  struct mem_section { unsigned long section_mem_map; unsigned long *pageblock_flags; struct page_cgroup *page_cgroup; unsigned long pad; };
SECTIONS_PER_ROOT  macro  include/linux/mmzone.h  1068  #define SECTIONS_PER_ROOT 1
SECTION_NR_TO_ROOT  macro  include/linux/mmzone.h  1071  #define SECTION_NR_TO_ROOT(sec) ((sec) / SECTIONS_PER_ROOT)
NR_SECTION_ROOTS  macro  include/linux/mmzone.h  1072  #define NR_SECTION_ROOTS DIV_ROUND_UP(NR_MEM_SECTIONS,SECTIONS_PER_ROOT)
SECTION_ROOT_MASK  macro  include/linux/mmzone.h  1073  #define SECTION_ROOT_MASK (SECTIONS_PER_ROOT - 1)
__nr_to_section  function  include/linux/mmzone.h  1081  static inline struct mem_section *__nr_to_section(unsigned long nr)
__section_nr  prototype  include/linux/mmzone.h  1087  extern int __section_nr(struct mem_section* ms);
usemap_size  prototype  include/linux/mmzone.h  1088  extern unsigned long usemap_size(void);
SECTION_MARKED_PRESENT  macro  include/linux/mmzone.h  1095  #define SECTION_MARKED_PRESENT (1UL<<0)
SECTION_HAS_MEM_MAP  macro  include/linux/mmzone.h  1096  #define SECTION_HAS_MEM_MAP (1UL<<1)
SECTION_MAP_LAST_BIT  macro  include/linux/mmzone.h  1097  #define SECTION_MAP_LAST_BIT (1UL<<2)
SECTION_MAP_MASK  macro  include/linux/mmzone.h  1098  #define SECTION_MAP_MASK (~(SECTION_MAP_LAST_BIT-1))
SECTION_NID_SHIFT  macro  include/linux/mmzone.h  1099  #define SECTION_NID_SHIFT 2
__section_mem_map_addr  function  include/linux/mmzone.h  1101  static inline struct page *__section_mem_map_addr(struct mem_section *section)
present_section  function  include/linux/mmzone.h  1108  static inline int present_section(struct mem_section *section)
present_section_nr  function  include/linux/mmzone.h  1113  static inline int present_section_nr(unsigned long nr)
valid_section  function  include/linux/mmzone.h  1118  static inline int valid_section(struct mem_section *section)
valid_section_nr  function  include/linux/mmzone.h  1123  static inline int valid_section_nr(unsigned long nr)
__pfn_to_section  function  include/linux/mmzone.h  1128  static inline struct mem_section *__pfn_to_section(unsigned long pfn)
pfn_valid  macro  arch/x86/include/asm/page_32.h  21  #define pfn_valid(pfn) ((pfn) < max_mapnr)
pfn_present  function  include/linux/mmzone.h  1142  static inline int pfn_present(unsigned long pfn)
early_pfn_valid  macro  include/linux/mmzone.h  1178  #define early_pfn_valid(pfn) (1)
sparse_init  macro  include/linux/mmzone.h  1167  #define sparse_init() do {} while (0)
sparse_index_init  macro  include/linux/mmzone.h  1168  #define sparse_index_init(_sec,_nid) do {} while (0)
early_pfn_in_nid  macro  include/linux/mmzone.h  1174  #define early_pfn_in_nid(pfn,nid) (1)
pfn_valid_within  macro  include/linux/mmzone.h  1193  #define pfn_valid_within(pfn) (1)
memmap_valid_within  function  include/linux/mmzone.h  1215  static inline int memmap_valid_within(unsigned long pfn,struct page *page, struct zone *zone)
_LINUX_LIST_H  macro  include/linux/list.h  2  #define _LINUX_LIST_H
LIST_HEAD_INIT  macro  include/linux/list.h  19  #define LIST_HEAD_INIT(name) { &(name),&(name) }
LIST_HEAD  macro  include/linux/list.h  21  #define LIST_HEAD(name) struct list_head name = LIST_HEAD_INIT(name)
INIT_LIST_HEAD  function  include/linux/list.h  24  static inline void INIT_LIST_HEAD(struct list_head *list)
__list_add  prototype  include/linux/list.h  47  extern void __list_add(struct list_head *new,struct list_head *prev,struct list_head *next);
list_add  function  include/linux/list.h  60  static inline void list_add(struct list_head *new,struct list_head *head)
list_add_tail  function  include/linux/list.h  74  static inline void list_add_tail(struct list_head *new,struct list_head *head)
__list_del  function  include/linux/list.h  86  static inline void __list_del(struct list_head * prev,struct list_head * next)
__list_del_entry  prototype  include/linux/list.h  111  extern void __list_del_entry(struct list_head *entry);
list_del  prototype  include/linux/list.h  112  extern void list_del(struct list_head *entry);
list_replace  function  include/linux/list.h  122  static inline void list_replace(struct list_head *old,struct list_head *new)
list_replace_init  function  include/linux/list.h  131  static inline void list_replace_init(struct list_head *old,struct list_head *new)
list_del_init  function  include/linux/list.h  142  static inline void list_del_init(struct list_head *entry)
list_move  function  include/linux/list.h  153  static inline void list_move(struct list_head *list,struct list_head *head)
list_move_tail  function  include/linux/list.h  164  static inline void list_move_tail(struct list_head *list,struct list_head *head)
list_is_last  function  include/linux/list.h  176  static inline int list_is_last(const struct list_head *list,const struct list_head *head)
list_empty  function  include/linux/list.h  186  static inline int list_empty(const struct list_head *head)
list_empty_careful  function  include/linux/list.h  204  static inline int list_empty_careful(const struct list_head *head)
list_rotate_left  function  include/linux/list.h  214  static inline void list_rotate_left(struct list_head *head)
list_is_singular  function  include/linux/list.h  228  static inline int list_is_singular(const struct list_head *head)
__list_cut_position  function  include/linux/list.h  233  static inline void __list_cut_position(struct list_head *list,struct list_head *head, struct list_head *entry)
list_cut_position  function  include/linux/list.h  259  static inline void list_cut_position(struct list_head *list,struct list_head *head, struct list_head *entry)
__list_splice  function  include/linux/list.h  273  static inline void __list_splice(const struct list_head *list,struct list_head *prev,struct list_head *next)
list_splice  function  include/linux/list.h  292  static inline void list_splice(const struct list_head *list,struct list_head *head)
list_splice_tail  function  include/linux/list.h  304  static inline void list_splice_tail(struct list_head *list,struct list_head *head)
list_splice_init  function  include/linux/list.h  318  static inline void list_splice_init(struct list_head *list,struct list_head *head)
list_splice_tail_init  function  include/linux/list.h  335  static inline void list_splice_tail_init(struct list_head *list,struct list_head *head)
list_entry  macro  include/linux/list.h  350  #define list_entry(ptr,type,member) container_of(ptr, type, member)
list_first_entry  macro  include/linux/list.h  361  #define list_first_entry(ptr,type,member) list_entry((ptr)->next, type, member)
list_for_each  macro  include/linux/list.h  369  #define list_for_each(pos,head) for (pos = (head)->next; pos != (head); pos = pos->next)
__list_for_each  macro  include/linux/list.h  380  #define __list_for_each(pos,head) for (pos = (head)->next; pos != (head); pos = pos->next)
list_for_each_prev  macro  include/linux/list.h  388  #define list_for_each_prev(pos,head) for (pos = (head)->prev; pos != (head); pos = pos->prev)
list_for_each_safe  macro  include/linux/list.h  397  #define list_for_each_safe(pos,n,head) for (pos = (head)->next, n = pos->next; pos != (head); pos = n, n = pos->next)
list_for_each_prev_safe  macro  include/linux/list.h  407  #define list_for_each_prev_safe(pos,n,head) for (pos = (head)->prev, n = pos->prev; pos != (head); pos = n, n = pos->prev)
list_for_each_entry  macro  include/linux/list.h  418  #define list_for_each_entry(pos,head,member) for (pos = list_entry((head)->next, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.next, typeof(*pos), member))
list_for_each_entry_reverse  macro  include/linux/list.h  429  #define list_for_each_entry_reverse(pos,head,member) for (pos = list_entry((head)->prev, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.prev, typeof(*pos), member))
list_prepare_entry  macro  include/linux/list.h  442  #define list_prepare_entry(pos,head,member) ((pos) ? : list_entry(head, typeof(*pos), member))
list_for_each_entry_continue  macro  include/linux/list.h  454  #define list_for_each_entry_continue(pos,head,member) for (pos = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.next, typeof(*pos), member))
list_for_each_entry_continue_reverse  macro  include/linux/list.h  468  #define list_for_each_entry_continue_reverse(pos,head,member) for (pos = list_entry(pos->member.prev, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.prev, typeof(*pos), member))
list_for_each_entry_from  macro  include/linux/list.h  481  #define list_for_each_entry_from(pos,head,member) for (; &pos->member != (head); pos = list_entry(pos->member.next, typeof(*pos), member))
list_for_each_entry_safe  macro  include/linux/list.h  492  #define list_for_each_entry_safe(pos,n,head,member) for (pos = list_entry((head)->next, typeof(*pos), member), n = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.next, typeof(*n), member))
list_for_each_entry_safe_continue  macro  include/linux/list.h  508  #define list_for_each_entry_safe_continue(pos,n,head,member) for (pos = list_entry(pos->member.next, typeof(*pos), member), n = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.next, typeof(*n), member))
list_for_each_entry_safe_from  macro  include/linux/list.h  524  #define list_for_each_entry_safe_from(pos,n,head,member) for (n = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.next, typeof(*n), member))
list_for_each_entry_safe_reverse  macro  include/linux/list.h  539  #define list_for_each_entry_safe_reverse(pos,n,head,member) for (pos = list_entry((head)->prev, typeof(*pos), member), n = list_entry(pos->member.prev, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.prev, typeof(*n), member))
list_safe_reset_next  macro  include/linux/list.h  557  #define list_safe_reset_next(pos,n,member) n = list_entry(pos->member.next, typeof(*pos), member)
HLIST_HEAD_INIT  macro  include/linux/list.h  567  #define HLIST_HEAD_INIT { .first = NULL }
HLIST_HEAD  macro  include/linux/list.h  568  #define HLIST_HEAD(name) struct hlist_head name = { .first = NULL }
INIT_HLIST_HEAD  macro  include/linux/list.h  569  #define INIT_HLIST_HEAD(ptr) ((ptr)->first = NULL)
INIT_HLIST_NODE  function  include/linux/list.h  570  static inline void INIT_HLIST_NODE(struct hlist_node *h)
hlist_unhashed  function  include/linux/list.h  576  static inline int hlist_unhashed(const struct hlist_node *h)
hlist_empty  function  include/linux/list.h  581  static inline int hlist_empty(const struct hlist_head *h)
__hlist_del  function  include/linux/list.h  586  static inline void __hlist_del(struct hlist_node *n)
hlist_del  function  include/linux/list.h  595  static inline void hlist_del(struct hlist_node *n)
hlist_del_init  function  include/linux/list.h  602  static inline void hlist_del_init(struct hlist_node *n)
hlist_add_head  function  include/linux/list.h  610  static inline void hlist_add_head(struct hlist_node *n,struct hlist_head *h)
hlist_add_before  function  include/linux/list.h  621  static inline void hlist_add_before(struct hlist_node *n,struct hlist_node *next)
hlist_add_after  function  include/linux/list.h  630  static inline void hlist_add_after(struct hlist_node *n,struct hlist_node *next)
hlist_add_fake  function  include/linux/list.h  642  static inline void hlist_add_fake(struct hlist_node *n)
hlist_move_list  function  include/linux/list.h  651  static inline void hlist_move_list(struct hlist_head *old,struct hlist_head *new)
hlist_entry  macro  include/linux/list.h  660  #define hlist_entry(ptr,type,member) container_of(ptr,type,member)
hlist_for_each  macro  include/linux/list.h  662  #define hlist_for_each(pos,head) for (pos = (head)->first; pos ; pos = pos->next)
hlist_for_each_safe  macro  include/linux/list.h  665  #define hlist_for_each_safe(pos,n,head) for (pos = (head)->first; pos && ({ n = pos->next; 1; }); pos = n)
hlist_for_each_entry  macro  include/linux/list.h  676  #define hlist_for_each_entry(tpos,pos,head,member) for (pos = (head)->first; pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = pos->next)
hlist_for_each_entry_continue  macro  include/linux/list.h  688  #define hlist_for_each_entry_continue(tpos,pos,member) for (pos = (pos)->next; pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = pos->next)
hlist_for_each_entry_from  macro  include/linux/list.h  700  #define hlist_for_each_entry_from(tpos,pos,member) for (; pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = pos->next)
hlist_for_each_entry_safe  macro  include/linux/list.h  713  #define hlist_for_each_entry_safe(tpos,pos,n,head,member) for (pos = (head)->first; pos && ({ n = pos->next; 1; }) && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = n)
_LINUX_MEMCONTROL_H  macro  include/linux/memcontrol.h  21  #define _LINUX_MEMCONTROL_H
mem_cgroup_page_stat_item  enum  include/linux/memcontrol.h  31  enum mem_cgroup_page_stat_item { MEMCG_NR_FILE_MAPPED, };
mem_cgroup_reclaim_cookie  struct  include/linux/memcontrol.h  35  struct mem_cgroup_reclaim_cookie { struct zone *zone; int priority; unsigned int generation; };
mem_cgroup_newpage_charge  function  include/linux/memcontrol.h  199  static inline int mem_cgroup_newpage_charge(struct page *page,struct mm_struct *mm, gfp_t gfp_mask)
mem_cgroup_try_charge_swapin  function  include/linux/memcontrol.h  211  static inline int mem_cgroup_try_charge_swapin(struct mm_struct *mm,struct page *page, gfp_t gfp_mask, struct mem_cgroup **memcgp)
mem_cgroup_commit_charge_swapin  function  include/linux/memcontrol.h  217  static inline void mem_cgroup_commit_charge_swapin(struct page *page,struct mem_cgroup *memcg)
mem_cgroup_cancel_charge_swapin  function  include/linux/memcontrol.h  222  static inline void mem_cgroup_cancel_charge_swapin(struct mem_cgroup *memcg)
mem_cgroup_cache_charge  function  include/linux/memcontrol.h  205  static inline int mem_cgroup_cache_charge(struct page *page,struct mm_struct *mm, gfp_t gfp_mask)
mem_cgroup_zone_lruvec  function  include/linux/memcontrol.h  242  static inline struct lruvec *mem_cgroup_zone_lruvec(struct zone *zone,struct mem_cgroup *memcg)
mem_cgroup_page_lruvec  function  include/linux/memcontrol.h  248  static inline struct lruvec *mem_cgroup_page_lruvec(struct page *page,struct zone *zone)
mem_cgroup_uncharge_start  function  include/linux/memcontrol.h  226  static inline void mem_cgroup_uncharge_start(void)
mem_cgroup_uncharge_end  function  include/linux/memcontrol.h  230  static inline void mem_cgroup_uncharge_end(void)
mem_cgroup_uncharge_page  function  include/linux/memcontrol.h  234  static inline void mem_cgroup_uncharge_page(struct page *page)
mem_cgroup_uncharge_cache_page  function  include/linux/memcontrol.h  238  static inline void mem_cgroup_uncharge_cache_page(struct page *page)
mem_cgroup_out_of_memory  prototype  include/linux/memcontrol.h  75  extern void mem_cgroup_out_of_memory(struct mem_cgroup *memcg,gfp_t gfp_mask,int order);
__mem_cgroup_same_or_subtree  prototype  include/linux/memcontrol.h  77  bool __mem_cgroup_same_or_subtree(const struct mem_cgroup *root_memcg,struct mem_cgroup *memcg);
task_in_mem_cgroup  function  include/linux/memcontrol.h  270  static inline int task_in_mem_cgroup(struct task_struct *task,const struct mem_cgroup *memcg)
try_get_mem_cgroup_from_page  function  include/linux/memcontrol.h  254  static inline struct mem_cgroup *try_get_mem_cgroup_from_page(struct page *page)
mem_cgroup_from_task  prototype  include/linux/memcontrol.h  82  extern struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p);
try_get_mem_cgroup_from_mm  function  include/linux/memcontrol.h  259  static inline struct mem_cgroup *try_get_mem_cgroup_from_mm(struct mm_struct *mm)
parent_mem_cgroup  prototype  include/linux/memcontrol.h  85  extern struct mem_cgroup *parent_mem_cgroup(struct mem_cgroup *memcg);
mem_cgroup_from_cont  prototype  include/linux/memcontrol.h  86  extern struct mem_cgroup *mem_cgroup_from_cont(struct cgroup *cont);
mm_match_cgroup  function  include/linux/memcontrol.h  264  static inline int mm_match_cgroup(struct mm_struct *mm,struct mem_cgroup *memcg)
mem_cgroup_css  function  include/linux/memcontrol.h  277  *mem_cgroup_css(struct mem_cgroup *memcg)
mem_cgroup_prepare_migration  function  include/linux/memcontrol.h  283  mem_cgroup_prepare_migration(struct page *page,struct page *newpage,struct mem_cgroup **memcgp, gfp_t gfp_mask)
mem_cgroup_end_migration  function  include/linux/memcontrol.h  289  static inline void mem_cgroup_end_migration(struct mem_cgroup *memcg,struct page *oldpage, struct page *newpage, bool migration_ok)
mem_cgroup_iter  function  include/linux/memcontrol.h  295  mem_cgroup_iter(struct mem_cgroup *root,struct mem_cgroup *prev,struct mem_cgroup_reclaim_cookie *reclaim)
mem_cgroup_iter_break  function  include/linux/memcontrol.h  302  static inline void mem_cgroup_iter_break(struct mem_cgroup *root,struct mem_cgroup *prev)
mem_cgroup_inactive_anon_is_low  function  include/linux/memcontrol.h  313  mem_cgroup_inactive_anon_is_low(struct lruvec *lruvec)
mem_cgroup_inactive_file_is_low  function  include/linux/memcontrol.h  319  mem_cgroup_inactive_file_is_low(struct lruvec *lruvec)
mem_cgroup_select_victim_node  prototype  include/linux/memcontrol.h  119  int mem_cgroup_select_victim_node(struct mem_cgroup *memcg);
mem_cgroup_get_lru_size  function  include/linux/memcontrol.h  325  mem_cgroup_get_lru_size(struct lruvec *lruvec,enum lru_list lru)
mem_cgroup_update_lru_size  function  include/linux/memcontrol.h  331  mem_cgroup_update_lru_size(struct lruvec *lruvec,enum lru_list lru,int increment)
mem_cgroup_print_oom_info  function  include/linux/memcontrol.h  337  mem_cgroup_print_oom_info(struct mem_cgroup *memcg,struct task_struct *p)
mem_cgroup_replace_page_cache  function  include/linux/memcontrol.h  383  static inline void mem_cgroup_replace_page_cache(struct page *oldpage,struct page *newpage)
mem_cgroup_disabled  function  include/linux/memcontrol.h  307  static inline bool mem_cgroup_disabled(void)
__mem_cgroup_begin_update_page_stat  prototype  include/linux/memcontrol.h  138  void __mem_cgroup_begin_update_page_stat(struct page *page,bool *locked,unsigned long *flags);
mem_cgroup_begin_update_page_stat  function  include/linux/memcontrol.h  341  static inline void mem_cgroup_begin_update_page_stat(struct page *page,bool *locked, unsigned long *flags)
__mem_cgroup_end_update_page_stat  prototype  include/linux/memcontrol.h  154  void __mem_cgroup_end_update_page_stat(struct page *page,unsigned long *flags);
mem_cgroup_end_update_page_stat  function  include/linux/memcontrol.h  346  static inline void mem_cgroup_end_update_page_stat(struct page *page,bool *locked, unsigned long *flags)
mem_cgroup_update_page_stat  prototype  include/linux/memcontrol.h  166  void mem_cgroup_update_page_stat(struct page *page,enum mem_cgroup_page_stat_item idx,int val);
mem_cgroup_inc_page_stat  function  include/linux/memcontrol.h  351  static inline void mem_cgroup_inc_page_stat(struct page *page,enum mem_cgroup_page_stat_item idx)
mem_cgroup_dec_page_stat  function  include/linux/memcontrol.h  356  static inline void mem_cgroup_dec_page_stat(struct page *page,enum mem_cgroup_page_stat_item idx)
mem_cgroup_soft_limit_reclaim  function  include/linux/memcontrol.h  362  unsigned long mem_cgroup_soft_limit_reclaim(struct zone *zone,int order,gfp_t gfp_mask,unsigned long *total_scanned)
mem_cgroup_get_limit  function  include/linux/memcontrol.h  370  u64 mem_cgroup_get_limit(struct mem_cgroup *memcg)
mem_cgroup_count_vm_event  function  include/linux/memcontrol.h  380  void mem_cgroup_count_vm_event(struct mm_struct *mm,enum vm_event_item idx)
mem_cgroup_split_huge_fixup  function  include/linux/memcontrol.h  375  static inline void mem_cgroup_split_huge_fixup(struct page *head)
mem_cgroup_bad_page_check  function  include/linux/memcontrol.h  391  mem_cgroup_bad_page_check(struct page *page)
mem_cgroup_print_bad_page  function  include/linux/memcontrol.h  397  mem_cgroup_print_bad_page(struct page *page)
sock_update_memcg  function  include/linux/memcontrol.h  413  static inline void sock_update_memcg(struct sock *sk)
sock_release_memcg  function  include/linux/memcontrol.h  416  static inline void sock_release_memcg(struct sock *sk)
_LINUX_SCHED_H  macro  include/linux/sched.h  2  #define _LINUX_SCHED_H
CSIGNAL  macro  include/linux/sched.h  7  #define CSIGNAL 0x000000ff
CLONE_VM  macro  include/linux/sched.h  8  #define CLONE_VM 0x00000100
CLONE_FS  macro  include/linux/sched.h  9  #define CLONE_FS 0x00000200
CLONE_FILES  macro  include/linux/sched.h  10  #define CLONE_FILES 0x00000400
CLONE_SIGHAND  macro  include/linux/sched.h  11  #define CLONE_SIGHAND 0x00000800
CLONE_PTRACE  macro  include/linux/sched.h  12  #define CLONE_PTRACE 0x00002000
CLONE_VFORK  macro  include/linux/sched.h  13  #define CLONE_VFORK 0x00004000
CLONE_PARENT  macro  include/linux/sched.h  14  #define CLONE_PARENT 0x00008000
CLONE_THREAD  macro  include/linux/sched.h  15  #define CLONE_THREAD 0x00010000
CLONE_NEWNS  macro  include/linux/sched.h  16  #define CLONE_NEWNS 0x00020000
CLONE_SYSVSEM  macro  include/linux/sched.h  17  #define CLONE_SYSVSEM 0x00040000
CLONE_SETTLS  macro  include/linux/sched.h  18  #define CLONE_SETTLS 0x00080000
CLONE_PARENT_SETTID  macro  include/linux/sched.h  19  #define CLONE_PARENT_SETTID 0x00100000
CLONE_CHILD_CLEARTID  macro  include/linux/sched.h  20  #define CLONE_CHILD_CLEARTID 0x00200000
CLONE_DETACHED  macro  include/linux/sched.h  21  #define CLONE_DETACHED 0x00400000
CLONE_UNTRACED  macro  include/linux/sched.h  22  #define CLONE_UNTRACED 0x00800000
CLONE_CHILD_SETTID  macro  include/linux/sched.h  23  #define CLONE_CHILD_SETTID 0x01000000
CLONE_NEWUTS  macro  include/linux/sched.h  26  #define CLONE_NEWUTS 0x04000000
CLONE_NEWIPC  macro  include/linux/sched.h  27  #define CLONE_NEWIPC 0x08000000
CLONE_NEWUSER  macro  include/linux/sched.h  28  #define CLONE_NEWUSER 0x10000000
CLONE_NEWPID  macro  include/linux/sched.h  29  #define CLONE_NEWPID 0x20000000
CLONE_NEWNET  macro  include/linux/sched.h  30  #define CLONE_NEWNET 0x40000000
CLONE_IO  macro  include/linux/sched.h  31  #define CLONE_IO 0x80000000
SCHED_NORMAL  macro  include/linux/sched.h  36  #define SCHED_NORMAL 0
SCHED_FIFO  macro  include/linux/sched.h  37  #define SCHED_FIFO 1
SCHED_RR  macro  include/linux/sched.h  38  #define SCHED_RR 2
SCHED_BATCH  macro  include/linux/sched.h  39  #define SCHED_BATCH 3
SCHED_IDLE  macro  include/linux/sched.h  41  #define SCHED_IDLE 5
SCHED_RESET_ON_FORK  macro  include/linux/sched.h  43  #define SCHED_RESET_ON_FORK 0x40000000
sched_param  struct  include/linux/sched.h  47  struct sched_param { int sched_priority; };
CLONE_KERNEL  macro  include/linux/sched.h  109  #define CLONE_KERNEL (CLONE_FS | CLONE_FILES | CLONE_SIGHAND)
get_avenrun  prototype  include/linux/sched.h  122  extern void get_avenrun(unsigned long *loads,unsigned long offset,int shift);
FSHIFT  macro  include/linux/sched.h  124  #define FSHIFT 11
FIXED_1  macro  include/linux/sched.h  125  #define FIXED_1 (1<<FSHIFT)
LOAD_FREQ  macro  include/linux/sched.h  126  #define LOAD_FREQ (5*HZ+1)
EXP_1  macro  include/linux/sched.h  127  #define EXP_1 1884
EXP_5  macro  include/linux/sched.h  128  #define EXP_5 2014
EXP_15  macro  include/linux/sched.h  129  #define EXP_15 2037
CALC_LOAD  macro  include/linux/sched.h  131  #define CALC_LOAD(load,exp,n) load *= exp; load += n*(FIXED_1-exp); load >>= FSHIFT;
nr_processes  prototype  include/linux/sched.h  139  extern int nr_processes(void);
nr_running  prototype  include/linux/sched.h  140  extern unsigned long nr_running(void);
nr_uninterruptible  prototype  include/linux/sched.h  141  extern unsigned long nr_uninterruptible(void);
nr_iowait  prototype  include/linux/sched.h  142  extern unsigned long nr_iowait(void);
nr_iowait_cpu  prototype  include/linux/sched.h  143  extern unsigned long nr_iowait_cpu(int cpu);
this_cpu_load  prototype  include/linux/sched.h  144  extern unsigned long this_cpu_load(void);
calc_global_load  prototype  include/linux/sched.h  147  extern void calc_global_load(unsigned long ticks);
update_cpu_load_nohz  prototype  include/linux/sched.h  148  extern void update_cpu_load_nohz(void);
get_parent_ip  prototype  include/linux/sched.h  150  extern unsigned long get_parent_ip(unsigned long addr);
proc_sched_show_task  function  include/linux/sched.h  162  proc_sched_show_task(struct task_struct *p,struct seq_file *m)
proc_sched_set_task  function  include/linux/sched.h  165  static inline void proc_sched_set_task(struct task_struct *p)
print_cfs_rq  function  include/linux/sched.h  169  print_cfs_rq(struct seq_file *m,int cpu,struct cfs_rq *cfs_rq)
TASK_RUNNING  macro  include/linux/sched.h  184  #define TASK_RUNNING 0
TASK_INTERRUPTIBLE  macro  include/linux/sched.h  185  #define TASK_INTERRUPTIBLE 1
TASK_UNINTERRUPTIBLE  macro  include/linux/sched.h  186  #define TASK_UNINTERRUPTIBLE 2
__TASK_STOPPED  macro  include/linux/sched.h  187  #define __TASK_STOPPED 4
__TASK_TRACED  macro  include/linux/sched.h  188  #define __TASK_TRACED 8
EXIT_ZOMBIE  macro  include/linux/sched.h  190  #define EXIT_ZOMBIE 16
EXIT_DEAD  macro  include/linux/sched.h  191  #define EXIT_DEAD 32
TASK_DEAD  macro  include/linux/sched.h  193  #define TASK_DEAD 64
TASK_WAKEKILL  macro  include/linux/sched.h  194  #define TASK_WAKEKILL 128
TASK_WAKING  macro  include/linux/sched.h  195  #define TASK_WAKING 256
TASK_STATE_MAX  macro  include/linux/sched.h  196  #define TASK_STATE_MAX 512
TASK_STATE_TO_CHAR_STR  macro  include/linux/sched.h  198  #define TASK_STATE_TO_CHAR_STR "RSDTtZXxKW"
TASK_KILLABLE  macro  include/linux/sched.h  204  #define TASK_KILLABLE (TASK_WAKEKILL | TASK_UNINTERRUPTIBLE)
TASK_STOPPED  macro  include/linux/sched.h  205  #define TASK_STOPPED (TASK_WAKEKILL | __TASK_STOPPED)
TASK_TRACED  macro  include/linux/sched.h  206  #define TASK_TRACED (TASK_WAKEKILL | __TASK_TRACED)
TASK_NORMAL  macro  include/linux/sched.h  209  #define TASK_NORMAL (TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE)
TASK_ALL  macro  include/linux/sched.h  210  #define TASK_ALL (TASK_NORMAL | __TASK_STOPPED | __TASK_TRACED)
TASK_REPORT  macro  include/linux/sched.h  213  #define TASK_REPORT (TASK_RUNNING | TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE | __TASK_STOPPED | __TASK_TRACED)
task_is_traced  macro  include/linux/sched.h  217  #define task_is_traced(task) ((task->state & __TASK_TRACED) != 0)
task_is_stopped  macro  include/linux/sched.h  218  #define task_is_stopped(task) ((task->state & __TASK_STOPPED) != 0)
task_is_dead  macro  include/linux/sched.h  219  #define task_is_dead(task) ((task)->exit_state != 0)
task_is_stopped_or_traced  macro  include/linux/sched.h  220  #define task_is_stopped_or_traced(task) ((task->state & (__TASK_STOPPED | __TASK_TRACED)) != 0)
task_contributes_to_load  macro  include/linux/sched.h  222  #define task_contributes_to_load(task) ((task->state & TASK_UNINTERRUPTIBLE) != 0 && (task->flags & PF_FROZEN) == 0)
__set_task_state  macro  include/linux/sched.h  226  #define __set_task_state(tsk,state_value) do { (tsk)->state = (state_value); } while (0)
set_task_state  macro  include/linux/sched.h  228  #define set_task_state(tsk,state_value) set_mb((tsk)->state, (state_value))
__set_current_state  macro  include/linux/sched.h  242  #define __set_current_state(state_value) do { current->state = (state_value); } while (0)
set_current_state  macro  include/linux/sched.h  244  #define set_current_state(state_value) set_mb(current->state, (state_value))
TASK_COMM_LEN  macro  include/linux/sched.h  248  #define TASK_COMM_LEN 16
lockdep_tasklist_lock_is_held  prototype  include/linux/sched.h  264  extern int lockdep_tasklist_lock_is_held(void);
sched_init  prototype  include/linux/sched.h  267  extern void sched_init(void);
sched_init_smp  prototype  include/linux/sched.h  268  extern void sched_init_smp(void);
schedule_tail  prototype  include/linux/sched.h  269  extern asmlinkage void schedule_tail(struct task_struct *prev);
init_idle  prototype  include/linux/sched.h  270  extern void init_idle(struct task_struct *idle,int cpu);
init_idle_bootup_task  prototype  include/linux/sched.h  271  extern void init_idle_bootup_task(struct task_struct *idle);
runqueue_is_locked  prototype  include/linux/sched.h  273  extern int runqueue_is_locked(int cpu);
select_nohz_load_balancer  function  include/linux/sched.h  280  static inline void select_nohz_load_balancer(int stop_tick) { }
set_cpu_sd_state_idle  function  include/linux/sched.h  281  static inline void set_cpu_sd_state_idle(void) { }
get_nohz_timer_target  prototype  include/linux/sched.h  278  extern int get_nohz_timer_target(void);
show_state_filter  prototype  include/linux/sched.h  287  extern void show_state_filter(unsigned long state_filter);
show_state  function  include/linux/sched.h  289  static inline void show_state(void)
show_regs  prototype  include/linux/sched.h  294  extern void show_regs(struct pt_regs *);
show_stack  prototype  include/linux/sched.h  301  extern void show_stack(struct task_struct *task,unsigned long *sp);
io_schedule  prototype  include/linux/sched.h  303  void io_schedule(void);
io_schedule_timeout  prototype  include/linux/sched.h  304  long io_schedule_timeout(long timeout);
cpu_init  prototype  arch/x86/include/asm/processor.h  725  extern void cpu_init(void);
trap_init  prototype  include/linux/sched.h  307  extern void trap_init(void);
update_process_times  prototype  include/linux/sched.h  308  extern void update_process_times(int user);
scheduler_tick  prototype  include/linux/sched.h  309  extern void scheduler_tick(void);
sched_show_task  prototype  include/linux/sched.h  311  extern void sched_show_task(struct task_struct *p);
touch_softlockup_watchdog  function  include/linux/sched.h  323  static inline void touch_softlockup_watchdog(void)
touch_softlockup_watchdog_sync  function  include/linux/sched.h  326  static inline void touch_softlockup_watchdog_sync(void)
touch_all_softlockup_watchdogs  function  include/linux/sched.h  329  static inline void touch_all_softlockup_watchdogs(void)
proc_dowatchdog_thresh  prototype  include/linux/sched.h  317  extern int proc_dowatchdog_thresh(struct ctl_table *table,int write,void __user *buffer,size_t *lenp, loff_t *ppos);
lockup_detector_init  function  include/linux/sched.h  332  static inline void lockup_detector_init(void)
proc_dohung_task_timeout_secs  prototype  include/linux/sched.h  342  extern int proc_dohung_task_timeout_secs(struct ctl_table *table,int write,void __user *buffer,size_t *lenp, loff_t *ppos);
__sched  macro  include/linux/sched.h  351  #define __sched __attribute__((__section__(".sched.text")))
in_sched_functions  prototype  include/linux/sched.h  357  extern int in_sched_functions(unsigned long addr);
MAX_SCHEDULE_TIMEOUT  macro  include/linux/sched.h  359  #define MAX_SCHEDULE_TIMEOUT LONG_MAX
schedule_timeout  prototype  include/linux/sched.h  360  extern signed long schedule_timeout(signed long timeout);
schedule_timeout_interruptible  prototype  include/linux/sched.h  361  extern signed long schedule_timeout_interruptible(signed long timeout);
schedule_timeout_killable  prototype  include/linux/sched.h  362  extern signed long schedule_timeout_killable(signed long timeout);
schedule_timeout_uninterruptible  prototype  include/linux/sched.h  363  extern signed long schedule_timeout_uninterruptible(signed long timeout);
schedule  prototype  include/linux/sched.h  364  asmlinkage void schedule(void);
schedule_preempt_disabled  prototype  include/linux/sched.h  365  extern void schedule_preempt_disabled(void);
mutex_spin_on_owner  prototype  include/linux/sched.h  366  extern int mutex_spin_on_owner(struct mutex *lock,struct task_struct *owner);
MAPCOUNT_ELF_CORE_MARGIN  macro  include/linux/sched.h  383  #define MAPCOUNT_ELF_CORE_MARGIN (5)
DEFAULT_MAX_MAP_COUNT  macro  include/linux/sched.h  384  #define DEFAULT_MAX_MAP_COUNT (USHRT_MAX - MAPCOUNT_ELF_CORE_MARGIN)
arch_pick_mmap_layout  function  include/linux/sched.h  402  static inline void arch_pick_mmap_layout(struct mm_struct *mm) {}
arch_get_unmapped_area  prototype  include/linux/sched.h  393  arch_get_unmapped_area(struct file *,unsigned long,unsigned long,unsigned long, unsigned long);
arch_get_unmapped_area_topdown  prototype  include/linux/sched.h  396  arch_get_unmapped_area_topdown(struct file *filp,unsigned long addr,unsigned long len, unsigned long pgoff,unsigned long flags);
arch_unmap_area  prototype  include/linux/sched.h  399  extern void arch_unmap_area(struct mm_struct *,unsigned long);
arch_unmap_area_topdown  prototype  include/linux/sched.h  400  extern void arch_unmap_area_topdown(struct mm_struct *,unsigned long);
set_dumpable  prototype  include/linux/sched.h  406  extern void set_dumpable(struct mm_struct *mm,int value);
get_dumpable  prototype  include/linux/sched.h  407  extern int get_dumpable(struct mm_struct *mm);
MMF_DUMPABLE  macro  include/linux/sched.h  411  #define MMF_DUMPABLE 0
MMF_DUMP_SECURELY  macro  include/linux/sched.h  412  #define MMF_DUMP_SECURELY 1
MMF_DUMPABLE_BITS  macro  include/linux/sched.h  414  #define MMF_DUMPABLE_BITS 2
MMF_DUMPABLE_MASK  macro  include/linux/sched.h  415  #define MMF_DUMPABLE_MASK ((1 << MMF_DUMPABLE_BITS) - 1)
MMF_DUMP_ANON_PRIVATE  macro  include/linux/sched.h  418  #define MMF_DUMP_ANON_PRIVATE 2
MMF_DUMP_ANON_SHARED  macro  include/linux/sched.h  419  #define MMF_DUMP_ANON_SHARED 3
MMF_DUMP_MAPPED_PRIVATE  macro  include/linux/sched.h  420  #define MMF_DUMP_MAPPED_PRIVATE 4
MMF_DUMP_MAPPED_SHARED  macro  include/linux/sched.h  421  #define MMF_DUMP_MAPPED_SHARED 5
MMF_DUMP_ELF_HEADERS  macro  include/linux/sched.h  422  #define MMF_DUMP_ELF_HEADERS 6
MMF_DUMP_HUGETLB_PRIVATE  macro  include/linux/sched.h  423  #define MMF_DUMP_HUGETLB_PRIVATE 7
MMF_DUMP_HUGETLB_SHARED  macro  include/linux/sched.h  424  #define MMF_DUMP_HUGETLB_SHARED 8
MMF_DUMP_FILTER_SHIFT  macro  include/linux/sched.h  426  #define MMF_DUMP_FILTER_SHIFT MMF_DUMPABLE_BITS
MMF_DUMP_FILTER_BITS  macro  include/linux/sched.h  427  #define MMF_DUMP_FILTER_BITS 7
MMF_DUMP_FILTER_MASK  macro  include/linux/sched.h  428  #define MMF_DUMP_FILTER_MASK (((1 << MMF_DUMP_FILTER_BITS) - 1) << MMF_DUMP_FILTER_SHIFT)
MMF_DUMP_FILTER_DEFAULT  macro  include/linux/sched.h  430  #define MMF_DUMP_FILTER_DEFAULT ((1 << MMF_DUMP_ANON_PRIVATE) |	(1 << MMF_DUMP_ANON_SHARED) | (1 << MMF_DUMP_HUGETLB_PRIVATE) | MMF_DUMP_MASK_DEFAULT_ELF)
MMF_DUMP_MASK_DEFAULT_ELF  macro  include/linux/sched.h  437  # define MMF_DUMP_MASK_DEFAULT_ELF 0
MMF_VM_MERGEABLE  macro  include/linux/sched.h  440  #define MMF_VM_MERGEABLE 16
MMF_VM_HUGEPAGE  macro  include/linux/sched.h  441  #define MMF_VM_HUGEPAGE 17
MMF_EXE_FILE_CHANGED  macro  include/linux/sched.h  442  #define MMF_EXE_FILE_CHANGED 18
MMF_INIT_MASK  macro  include/linux/sched.h  444  #define MMF_INIT_MASK (MMF_DUMPABLE_MASK | MMF_DUMP_FILTER_MASK)
sighand_struct  struct  include/linux/sched.h  446  struct sighand_struct { atomic_t count; struct k_sigaction action[_NSIG]; spinlock_t siglock; wait_queue_head_t signalfd_wqh; };
pacct_struct  struct  include/linux/sched.h  453  struct pacct_struct { int ac_flag; long ac_exitcode; unsigned long ac_mem; cputime_t ac_utime, ac_stime; unsigned long ac_minflt, ac_majflt; };
cpu_itimer  struct  include/linux/sched.h  461  struct cpu_itimer { cputime_t expires; cputime_t incr; u32 error; u32 incr_error; };
task_cputime  struct  include/linux/sched.h  479  struct task_cputime { cputime_t utime; cputime_t stime; unsigned long long sum_exec_runtime; };
prof_exp  macro  include/linux/sched.h  485  #define prof_exp stime
virt_exp  macro  include/linux/sched.h  486  #define virt_exp utime
sched_exp  macro  include/linux/sched.h  487  #define sched_exp sum_exec_runtime
INIT_CPUTIME  macro  include/linux/sched.h  489  #define INIT_CPUTIME (struct task_cputime) { .utime = 0, .stime = 0, .sum_exec_runtime = 0, }
INIT_PREEMPT_COUNT  macro  include/linux/sched.h  503  #define INIT_PREEMPT_COUNT (1 + PREEMPT_ACTIVE)
thread_group_cputimer  prototype  include/linux/sched.h  2661  void thread_group_cputimer(struct task_struct *tsk,struct task_cputime *times);
signal_struct  struct  include/linux/sched.h  531  struct signal_struct { atomic_t sigcnt; atomic_t live; int nr_threads; wait_queue_head_t wait_chldexit; struct task_struct *curr_target; struct sigpending shared_pending; int group_exit_code; int notify_count; struct task_struct *group_exit_task; int group_stop_count; unsigned int flags; unsigned int is_child_subreaper:1; unsigned int has_child_subreaper:1; struct list_head posix_timers; struct hrtimer real_timer; struct pid *leader_pid; ktime_t it_real_incr; struct cpu_itimer it[2]; struct thread_group_cputimer cputimer; struct task_cputime cputime_expires; struct list_head cpu_timers[3]; struct pid *tty_old_pgrp; int leader; struct tty_struct *tty; struct autogroup *autogroup; cputime_t utime, stime, cutime, cstime; cputime_t gtime; cputime_t cgtime; cputime_t prev_utime, prev_stime; unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw; unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt; unsigned long inblock, oublock, cinblock, coublock; unsigned long maxrss, cmaxrss; struct task_io_accounting ioac; unsigned long long sum_sched_runtime; struct rlimit rlim[RLIM_NLIMITS]; struct pacct_struct pacct; struct taskstats *stats; unsigned audit_tty; struct tty_audit_buf *tty_audit_buf; struct rw_semaphore group_rwsem; int oom_adj; int oom_score_adj; int oom_score_adj_min; struct mutex cred_guard_mutex; };
__ARCH_WANT_UNLOCKED_CTXSW  macro  include/linux/sched.h  678  # define __ARCH_WANT_UNLOCKED_CTXSW
SIGNAL_STOP_STOPPED  macro  include/linux/sched.h  684  #define SIGNAL_STOP_STOPPED 0x00000001
SIGNAL_STOP_CONTINUED  macro  include/linux/sched.h  685  #define SIGNAL_STOP_CONTINUED 0x00000002
SIGNAL_GROUP_EXIT  macro  include/linux/sched.h  686  #define SIGNAL_GROUP_EXIT 0x00000004
SIGNAL_CLD_STOPPED  macro  include/linux/sched.h  690  #define SIGNAL_CLD_STOPPED 0x00000010
SIGNAL_CLD_CONTINUED  macro  include/linux/sched.h  691  #define SIGNAL_CLD_CONTINUED 0x00000020
SIGNAL_CLD_MASK  macro  include/linux/sched.h  692  #define SIGNAL_CLD_MASK (SIGNAL_CLD_STOPPED|SIGNAL_CLD_CONTINUED)
SIGNAL_UNKILLABLE  macro  include/linux/sched.h  694  #define SIGNAL_UNKILLABLE 0x00000040
signal_group_exit  function  include/linux/sched.h  697  static inline int signal_group_exit(const struct signal_struct *sig)
user_struct  struct  include/linux/sched.h  706  struct user_struct { atomic_t __count; atomic_t processes; atomic_t files; atomic_t sigpending; atomic_t inotify_watches; atomic_t inotify_devs; atomic_t fanotify_listeners; atomic_long_t epoll_watches; unsigned long mq_bytes; unsigned long locked_shm; struct key *uid_keyring; struct key *session_keyring; struct hlist_node uidhash_node; kuid_t uid; atomic_long_t locked_vm; };
uids_sysfs_init  prototype  include/linux/sched.h  741  extern int uids_sysfs_init(void);
find_user  prototype  include/linux/sched.h  743  extern struct user_struct *find_user(kuid_t);
INIT_USER  macro  include/linux/sched.h  746  #define INIT_USER (&root_user)
sched_info  struct  include/linux/sched.h  753  struct sched_info { unsigned long pcount; unsigned long long run_delay; unsigned long long last_arrival,last_queued; };
task_delay_info  struct  include/linux/sched.h  765  struct task_delay_info { spinlock_t lock; unsigned int flags; struct timespec blkio_start, blkio_end; u64 blkio_delay; u64 swapin_delay; u32 blkio_count; u32 swapin_count; struct timespec freepages_start, freepages_end; u64 freepages_delay; u32 freepages_count; };
sched_info_on  function  include/linux/sched.h  798  static inline int sched_info_on(void)
cpu_idle_type  enum  include/linux/sched.h  810  enum cpu_idle_type { CPU_IDLE, CPU_NOT_IDLE, CPU_NEWLY_IDLE, CPU_MAX_IDLE_TYPES };
SCHED_LOAD_RESOLUTION  macro  include/linux/sched.h  834  # define SCHED_LOAD_RESOLUTION 0
scale_load  macro  include/linux/sched.h  835  # define scale_load(w) (w)
scale_load_down  macro  include/linux/sched.h  836  # define scale_load_down(w) (w)
SCHED_LOAD_SHIFT  macro  include/linux/sched.h  839  #define SCHED_LOAD_SHIFT (10 + SCHED_LOAD_RESOLUTION)
SCHED_LOAD_SCALE  macro  include/linux/sched.h  840  #define SCHED_LOAD_SCALE (1L << SCHED_LOAD_SHIFT)
SCHED_POWER_SHIFT  macro  include/linux/sched.h  845  #define SCHED_POWER_SHIFT 10
SCHED_POWER_SCALE  macro  include/linux/sched.h  846  #define SCHED_POWER_SCALE (1L << SCHED_POWER_SHIFT)
SD_LOAD_BALANCE  macro  include/linux/sched.h  852  #define SD_LOAD_BALANCE 0x0001
SD_BALANCE_NEWIDLE  macro  include/linux/sched.h  853  #define SD_BALANCE_NEWIDLE 0x0002
SD_BALANCE_EXEC  macro  include/linux/sched.h  854  #define SD_BALANCE_EXEC 0x0004
SD_BALANCE_FORK  macro  include/linux/sched.h  855  #define SD_BALANCE_FORK 0x0008
SD_BALANCE_WAKE  macro  include/linux/sched.h  856  #define SD_BALANCE_WAKE 0x0010
SD_WAKE_AFFINE  macro  include/linux/sched.h  857  #define SD_WAKE_AFFINE 0x0020
SD_PREFER_LOCAL  macro  include/linux/sched.h  858  #define SD_PREFER_LOCAL 0x0040
SD_SHARE_CPUPOWER  macro  include/linux/sched.h  859  #define SD_SHARE_CPUPOWER 0x0080
SD_SHARE_PKG_RESOURCES  macro  include/linux/sched.h  860  #define SD_SHARE_PKG_RESOURCES 0x0200
SD_SERIALIZE  macro  include/linux/sched.h  861  #define SD_SERIALIZE 0x0400
SD_ASYM_PACKING  macro  include/linux/sched.h  862  #define SD_ASYM_PACKING 0x0800
SD_PREFER_SIBLING  macro  include/linux/sched.h  863  #define SD_PREFER_SIBLING 0x1000
SD_OVERLAP  macro  include/linux/sched.h  864  #define SD_OVERLAP 0x2000
arch_sd_sibiling_asym_packing  prototype  include/linux/sched.h  866  extern int __weak arch_sd_sibiling_asym_packing(void);
sched_group_power  struct  include/linux/sched.h  868  struct sched_group_power { atomic_t ref; unsigned int power, power_orig; unsigned long next_update; atomic_t nr_busy_cpus; unsigned long cpumask[0]; };
sched_group  struct  include/linux/sched.h  884  struct sched_group { struct sched_group *next; atomic_t ref; unsigned int group_weight; struct sched_group_power *sgp; unsigned long cpumask[0]; };
sched_group_cpus  function  include/linux/sched.h  901  static inline struct cpumask *sched_group_cpus(struct sched_group *sg)
sched_group_mask  function  include/linux/sched.h  910  static inline struct cpumask *sched_group_mask(struct sched_group *sg)
group_first_cpu  function  include/linux/sched.h  919  static inline unsigned int group_first_cpu(struct sched_group *group)
sched_domain_attr  struct  include/linux/sched.h  924  struct sched_domain_attr { int relax_domain_level; };
SD_ATTR_INIT  macro  include/linux/sched.h  928  #define SD_ATTR_INIT (struct sched_domain_attr) { .relax_domain_level = -1, }
sched_domain  struct  include/linux/sched.h  934  struct sched_domain { struct sched_domain *parent; struct sched_domain *child; struct sched_group *groups; unsigned long min_interval; unsigned long max_interval; unsigned int busy_factor; unsigned int imbalance_pct; unsigned int cache_nice_tries; unsigned int busy_idx; unsigned int idle_idx; unsigned int newidle_idx; unsigned int wake_idx; unsigned int forkexec_idx; unsigned int smt_gain; int flags; int level; unsigned long last_balance; unsigned int balance_interval; unsigned int nr_balance_failed; u64 last_update; unsigned int lb_count[CPU_MAX_IDLE_TYPES]; unsigned int lb_failed[CPU_MAX_IDLE_TYPES]; unsigned int lb_balanced[CPU_MAX_IDLE_TYPES]; unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES]; unsigned int lb_gained[CPU_MAX_IDLE_TYPES]; unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES]; unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES]; unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES]; unsigned int alb_count; unsigned int alb_failed; unsigned int alb_pushed; unsigned int sbe_count; unsigned int sbe_balanced; unsigned int sbe_pushed; unsigned int sbf_count; unsigned int sbf_balanced; unsigned int sbf_pushed; unsigned int ttwu_wake_remote; unsigned int ttwu_move_affine; unsigned int ttwu_move_balance; char *name; struct rcu_head rcu; }; unsigned int span_weight; unsigned long span[0]; };
sched_domain_span  function  include/linux/sched.h  1010  static inline struct cpumask *sched_domain_span(struct sched_domain *sd)
partition_sched_domains  function  include/linux/sched.h  1041  partition_sched_domains(int ndoms_new,cpumask_var_t doms_new[],struct sched_domain_attr *dattr_new)
alloc_sched_domains  prototype  include/linux/sched.h  1019  cpumask_var_t *alloc_sched_domains(unsigned int ndoms);
free_sched_domains  prototype  include/linux/sched.h  1020  void free_sched_domains(cpumask_var_t doms[],unsigned int ndoms);
test_sd_parent  function  include/linux/sched.h  1023  static inline int test_sd_parent(struct sched_domain *sd,int flag)
default_scale_freq_power  prototype  include/linux/sched.h  1031  unsigned long default_scale_freq_power(struct sched_domain *sd,int cpu);
default_scale_smt_power  prototype  include/linux/sched.h  1032  unsigned long default_scale_smt_power(struct sched_domain *sd,int cpu);
cpus_share_cache  function  include/linux/sched.h  1046  static inline bool cpus_share_cache(int this_cpu,int that_cpu)
prefetch_stack  function  include/linux/sched.h  1060  static inline void prefetch_stack(struct task_struct *t) { }
WF_SYNC  macro  include/linux/sched.h  1074  #define WF_SYNC 0x01
WF_FORK  macro  include/linux/sched.h  1075  #define WF_FORK 0x02
WF_MIGRATED  macro  include/linux/sched.h  1076  #define WF_MIGRATED 0x04
ENQUEUE_WAKEUP  macro  include/linux/sched.h  1078  #define ENQUEUE_WAKEUP 1
ENQUEUE_HEAD  macro  include/linux/sched.h  1079  #define ENQUEUE_HEAD 2
ENQUEUE_WAKING  macro  include/linux/sched.h  1083  #define ENQUEUE_WAKING 0
DEQUEUE_SLEEP  macro  include/linux/sched.h  1086  #define DEQUEUE_SLEEP 1
sched_class  struct  include/linux/sched.h  1088  struct sched_class { const struct sched_class *next; void (*enqueue_task) (struct rq *rq, struct task_struct *p, int flags); void (*dequeue_task) (struct rq *rq, struct task_struct *p, int flags); void (*yield_task) (struct rq *rq); bool (*yield_to_task) (struct rq *rq, struct task_struct *p, bool preempt); void (*check_preempt_curr) (struct rq *rq, struct task_struct *p, int flags); struct task_struct * (*pick_next_task) (struct rq *rq); void (*put_prev_task) (struct rq *rq, struct task_struct *p); int (*select_task_rq)(struct task_struct *p, int sd_flag, int flags); void (*pre_schedule) (struct rq *this_rq, struct task_struct *task); void (*post_schedule) (struct rq *this_rq); void (*task_waking) (struct task_struct *task); void (*task_woken) (struct rq *this_rq, struct task_struct *task); void (*set_cpus_allowed)(struct task_struct *p,const struct cpumask *newmask); void (*rq_online)(struct rq *rq); void (*rq_offline)(struct rq *rq); void (*set_curr_task) (struct rq *rq); void (*task_tick) (struct rq *rq, struct task_struct *p, int queued); void (*task_fork) (struct task_struct *p); void (*switched_from) (struct rq *this_rq, struct task_struct *task); void (*switched_to) (struct rq *this_rq, struct task_struct *task); void (*prio_changed) (struct rq *this_rq, struct task_struct *task,int oldprio); unsigned int (*get_rr_interval) (struct rq *rq,struct task_struct *task); void (*task_move_group) (struct task_struct *p, int on_rq); };
load_weight  struct  include/linux/sched.h  1133  struct load_weight { unsigned long weight, inv_weight; };
sched_statistics  struct  include/linux/sched.h  1138  struct sched_statistics { u64 wait_start; u64 wait_max; u64 wait_count; u64 wait_sum; u64 iowait_count; u64 iowait_sum; u64 sleep_start; u64 sleep_max; s64 sum_sleep_runtime; u64 block_start; u64 block_max; u64 exec_max; u64 slice_max; u64 nr_migrations_cold; u64 nr_failed_migrations_affine; u64 nr_failed_migrations_running; u64 nr_failed_migrations_hot; u64 nr_forced_migrations; u64 nr_wakeups; u64 nr_wakeups_sync; u64 nr_wakeups_migrate; u64 nr_wakeups_local; u64 nr_wakeups_remote; u64 nr_wakeups_affine; u64 nr_wakeups_affine_attempts; u64 nr_wakeups_passive; u64 nr_wakeups_idle; };
sched_entity  struct  include/linux/sched.h  1173  struct sched_entity { struct load_weight load; struct rb_node run_node; struct list_head group_node; unsigned int on_rq; u64 exec_start; u64 sum_exec_runtime; u64 vruntime; u64 prev_sum_exec_runtime; u64 nr_migrations; struct sched_statistics statistics; struct sched_entity *parent; struct cfs_rq *cfs_rq; struct cfs_rq *my_q; };
sched_rt_entity  struct  include/linux/sched.h  1199  struct sched_rt_entity { struct list_head run_list; unsigned long timeout; unsigned int time_slice; struct sched_rt_entity *back; struct sched_rt_entity *parent; struct rt_rq *rt_rq; struct rt_rq *my_q; };
RR_TIMESLICE  macro  include/linux/sched.h  1218  #define RR_TIMESLICE (100 * HZ / 1000)
perf_event_task_context  enum  include/linux/sched.h  1222  enum perf_event_task_context { perf_invalid_context = -1, perf_hw_context = 0, perf_sw_context, perf_nr_task_contexts, };
task_struct  struct  include/linux/sched.h  1229  struct task_struct { volatile long state; void *stack; atomic_t usage; unsigned int flags; unsigned int ptrace; struct llist_node wake_entry; int on_cpu; int on_rq; int prio, static_prio, normal_prio; unsigned int rt_priority; const struct sched_class *sched_class; struct sched_entity se; struct sched_rt_entity rt; struct task_group *sched_task_group; struct hlist_head preempt_notifiers; unsigned char fpu_counter; unsigned int btrace_seq; unsigned int policy; int nr_cpus_allowed; cpumask_t cpus_allowed; int rcu_read_lock_nesting; char rcu_read_unlock_special; struct list_head rcu_node_entry; struct rcu_node *rcu_blocked_node; struct rt_mutex *rcu_boost_mutex; struct sched_info sched_info; struct list_head tasks; struct plist_node pushable_tasks; struct mm_struct *mm, *active_mm; unsigned brk_randomized:1; struct task_rss_stat rss_stat; int exit_state; int exit_code, exit_signal; int pdeath_signal; unsigned int jobctl; unsigned int personality; unsigned did_exec:1; unsigned in_execve:1; unsigned in_iowait:1; unsigned no_new_privs:1; unsigned sched_reset_on_fork:1; unsigned sched_contributes_to_load:1; pid_t pid; pid_t tgid; unsigned long stack_canary; struct task_struct __rcu *real_parent; struct task_struct __rcu *parent; struct list_head children; struct list_head sibling; struct task_struct *group_leader; struct list_head ptraced; struct list_head ptrace_entry; struct pid_link pids[PIDTYPE_MAX]; struct list_head thread_group; struct completion *vfork_done; int __user *set_child_tid; int __user *clear_child_tid; cputime_t utime, stime, utimescaled, stimescaled; cputime_t gtime; cputime_t prev_utime, prev_stime; unsigned long nvcsw, nivcsw; struct timespec start_time; struct timespec real_start_time; unsigned long min_flt, maj_flt; struct task_cputime cputime_expires; struct list_head cpu_timers[3]; const struct cred __rcu *real_cred; const struct cred __rcu *cred; char comm[TASK_COMM_LEN]; int link_count, total_link_count; struct sysv_sem sysvsem; unsigned long last_switch_count; struct thread_struct thread; struct fs_struct *fs; struct files_struct *files; struct nsproxy *nsproxy; struct signal_struct *signal; struct sighand_struct *sighand; sigset_t blocked, real_blocked; sigset_t saved_sigmask; struct sigpending pending; unsigned long sas_ss_sp; size_t sas_ss_size; int (*notifier)(void *priv); void *notifier_data; sigset_t *notifier_mask; struct hlist_head task_works; struct audit_context *audit_context; uid_t loginuid; unsigned int sessionid; struct seccomp seccomp; u32 parent_exec_id; u32 self_exec_id; spinlock_t alloc_lock; raw_spinlock_t pi_lock; struct plist_head pi_waiters; struct rt_mutex_waiter *pi_blocked_on; struct mutex_waiter *blocked_on; unsigned int irq_events; unsigned long hardirq_enable_ip; unsigned long hardirq_disable_ip; unsigned int hardirq_enable_event; unsigned int hardirq_disable_event; int hardirqs_enabled; int hardirq_context; unsigned long softirq_disable_ip; unsigned long softirq_enable_ip; unsigned int softirq_disable_event; unsigned int softirq_enable_event; int softirqs_enabled; int softirq_context; # define MAX_LOCK_DEPTH 48UL u64 curr_chain_key; int lockdep_depth; unsigned int lockdep_recursion; struct held_lock held_locks[MAX_LOCK_DEPTH]; gfp_t lockdep_reclaim_gfp; void *journal_info; struct bio_list *bio_list; struct blk_plug *plug; struct reclaim_state *reclaim_state; struct backing_dev_info *backing_dev_info; struct io_context *io_context; unsigned long ptrace_message; siginfo_t *last_siginfo; struct task_io_accounting ioac; u64 acct_rss_mem1; u64 acct_vm_mem1; cputime_t acct_timexpd; nodemask_t mems_allowed; seqcount_t mems_allowed_seq; int cpuset_mem_spread_rotor; int cpuset_slab_spread_rotor; struct css_set __rcu *cgroups; struct list_head cg_list; struct robust_list_head __user *robust_list; struct compat_robust_list_head __user *compat_robust_list; struct list_head pi_state_list; struct futex_pi_state *pi_state_cache; struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts]; struct mutex perf_event_mutex; struct list_head perf_event_list; struct mempolicy *mempolicy; short il_next; short pref_node_fork; struct rcu_head rcu; struct pipe_inode_info *splice_pipe; struct task_delay_info *delays; int make_it_fail; int nr_dirtied; int nr_dirtied_pause; unsigned long dirty_paused_when; int latency_record_count; struct latency_record latency_record[LT_SAVECOUNT]; unsigned long timer_slack_ns; unsigned long default_timer_slack_ns; struct list_head *scm_work_list; int curr_ret_stack; struct ftrace_ret_stack *ret_stack; unsigned long long ftrace_timestamp; atomic_t trace_overrun; atomic_t tracing_graph_pause; unsigned long trace; unsigned long trace_recursion; struct memcg_batch_info { int do_batch; struct mem_cgroup *memcg; unsigned long nr_pages; unsigned long memsw_nr_pages; } memcg_batch; atomic_t ptrace_bp_refcnt; struct uprobe_task *utask; int uprobe_srcu_id; };
tsk_cpus_allowed  macro  include/linux/sched.h  1592  #define tsk_cpus_allowed(tsk) (&(tsk)->cpus_allowed)
MAX_USER_RT_PRIO  macro  include/linux/sched.h  1607  #define MAX_USER_RT_PRIO 100
MAX_RT_PRIO  macro  include/linux/sched.h  1608  #define MAX_RT_PRIO MAX_USER_RT_PRIO
MAX_PRIO  macro  include/linux/sched.h  1610  #define MAX_PRIO (MAX_RT_PRIO + 40)
DEFAULT_PRIO  macro  include/linux/sched.h  1611  #define DEFAULT_PRIO (MAX_RT_PRIO + 20)
rt_prio  function  include/linux/sched.h  1613  static inline int rt_prio(int prio)
rt_task  function  include/linux/sched.h  1620  static inline int rt_task(struct task_struct *p)
task_pid  function  include/linux/sched.h  1625  static inline struct pid *task_pid(struct task_struct *task)
task_tgid  function  include/linux/sched.h  1630  static inline struct pid *task_tgid(struct task_struct *task)
task_pgrp  function  include/linux/sched.h  1640  static inline struct pid *task_pgrp(struct task_struct *task)
task_session  function  include/linux/sched.h  1645  static inline struct pid *task_session(struct task_struct *task)
__task_pid_nr_ns  prototype  include/linux/sched.h  1665  pid_t __task_pid_nr_ns(struct task_struct *task,enum pid_type type,struct pid_namespace *ns);
task_pid_nr  function  include/linux/sched.h  1668  static inline pid_t task_pid_nr(struct task_struct *tsk)
task_pid_nr_ns  function  include/linux/sched.h  1673  static inline pid_t task_pid_nr_ns(struct task_struct *tsk,struct pid_namespace *ns)
task_pid_vnr  function  include/linux/sched.h  1679  static inline pid_t task_pid_vnr(struct task_struct *tsk)
task_tgid_nr  function  include/linux/sched.h  1685  static inline pid_t task_tgid_nr(struct task_struct *tsk)
task_tgid_nr_ns  prototype  include/linux/sched.h  1690  pid_t task_tgid_nr_ns(struct task_struct *tsk,struct pid_namespace *ns);
task_tgid_vnr  function  include/linux/sched.h  1692  static inline pid_t task_tgid_vnr(struct task_struct *tsk)
task_pgrp_nr_ns  function  include/linux/sched.h  1698  static inline pid_t task_pgrp_nr_ns(struct task_struct *tsk,struct pid_namespace *ns)
task_pgrp_vnr  function  include/linux/sched.h  1704  static inline pid_t task_pgrp_vnr(struct task_struct *tsk)
task_session_nr_ns  function  include/linux/sched.h  1710  static inline pid_t task_session_nr_ns(struct task_struct *tsk,struct pid_namespace *ns)
task_session_vnr  function  include/linux/sched.h  1716  static inline pid_t task_session_vnr(struct task_struct *tsk)
task_pgrp_nr  function  include/linux/sched.h  1722  static inline pid_t task_pgrp_nr(struct task_struct *tsk)
pid_alive  function  include/linux/sched.h  1735  static inline int pid_alive(struct task_struct *p)
is_global_init  function  include/linux/sched.h  1746  static inline int is_global_init(struct task_struct *tsk)
is_container_init  prototype  include/linux/sched.h  1755  extern int is_container_init(struct task_struct *tsk);
free_task  prototype  include/linux/sched.h  1759  extern void free_task(struct task_struct *tsk);
get_task_struct  macro  include/linux/sched.h  1760  #define get_task_struct(tsk) do { atomic_inc(&(tsk)->usage); } while(0)
__put_task_struct  prototype  include/linux/sched.h  1762  extern void __put_task_struct(struct task_struct *t);
put_task_struct  function  include/linux/sched.h  1764  static inline void put_task_struct(struct task_struct *t)
task_times  prototype  include/linux/sched.h  1770  extern void task_times(struct task_struct *p,cputime_t *ut,cputime_t *st);
thread_group_times  prototype  include/linux/sched.h  1771  extern void thread_group_times(struct task_struct *p,cputime_t *ut,cputime_t *st);
PF_EXITING  macro  include/linux/sched.h  1776  #define PF_EXITING 0x00000004
PF_EXITPIDONE  macro  include/linux/sched.h  1777  #define PF_EXITPIDONE 0x00000008
PF_VCPU  macro  include/linux/sched.h  1778  #define PF_VCPU 0x00000010
PF_WQ_WORKER  macro  include/linux/sched.h  1779  #define PF_WQ_WORKER 0x00000020
PF_FORKNOEXEC  macro  include/linux/sched.h  1780  #define PF_FORKNOEXEC 0x00000040
PF_MCE_PROCESS  macro  include/linux/sched.h  1781  #define PF_MCE_PROCESS 0x00000080
PF_SUPERPRIV  macro  include/linux/sched.h  1782  #define PF_SUPERPRIV 0x00000100
PF_DUMPCORE  macro  include/linux/sched.h  1783  #define PF_DUMPCORE 0x00000200
PF_SIGNALED  macro  include/linux/sched.h  1784  #define PF_SIGNALED 0x00000400
PF_MEMALLOC  macro  include/linux/sched.h  1785  #define PF_MEMALLOC 0x00000800
PF_NPROC_EXCEEDED  macro  include/linux/sched.h  1786  #define PF_NPROC_EXCEEDED 0x00001000
PF_USED_MATH  macro  include/linux/sched.h  1787  #define PF_USED_MATH 0x00002000
PF_NOFREEZE  macro  include/linux/sched.h  1788  #define PF_NOFREEZE 0x00008000
PF_FROZEN  macro  include/linux/sched.h  1789  #define PF_FROZEN 0x00010000
PF_FSTRANS  macro  include/linux/sched.h  1790  #define PF_FSTRANS 0x00020000
PF_KSWAPD  macro  include/linux/sched.h  1791  #define PF_KSWAPD 0x00040000
PF_LESS_THROTTLE  macro  include/linux/sched.h  1792  #define PF_LESS_THROTTLE 0x00100000
PF_KTHREAD  macro  include/linux/sched.h  1793  #define PF_KTHREAD 0x00200000
PF_RANDOMIZE  macro  include/linux/sched.h  1794  #define PF_RANDOMIZE 0x00400000
PF_SWAPWRITE  macro  include/linux/sched.h  1795  #define PF_SWAPWRITE 0x00800000
PF_SPREAD_PAGE  macro  include/linux/sched.h  1796  #define PF_SPREAD_PAGE 0x01000000
PF_SPREAD_SLAB  macro  include/linux/sched.h  1797  #define PF_SPREAD_SLAB 0x02000000
PF_THREAD_BOUND  macro  include/linux/sched.h  1798  #define PF_THREAD_BOUND 0x04000000
PF_MCE_EARLY  macro  include/linux/sched.h  1799  #define PF_MCE_EARLY 0x08000000
PF_MEMPOLICY  macro  include/linux/sched.h  1800  #define PF_MEMPOLICY 0x10000000
PF_MUTEX_TESTER  macro  include/linux/sched.h  1801  #define PF_MUTEX_TESTER 0x20000000
PF_FREEZER_SKIP  macro  include/linux/sched.h  1802  #define PF_FREEZER_SKIP 0x40000000
clear_stopped_child_used_math  macro  include/linux/sched.h  1815  #define clear_stopped_child_used_math(child) do { (child)->flags &= ~PF_USED_MATH; } while (0)
set_stopped_child_used_math  macro  include/linux/sched.h  1816  #define set_stopped_child_used_math(child) do { (child)->flags |= PF_USED_MATH; } while (0)
clear_used_math  macro  include/linux/sched.h  1817  #define clear_used_math() clear_stopped_child_used_math(current)
set_used_math  macro  include/linux/sched.h  1818  #define set_used_math() set_stopped_child_used_math(current)
conditional_stopped_child_used_math  macro  include/linux/sched.h  1819  #define conditional_stopped_child_used_math(condition,child) do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= (condition) ? PF_USED_MATH : 0; } while (0)
conditional_used_math  macro  include/linux/sched.h  1821  #define conditional_used_math(condition) conditional_stopped_child_used_math(condition, current)
copy_to_stopped_child_used_math  macro  include/linux/sched.h  1823  #define copy_to_stopped_child_used_math(child) do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= current->flags & PF_USED_MATH; } while (0)
tsk_used_math  macro  include/linux/sched.h  1826  #define tsk_used_math(p) ((p)->flags & PF_USED_MATH)
used_math  macro  include/linux/sched.h  1827  #define used_math() tsk_used_math(current)
JOBCTL_STOP_SIGMASK  macro  include/linux/sched.h  1832  #define JOBCTL_STOP_SIGMASK 0xffff
JOBCTL_STOP_DEQUEUED_BIT  macro  include/linux/sched.h  1834  #define JOBCTL_STOP_DEQUEUED_BIT 16
JOBCTL_STOP_PENDING_BIT  macro  include/linux/sched.h  1835  #define JOBCTL_STOP_PENDING_BIT 17
JOBCTL_STOP_CONSUME_BIT  macro  include/linux/sched.h  1836  #define JOBCTL_STOP_CONSUME_BIT 18
JOBCTL_TRAP_STOP_BIT  macro  include/linux/sched.h  1837  #define JOBCTL_TRAP_STOP_BIT 19
JOBCTL_TRAP_NOTIFY_BIT  macro  include/linux/sched.h  1838  #define JOBCTL_TRAP_NOTIFY_BIT 20
JOBCTL_TRAPPING_BIT  macro  include/linux/sched.h  1839  #define JOBCTL_TRAPPING_BIT 21
JOBCTL_LISTENING_BIT  macro  include/linux/sched.h  1840  #define JOBCTL_LISTENING_BIT 22
JOBCTL_STOP_DEQUEUED  macro  include/linux/sched.h  1842  #define JOBCTL_STOP_DEQUEUED (1 << JOBCTL_STOP_DEQUEUED_BIT)
JOBCTL_STOP_PENDING  macro  include/linux/sched.h  1843  #define JOBCTL_STOP_PENDING (1 << JOBCTL_STOP_PENDING_BIT)
JOBCTL_STOP_CONSUME  macro  include/linux/sched.h  1844  #define JOBCTL_STOP_CONSUME (1 << JOBCTL_STOP_CONSUME_BIT)
JOBCTL_TRAP_STOP  macro  include/linux/sched.h  1845  #define JOBCTL_TRAP_STOP (1 << JOBCTL_TRAP_STOP_BIT)
JOBCTL_TRAP_NOTIFY  macro  include/linux/sched.h  1846  #define JOBCTL_TRAP_NOTIFY (1 << JOBCTL_TRAP_NOTIFY_BIT)
JOBCTL_TRAPPING  macro  include/linux/sched.h  1847  #define JOBCTL_TRAPPING (1 << JOBCTL_TRAPPING_BIT)
JOBCTL_LISTENING  macro  include/linux/sched.h  1848  #define JOBCTL_LISTENING (1 << JOBCTL_LISTENING_BIT)
JOBCTL_TRAP_MASK  macro  include/linux/sched.h  1850  #define JOBCTL_TRAP_MASK (JOBCTL_TRAP_STOP | JOBCTL_TRAP_NOTIFY)
JOBCTL_PENDING_MASK  macro  include/linux/sched.h  1851  #define JOBCTL_PENDING_MASK (JOBCTL_STOP_PENDING | JOBCTL_TRAP_MASK)
task_set_jobctl_pending  prototype  include/linux/sched.h  1853  extern bool task_set_jobctl_pending(struct task_struct *task,unsigned int mask);
task_clear_jobctl_trapping  prototype  include/linux/sched.h  1855  extern void task_clear_jobctl_trapping(struct task_struct *task);
task_clear_jobctl_pending  prototype  include/linux/sched.h  1856  extern void task_clear_jobctl_pending(struct task_struct *task,unsigned int mask);
RCU_READ_UNLOCK_BLOCKED  macro  include/linux/sched.h  1861  #define RCU_READ_UNLOCK_BLOCKED (1 << 0)
RCU_READ_UNLOCK_NEED_QS  macro  include/linux/sched.h  1862  #define RCU_READ_UNLOCK_NEED_QS (1 << 1)
rcu_copy_process  function  include/linux/sched.h  1879  static inline void rcu_copy_process(struct task_struct *p)
do_set_cpus_allowed  function  include/linux/sched.h  1892  static inline void do_set_cpus_allowed(struct task_struct *p,const struct cpumask *new_mask)
set_cpus_allowed_ptr  function  include/linux/sched.h  1896  static inline int set_cpus_allowed_ptr(struct task_struct *p,const struct cpumask *new_mask)
calc_load_enter_idle  function  include/linux/sched.h  1909  static inline void calc_load_enter_idle(void) { }
calc_load_exit_idle  function  include/linux/sched.h  1910  static inline void calc_load_exit_idle(void) { }
set_cpus_allowed  function  include/linux/sched.h  1914  static inline int set_cpus_allowed(struct task_struct *p,cpumask_t new_mask)
sched_clock  prototype  include/linux/sched.h  1928  extern unsigned long long notrace sched_clock(void);
cpu_clock  prototype  include/linux/sched.h  1932  extern u64 cpu_clock(int cpu);
local_clock  prototype  include/linux/sched.h  1933  extern u64 local_clock(void);
sched_clock_cpu  prototype  include/linux/sched.h  1934  extern u64 sched_clock_cpu(int cpu);
sched_clock_init  prototype  include/linux/sched.h  1937  extern void sched_clock_init(void);
sched_clock_tick  prototype  include/linux/sched.h  1960  extern void sched_clock_tick(void);
sched_clock_idle_sleep_event  prototype  include/linux/sched.h  1988  extern void sched_clock_idle_sleep_event(void);
sched_clock_idle_wakeup_event  prototype  include/linux/sched.h  1989  extern void sched_clock_idle_wakeup_event(u64 delta_ns);
enable_sched_clock_irqtime  function  include/linux/sched.h  1974  static inline void enable_sched_clock_irqtime(void) {}
disable_sched_clock_irqtime  function  include/linux/sched.h  1975  static inline void disable_sched_clock_irqtime(void) {}
task_sched_runtime  prototype  include/linux/sched.h  1979  task_sched_runtime(struct task_struct *task);
sched_exec  macro  include/linux/sched.h  1985  #define sched_exec() {}
idle_task_exit  function  include/linux/sched.h  1994  static inline void idle_task_exit(void) {}
wake_up_idle_cpu  function  include/linux/sched.h  2000  static inline void wake_up_idle_cpu(int cpu) { }
sched_tunable_scaling  enum  include/linux/sched.h  2008  enum sched_tunable_scaling { SCHED_TUNABLESCALING_NONE, SCHED_TUNABLESCALING_LOG, SCHED_TUNABLESCALING_LINEAR, SCHED_TUNABLESCALING_END, };
sched_proc_update_handler  prototype  include/linux/sched.h  2023  int sched_proc_update_handler(struct ctl_table *table,int write,void __user *buffer, size_t *length,loff_t *ppos);
get_sysctl_timer_migration  function  include/linux/sched.h  2033  static inline unsigned int get_sysctl_timer_migration(void)
sched_rt_handler  prototype  include/linux/sched.h  2041  int sched_rt_handler(struct ctl_table *table,int write,void __user *buffer, size_t *lenp,loff_t *ppos);
sched_autogroup_create_attach  function  include/linux/sched.h  2057  static inline void sched_autogroup_create_attach(struct task_struct *p) { }
sched_autogroup_detach  function  include/linux/sched.h  2058  static inline void sched_autogroup_detach(struct task_struct *p) { }
sched_autogroup_fork  function  include/linux/sched.h  2059  static inline void sched_autogroup_fork(struct signal_struct *sig) { }
sched_autogroup_exit  function  include/linux/sched.h  2060  static inline void sched_autogroup_exit(struct signal_struct *sig) { }
proc_sched_autogroup_show_task  prototype  include/linux/sched.h  2053  extern void proc_sched_autogroup_show_task(struct task_struct *p,struct seq_file *m);
proc_sched_autogroup_set_nice  prototype  include/linux/sched.h  2054  extern int proc_sched_autogroup_set_nice(struct task_struct *p,int nice);
rt_mutex_getprio  function  include/linux/sched.h  2076  static inline int rt_mutex_getprio(struct task_struct *p)
rt_mutex_setprio  prototype  include/linux/sched.h  2069  extern void rt_mutex_setprio(struct task_struct *p,int prio);
rt_mutex_adjust_pi  macro  include/linux/sched.h  2080  # define rt_mutex_adjust_pi(p) do { } while (0)
tsk_is_pi_blocked  function  include/linux/sched.h  2081  static inline bool tsk_is_pi_blocked(struct task_struct *tsk)
yield_to  prototype  include/linux/sched.h  2087  extern bool yield_to(struct task_struct *p,bool preempt);
set_user_nice  prototype  include/linux/sched.h  2088  extern void set_user_nice(struct task_struct *p,long nice);
task_prio  prototype  include/linux/sched.h  2089  extern int task_prio(const struct task_struct *p);
task_nice  prototype  include/linux/sched.h  2090  extern int task_nice(const struct task_struct *p);
can_nice  prototype  include/linux/sched.h  2091  extern int can_nice(const struct task_struct *p,const int nice);
task_curr  prototype  include/linux/sched.h  2092  extern int task_curr(const struct task_struct *p);
idle_cpu  prototype  include/linux/sched.h  2093  extern int idle_cpu(int cpu);
sched_setscheduler  prototype  include/linux/sched.h  2094  extern int sched_setscheduler(struct task_struct *,int,const struct sched_param *);
sched_setscheduler_nocheck  prototype  include/linux/sched.h  2096  extern int sched_setscheduler_nocheck(struct task_struct *,int,const struct sched_param *);
idle_task  prototype  include/linux/sched.h  2098  extern struct task_struct *idle_task(int cpu);
is_idle_task  function  include/linux/sched.h  2103  static inline bool is_idle_task(const struct task_struct *p)
curr_task  prototype  include/linux/sched.h  2107  extern struct task_struct *curr_task(int cpu);
set_curr_task  prototype  include/linux/sched.h  2108  extern void set_curr_task(int cpu,struct task_struct *p);
yield  prototype  include/linux/sched.h  2110  void yield(void);
thread_union  union  include/linux/sched.h  2117  union thread_union { struct thread_info thread_info; unsigned long stack[THREAD_SIZE/sizeof(long)]; };
kstack_end  function  include/linux/sched.h  2123  static inline int kstack_end(void *addr)
find_task_by_vpid  prototype  include/linux/sched.h  2150  extern struct task_struct *find_task_by_vpid(pid_t nr);
find_task_by_pid_ns  prototype  include/linux/sched.h  2151  extern struct task_struct *find_task_by_pid_ns(pid_t nr,struct pid_namespace *ns);
__set_special_pids  prototype  include/linux/sched.h  2154  extern void __set_special_pids(struct pid *pid);
alloc_uid  prototype  include/linux/sched.h  2157  extern struct user_struct * alloc_uid(kuid_t);
get_uid  function  include/linux/sched.h  2158  static inline struct user_struct *get_uid(struct user_struct *u)
free_uid  prototype  include/linux/sched.h  2163  extern void free_uid(struct user_struct *);
xtime_update  prototype  include/linux/sched.h  2167  extern void xtime_update(unsigned long ticks);
wake_up_state  prototype  include/linux/sched.h  2169  extern int wake_up_state(struct task_struct *tsk,unsigned int state);
wake_up_process  prototype  include/linux/sched.h  2170  extern int wake_up_process(struct task_struct *tsk);
wake_up_new_task  prototype  include/linux/sched.h  2171  extern void wake_up_new_task(struct task_struct *tsk);
kick_process  function  include/linux/sched.h  2175  static inline void kick_process(struct task_struct *tsk) { }
sched_fork  prototype  include/linux/sched.h  2177  extern void sched_fork(struct task_struct *p);
sched_dead  prototype  include/linux/sched.h  2178  extern void sched_dead(struct task_struct *p);
proc_caches_init  prototype  include/linux/sched.h  2180  extern void proc_caches_init(void);
flush_signals  prototype  include/linux/sched.h  2181  extern void flush_signals(struct task_struct *);
__flush_signals  prototype  include/linux/sched.h  2182  extern void __flush_signals(struct task_struct *);
ignore_signals  prototype  include/linux/sched.h  2183  extern void ignore_signals(struct task_struct *);
flush_signal_handlers  prototype  include/linux/sched.h  2184  extern void flush_signal_handlers(struct task_struct *,int force_default);
dequeue_signal  prototype  include/linux/sched.h  2185  extern int dequeue_signal(struct task_struct *tsk,sigset_t *mask,siginfo_t *info);
dequeue_signal_lock  function  include/linux/sched.h  2187  static inline int dequeue_signal_lock(struct task_struct *tsk,sigset_t *mask,siginfo_t *info)
block_all_signals  prototype  include/linux/sched.h  2199  extern void block_all_signals(int (*notifier)(void *priv),void *priv,sigset_t *mask);
unblock_all_signals  prototype  include/linux/sched.h  2201  extern void unblock_all_signals(void);
release_task  prototype  include/linux/sched.h  2202  extern void release_task(struct task_struct * p);
send_sig_info  prototype  include/linux/sched.h  2203  extern int send_sig_info(int,struct siginfo *,struct task_struct *);
force_sigsegv  prototype  include/linux/sched.h  2204  extern int force_sigsegv(int,struct task_struct *);
force_sig_info  prototype  include/linux/sched.h  2205  extern int force_sig_info(int,struct siginfo *,struct task_struct *);
__kill_pgrp_info  prototype  include/linux/sched.h  2206  extern int __kill_pgrp_info(int sig,struct siginfo *info,struct pid *pgrp);
kill_pid_info  prototype  include/linux/sched.h  2207  extern int kill_pid_info(int sig,struct siginfo *info,struct pid *pid);
kill_pid_info_as_cred  prototype  include/linux/sched.h  2208  extern int kill_pid_info_as_cred(int,struct siginfo *,struct pid *,const struct cred *, u32);
kill_pgrp  prototype  include/linux/sched.h  2210  extern int kill_pgrp(struct pid *pid,int sig,int priv);
kill_pid  prototype  include/linux/sched.h  2211  extern int kill_pid(struct pid *pid,int sig,int priv);
kill_proc_info  prototype  include/linux/sched.h  2212  extern int kill_proc_info(int,struct siginfo *,pid_t);
do_notify_parent  prototype  include/linux/sched.h  2213  extern __must_check bool do_notify_parent(struct task_struct *,int);
__wake_up_parent  prototype  include/linux/sched.h  2214  extern void __wake_up_parent(struct task_struct *p,struct task_struct *parent);
force_sig  prototype  include/linux/sched.h  2215  extern void force_sig(int,struct task_struct *);
send_sig  prototype  include/linux/sched.h  2216  extern int send_sig(int,struct task_struct *,int);
zap_other_threads  prototype  include/linux/sched.h  2217  extern int zap_other_threads(struct task_struct *p);
sigqueue_alloc  prototype  include/linux/sched.h  2218  extern struct sigqueue *sigqueue_alloc(void);
sigqueue_free  prototype  include/linux/sched.h  2219  extern void sigqueue_free(struct sigqueue *);
send_sigqueue  prototype  include/linux/sched.h  2220  extern int send_sigqueue(struct sigqueue *,struct task_struct *,int group);
do_sigaction  prototype  include/linux/sched.h  2221  extern int do_sigaction(int,struct k_sigaction *,struct k_sigaction *);
do_sigaltstack  prototype  include/linux/sched.h  2222  extern int do_sigaltstack(const stack_t __user *,stack_t __user *,unsigned long);
restore_saved_sigmask  function  include/linux/sched.h  2224  static inline void restore_saved_sigmask(void)
sigmask_to_save  function  include/linux/sched.h  2230  static inline sigset_t *sigmask_to_save(void)
kill_cad_pid  function  include/linux/sched.h  2238  static inline int kill_cad_pid(int sig,int priv)
SEND_SIG_NOINFO  macro  include/linux/sched.h  2244  #define SEND_SIG_NOINFO ((struct siginfo *) 0)
SEND_SIG_PRIV  macro  include/linux/sched.h  2245  #define SEND_SIG_PRIV ((struct siginfo *) 1)
SEND_SIG_FORCED  macro  include/linux/sched.h  2246  #define SEND_SIG_FORCED ((struct siginfo *) 2)
on_sig_stack  function  include/linux/sched.h  2251  static inline int on_sig_stack(unsigned long sp)
sas_ss_flags  function  include/linux/sched.h  2262  static inline int sas_ss_flags(unsigned long sp)
mm_alloc  prototype  include/linux/sched.h  2271  extern struct mm_struct * mm_alloc(void);
__mmdrop  prototype  include/linux/sched.h  2274  extern void __mmdrop(struct mm_struct *);
mmdrop  function  include/linux/sched.h  2275  static inline void mmdrop(struct mm_struct * mm)
mmput  prototype  include/linux/sched.h  2282  extern void mmput(struct mm_struct *);
get_task_mm  prototype  include/linux/sched.h  2284  extern struct mm_struct *get_task_mm(struct task_struct *task);
mm_access  prototype  include/linux/sched.h  2290  extern struct mm_struct *mm_access(struct task_struct *task,unsigned int mode);
mm_release  prototype  include/linux/sched.h  2292  extern void mm_release(struct task_struct *,struct mm_struct *);
dup_mm  prototype  include/linux/sched.h  2294  extern struct mm_struct *dup_mm(struct task_struct *tsk);
copy_thread  prototype  include/linux/sched.h  2296  extern int copy_thread(unsigned long,unsigned long,unsigned long,struct task_struct *, struct pt_regs *);
flush_thread  prototype  include/linux/sched.h  2298  extern void flush_thread(void);
exit_thread  prototype  include/linux/sched.h  2299  extern void exit_thread(void);
exit_files  prototype  include/linux/sched.h  2301  extern void exit_files(struct task_struct *);
__cleanup_sighand  prototype  include/linux/sched.h  2302  extern void __cleanup_sighand(struct sighand_struct *);
exit_itimers  prototype  include/linux/sched.h  2304  extern void exit_itimers(struct signal_struct *);
flush_itimer_signals  prototype  include/linux/sched.h  2305  extern void flush_itimer_signals(void);
do_group_exit  prototype  include/linux/sched.h  2307  extern void do_group_exit(int);
daemonize  prototype  include/linux/sched.h  2309  extern void daemonize(const char *,...);
allow_signal  prototype  include/linux/sched.h  2310  extern int allow_signal(int);
disallow_signal  prototype  include/linux/sched.h  2311  extern int disallow_signal(int);
do_execve  prototype  include/linux/sched.h  2313  extern int do_execve(const char *,const char __user * const __user *,const char __user * const __user *, struct pt_regs *);
do_fork  prototype  include/linux/sched.h  2316  extern long do_fork(unsigned long,unsigned long,struct pt_regs *,unsigned long,int __user *,int __user *);
fork_idle  prototype  include/linux/sched.h  2317  struct task_struct *fork_idle(int);
set_task_comm  prototype  include/linux/sched.h  2319  extern void set_task_comm(struct task_struct *tsk,char *from);
get_task_comm  prototype  include/linux/sched.h  2320  extern char *get_task_comm(char *to,struct task_struct *tsk);
scheduler_ipi  function  include/linux/sched.h  2326  static inline void scheduler_ipi(void) { }
wait_task_inactive  function  include/linux/sched.h  2327  static inline unsigned long wait_task_inactive(struct task_struct *p,long match_state)
next_task  macro  include/linux/sched.h  2334  #define next_task(p) list_entry_rcu((p)->tasks.next, struct task_struct, tasks)
for_each_process  macro  include/linux/sched.h  2337  #define for_each_process(p) for (p = &init_task ; (p = next_task(p)) != &init_task ; )
current_is_single_threaded  prototype  include/linux/sched.h  2340  extern bool current_is_single_threaded(void);
do_each_thread  macro  include/linux/sched.h  2346  #define do_each_thread(g,t) for (g = t = &init_task ; (g = t = next_task(g)) != &init_task ; ) do
while_each_thread  macro  include/linux/sched.h  2349  #define while_each_thread(g,t) while ((t = next_thread(t)) != g)
get_nr_threads  function  include/linux/sched.h  2352  static inline int get_nr_threads(struct task_struct *tsk)
thread_group_leader  function  include/linux/sched.h  2357  static inline bool thread_group_leader(struct task_struct *p)
has_group_leader_pid  function  include/linux/sched.h  2368  static inline int has_group_leader_pid(struct task_struct *p)
same_thread_group  function  include/linux/sched.h  2374  int same_thread_group(struct task_struct *p1,struct task_struct *p2)
next_thread  function  include/linux/sched.h  2379  static inline struct task_struct *next_thread(const struct task_struct *p)
thread_group_empty  function  include/linux/sched.h  2385  static inline int thread_group_empty(struct task_struct *p)
delay_group_leader  macro  include/linux/sched.h  2390  #define delay_group_leader(p) (thread_group_leader(p) && !thread_group_empty(p))
task_lock  function  include/linux/sched.h  2403  static inline void task_lock(struct task_struct *p)
task_unlock  function  include/linux/sched.h  2408  static inline void task_unlock(struct task_struct *p)
__lock_task_sighand  prototype  include/linux/sched.h  2413  extern struct sighand_struct *__lock_task_sighand(struct task_struct *tsk,unsigned long *flags);
lock_task_sighand  function  include/linux/sched.h  2416  static inline struct sighand_struct *lock_task_sighand(struct task_struct *tsk,unsigned long *flags)
unlock_task_sighand  function  include/linux/sched.h  2426  static inline void unlock_task_sighand(struct task_struct *tsk,unsigned long *flags)
threadgroup_change_begin  function  include/linux/sched.h  2484  static inline void threadgroup_change_begin(struct task_struct *tsk) {}
threadgroup_change_end  function  include/linux/sched.h  2485  static inline void threadgroup_change_end(struct task_struct *tsk) {}
threadgroup_lock  function  include/linux/sched.h  2486  static inline void threadgroup_lock(struct task_struct *tsk) {}
threadgroup_unlock  function  include/linux/sched.h  2487  static inline void threadgroup_unlock(struct task_struct *tsk) {}
task_thread_info  macro  include/linux/sched.h  2492  #define task_thread_info(task) ((struct thread_info *)(task)->stack)
task_stack_page  macro  include/linux/sched.h  2493  #define task_stack_page(task) ((task)->stack)
setup_thread_stack  function  include/linux/sched.h  2495  static inline void setup_thread_stack(struct task_struct *p,struct task_struct *org)
end_of_stack  function  include/linux/sched.h  2501  static inline unsigned long *end_of_stack(struct task_struct *p)
object_is_on_stack  function  include/linux/sched.h  2508  static inline int object_is_on_stack(void *obj)
thread_info_cache_init  prototype  include/linux/sched.h  2515  extern void thread_info_cache_init(void);
stack_not_used  function  include/linux/sched.h  2518  static inline unsigned long stack_not_used(struct task_struct *p)
set_tsk_thread_flag  function  include/linux/sched.h  2533  static inline void set_tsk_thread_flag(struct task_struct *tsk,int flag)
clear_tsk_thread_flag  function  include/linux/sched.h  2538  static inline void clear_tsk_thread_flag(struct task_struct *tsk,int flag)
test_and_set_tsk_thread_flag  function  include/linux/sched.h  2543  static inline int test_and_set_tsk_thread_flag(struct task_struct *tsk,int flag)
test_and_clear_tsk_thread_flag  function  include/linux/sched.h  2548  static inline int test_and_clear_tsk_thread_flag(struct task_struct *tsk,int flag)
test_tsk_thread_flag  function  include/linux/sched.h  2553  static inline int test_tsk_thread_flag(struct task_struct *tsk,int flag)
set_tsk_need_resched  function  include/linux/sched.h  2558  static inline void set_tsk_need_resched(struct task_struct *tsk)
clear_tsk_need_resched  function  include/linux/sched.h  2563  static inline void clear_tsk_need_resched(struct task_struct *tsk)
test_tsk_need_resched  function  include/linux/sched.h  2568  static inline int test_tsk_need_resched(struct task_struct *tsk)
restart_syscall  function  include/linux/sched.h  2573  static inline int restart_syscall(void)
signal_pending  function  include/linux/sched.h  2579  static inline int signal_pending(struct task_struct *p)
__fatal_signal_pending  function  include/linux/sched.h  2584  static inline int __fatal_signal_pending(struct task_struct *p)
fatal_signal_pending  function  include/linux/sched.h  2589  static inline int fatal_signal_pending(struct task_struct *p)
signal_pending_state  function  include/linux/sched.h  2594  static inline int signal_pending_state(long state,struct task_struct *p)
need_resched  function  include/linux/sched.h  2604  static inline int need_resched(void)
_cond_resched  prototype  include/linux/kernel.h  143  extern int _cond_resched(void);
cond_resched  macro  include/linux/sched.h  2618  #define cond_resched() ({ __might_sleep(__FILE__, __LINE__, 0); _cond_resched(); })
__cond_resched_lock  prototype  include/linux/sched.h  2623  extern int __cond_resched_lock(spinlock_t *lock);
PREEMPT_LOCK_OFFSET  macro  include/linux/sched.h  2628  #define PREEMPT_LOCK_OFFSET 0
cond_resched_lock  macro  include/linux/sched.h  2631  #define cond_resched_lock(lock) ({ __might_sleep(__FILE__, __LINE__, PREEMPT_LOCK_OFFSET); __cond_resched_lock(lock); })
__cond_resched_softirq  prototype  include/linux/sched.h  2636  extern int __cond_resched_softirq(void);
cond_resched_softirq  macro  include/linux/sched.h  2638  #define cond_resched_softirq() ({ __might_sleep(__FILE__, __LINE__, SOFTIRQ_DISABLE_OFFSET); __cond_resched_softirq(); })
spin_needbreak  function  include/linux/sched.h  2648  static inline int spin_needbreak(spinlock_t *lock)
thread_group_cputime  prototype  include/linux/sched.h  2660  void thread_group_cputime(struct task_struct *tsk,struct task_cputime *times);
thread_group_cputime_init  function  include/linux/sched.h  2663  static inline void thread_group_cputime_init(struct signal_struct *sig)
recalc_sigpending_and_wake  prototype  include/linux/sched.h  2674  extern void recalc_sigpending_and_wake(struct task_struct *t);
recalc_sigpending  prototype  include/linux/sched.h  2675  extern void recalc_sigpending(void);
signal_wake_up  prototype  include/linux/sched.h  2677  extern void signal_wake_up(struct task_struct *t,int resume_stopped);
task_cpu  function  include/linux/sched.h  2693  static inline unsigned int task_cpu(const struct task_struct *p)
set_task_cpu  function  include/linux/sched.h  2698  static inline void set_task_cpu(struct task_struct *p,unsigned int cpu)
sched_setaffinity  prototype  include/linux/sched.h  2704  extern long sched_setaffinity(pid_t pid,const struct cpumask *new_mask);
sched_getaffinity  prototype  include/linux/sched.h  2705  extern long sched_getaffinity(pid_t pid,struct cpumask *mask);
normalize_rt_tasks  prototype  include/linux/sched.h  2707  extern void normalize_rt_tasks(void);
sched_create_group  prototype  include/linux/sched.h  2713  extern struct task_group *sched_create_group(struct task_group *parent);
sched_destroy_group  prototype  include/linux/sched.h  2714  extern void sched_destroy_group(struct task_group *tg);
sched_move_task  prototype  include/linux/sched.h  2715  extern void sched_move_task(struct task_struct *tsk);
sched_group_set_shares  prototype  include/linux/sched.h  2717  extern int sched_group_set_shares(struct task_group *tg,unsigned long shares);
sched_group_shares  prototype  include/linux/sched.h  2718  extern unsigned long sched_group_shares(struct task_group *tg);
sched_group_set_rt_runtime  prototype  include/linux/sched.h  2721  extern int sched_group_set_rt_runtime(struct task_group *tg,long rt_runtime_us);
sched_group_rt_runtime  prototype  include/linux/sched.h  2723  extern long sched_group_rt_runtime(struct task_group *tg);
sched_group_set_rt_period  prototype  include/linux/sched.h  2724  extern int sched_group_set_rt_period(struct task_group *tg,long rt_period_us);
sched_group_rt_period  prototype  include/linux/sched.h  2726  extern long sched_group_rt_period(struct task_group *tg);
sched_rt_can_attach  prototype  include/linux/sched.h  2727  extern int sched_rt_can_attach(struct task_group *tg,struct task_struct *tsk);
task_can_switch_user  prototype  include/linux/sched.h  2731  extern int task_can_switch_user(struct user_struct *up,struct task_struct *tsk);
add_rchar  function  include/linux/sched.h  2755  static inline void add_rchar(struct task_struct *tsk,ssize_t amt)
add_wchar  function  include/linux/sched.h  2759  static inline void add_wchar(struct task_struct *tsk,ssize_t amt)
inc_syscr  function  include/linux/sched.h  2763  static inline void inc_syscr(struct task_struct *tsk)
inc_syscw  function  include/linux/sched.h  2767  static inline void inc_syscw(struct task_struct *tsk)
TASK_SIZE_OF  macro  arch/x86/include/asm/processor.h  880  #define TASK_SIZE_OF(child) ((test_tsk_thread_flag(child,TIF_ADDR32)) ? IA32_PAGE_OFFSET : TASK_SIZE_MAX)
mm_update_next_owner  function  include/linux/sched.h  2780  static inline void mm_update_next_owner(struct mm_struct *mm)
mm_init_owner  function  include/linux/sched.h  2784  static inline void mm_init_owner(struct mm_struct *mm,struct task_struct *p)
task_rlimit  function  include/linux/sched.h  2789  static inline unsigned long task_rlimit(const struct task_struct *tsk,unsigned int limit)
task_rlimit_max  function  include/linux/sched.h  2795  static inline unsigned long task_rlimit_max(const struct task_struct *tsk,unsigned int limit)
rlimit  struct  include/linux/resource.h  42  struct rlimit { unsigned long rlim_cur; unsigned long rlim_max; };
rlimit_max  function  include/linux/sched.h  2806  static inline unsigned long rlimit_max(unsigned int limit)
_LINUX_NODE_H_  macro  include/linux/node.h  15  #define _LINUX_NODE_H_
node  struct  include/linux/node.h  21  struct node { struct device dev; struct work_struct node_work; };
register_node  prototype  include/linux/node.h  33  extern int register_node(struct node *,int,struct node *);
unregister_node  prototype  include/linux/node.h  34  extern void unregister_node(struct node *node);
register_one_node  function  include/linux/node.h  50  static inline int register_one_node(int nid)
unregister_one_node  function  include/linux/node.h  54  static inline int unregister_one_node(int nid)
register_cpu_under_node  function  include/linux/node.h  58  static inline int register_cpu_under_node(unsigned int cpu,unsigned int nid)
unregister_cpu_under_node  function  include/linux/node.h  62  static inline int unregister_cpu_under_node(unsigned int cpu,unsigned int nid)
register_mem_sect_under_node  function  include/linux/node.h  66  static inline int register_mem_sect_under_node(struct memory_block *mem_blk,int nid)
unregister_mem_sect_under_nodes  function  include/linux/node.h  71  static inline int unregister_mem_sect_under_nodes(struct memory_block *mem_blk,unsigned long phys_index)
register_hugetlbfs_with_node  function  include/linux/node.h  77  static inline void register_hugetlbfs_with_node(node_registration_func_t reg,node_registration_func_t unreg)
to_node  macro  include/linux/node.h  83  #define to_node(device) container_of(device,struct node,dev)
_LINUX_ATOMIC_H  macro  include/linux/atomic.h  3  #define _LINUX_ATOMIC_H
atomic_add_unless  function  include/linux/atomic.h  15  static inline int atomic_add_unless(atomic_t *v,int a,int u)
atomic_inc_not_zero  macro  include/linux/atomic.h  28  #define atomic_inc_not_zero(v) atomic_add_unless((v),1,0)
atomic_inc_not_zero_hint  function  include/linux/atomic.h  44  static inline int atomic_inc_not_zero_hint(atomic_t *v,int hint)
atomic_inc_unless_negative  function  include/linux/atomic.h  64  static inline int atomic_inc_unless_negative(atomic_t *p)
atomic_dec_unless_positive  function  include/linux/atomic.h  77  static inline int atomic_dec_unless_positive(atomic_t *p)
atomic_or  function  include/linux/atomic.h  90  static inline void atomic_or(int i,atomic_t *v)
_ASM_X86_PAGE_H  macro  arch/x86/include/asm/page.h  2  #define _ASM_X86_PAGE_H
clear_user_page  function  arch/x86/include/asm/page.h  20  static inline void clear_user_page(void *page,unsigned long vaddr,struct page *pg)
copy_user_page  function  arch/x86/include/asm/page.h  26  static inline void copy_user_page(void *to,void *from,unsigned long vaddr,struct page *topage)
__alloc_zeroed_user_highpage  macro  arch/x86/include/asm/page.h  32  #define __alloc_zeroed_user_highpage(movableflags,vma,vaddr) alloc_page_vma(GFP_HIGHUSER | __GFP_ZERO | movableflags, vma, vaddr)
__HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE  macro  arch/x86/include/asm/page.h  34  #define __HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE
__pa  macro  arch/x86/include/asm/page.h  36  #define __pa(x) __phys_addr((unsigned long)(x))
__pa_nodebug  macro  arch/x86/include/asm/page.h  37  #define __pa_nodebug(x) __phys_addr_nodebug((unsigned long)(x))
__pa_symbol  macro  arch/x86/include/asm/page.h  47  #define __pa_symbol(x) __pa(__phys_reloc_hide((unsigned long)(x)))
__va  macro  arch/x86/include/asm/page.h  49  #define __va(x) ((void *)((unsigned long)(x)+PAGE_OFFSET))
__boot_va  macro  arch/x86/include/asm/page.h  51  #define __boot_va(x) __va(x)
__boot_pa  macro  arch/x86/include/asm/page.h  52  #define __boot_pa(x) __pa(x)
virt_to_page  macro  arch/x86/include/asm/page.h  58  #define virt_to_page(kaddr) pfn_to_page(__pa(kaddr) >> PAGE_SHIFT)
pfn_to_kaddr  macro  arch/x86/include/asm/page.h  59  #define pfn_to_kaddr(pfn) __va((pfn) << PAGE_SHIFT)
__virt_addr_valid  prototype  arch/x86/include/asm/page.h  60  extern bool __virt_addr_valid(unsigned long kaddr);
virt_addr_valid  macro  arch/x86/include/asm/page.h  61  #define virt_addr_valid(kaddr) __virt_addr_valid((unsigned long) (kaddr))
__HAVE_ARCH_GATE_AREA  macro  arch/x86/include/asm/page.h  68  #define __HAVE_ARCH_GATE_AREA 1
_LINUX_ERR_H  macro  include/linux/err.h  2  #define _LINUX_ERR_H
MAX_ERRNO  macro  include/linux/err.h  16  #define MAX_ERRNO 4095
IS_ERR_VALUE  macro  include/linux/err.h  20  #define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)
ERR_PTR  function  include/linux/err.h  22  static inline void * __must_check ERR_PTR(long error)
PTR_ERR  function  include/linux/err.h  27  static inline long __must_check PTR_ERR(const void *ptr)
IS_ERR  function  include/linux/err.h  32  static inline long __must_check IS_ERR(const void *ptr)
IS_ERR_OR_NULL  function  include/linux/err.h  37  static inline long __must_check IS_ERR_OR_NULL(const void *ptr)
ERR_CAST  function  include/linux/err.h  49  static inline void * __must_check ERR_CAST(const void *ptr)
PTR_RET  function  include/linux/err.h  55  static inline int __must_check PTR_RET(const void *ptr)
_LINUX_WAIT_H  macro  include/linux/wait.h  2  #define _LINUX_WAIT_H
WNOHANG  macro  include/linux/wait.h  4  #define WNOHANG 0x00000001
WUNTRACED  macro  include/linux/wait.h  5  #define WUNTRACED 0x00000002
WSTOPPED  macro  include/linux/wait.h  6  #define WSTOPPED WUNTRACED
WEXITED  macro  include/linux/wait.h  7  #define WEXITED 0x00000004
WCONTINUED  macro  include/linux/wait.h  8  #define WCONTINUED 0x00000008
WNOWAIT  macro  include/linux/wait.h  9  #define WNOWAIT 0x01000000
__WNOTHREAD  macro  include/linux/wait.h  11  #define __WNOTHREAD 0x20000000
__WALL  macro  include/linux/wait.h  12  #define __WALL 0x40000000
__WCLONE  macro  include/linux/wait.h  13  #define __WCLONE 0x80000000
P_ALL  macro  include/linux/wait.h  16  #define P_ALL 0
P_PID  macro  include/linux/wait.h  17  #define P_PID 1
P_PGID  macro  include/linux/wait.h  18  #define P_PGID 2
default_wake_function  prototype  include/linux/wait.h  29  int default_wake_function(wait_queue_t *wait,unsigned mode,int flags,void *key);
__wait_queue  struct  include/linux/wait.h  31  struct __wait_queue { unsigned int flags; #define WQ_FLAG_EXCLUSIVE 0x01 wait_queue_func_t func; struct list_head task_list; };
wait_bit_key  struct  include/linux/wait.h  39  struct wait_bit_key { void *flags; int bit_nr; };
wait_bit_queue  struct  include/linux/wait.h  44  struct wait_bit_queue { struct wait_bit_key key; wait_queue_t wait; };
__wait_queue_head  struct  include/linux/wait.h  49  struct __wait_queue_head { spinlock_t lock; struct list_head task_list; };
__WAITQUEUE_INITIALIZER  macro  include/linux/wait.h  61  #define __WAITQUEUE_INITIALIZER(name,tsk) { .private	= tsk, .func		= default_wake_function, .task_list	= { NULL, NULL } }
DECLARE_WAITQUEUE  macro  include/linux/wait.h  66  #define DECLARE_WAITQUEUE(name,tsk) wait_queue_t name = __WAITQUEUE_INITIALIZER(name, tsk)
__WAIT_QUEUE_HEAD_INITIALIZER  macro  include/linux/wait.h  69  #define __WAIT_QUEUE_HEAD_INITIALIZER(name) { .lock		= __SPIN_LOCK_UNLOCKED(name.lock), .task_list	= { &(name).task_list, &(name).task_list } }
DECLARE_WAIT_QUEUE_HEAD  macro  include/linux/wait.h  73  #define DECLARE_WAIT_QUEUE_HEAD(name) wait_queue_head_t name = __WAIT_QUEUE_HEAD_INITIALIZER(name)
__WAIT_BIT_KEY_INITIALIZER  macro  include/linux/wait.h  76  #define __WAIT_BIT_KEY_INITIALIZER(word,bit) { .flags = word, .bit_nr = bit, }
__init_waitqueue_head  prototype  include/linux/wait.h  79  extern void __init_waitqueue_head(wait_queue_head_t *q,const char *name,struct lock_class_key *);
init_waitqueue_head  macro  include/linux/wait.h  81  #define init_waitqueue_head(q) do { static struct lock_class_key __key; __init_waitqueue_head((q), #q, &__key); } while (0)
__WAIT_QUEUE_HEAD_INIT_ONSTACK  macro  include/linux/wait.h  89  # define __WAIT_QUEUE_HEAD_INIT_ONSTACK(name) ({ init_waitqueue_head(&name); name; })
DECLARE_WAIT_QUEUE_HEAD_ONSTACK  macro  include/linux/wait.h  94  # define DECLARE_WAIT_QUEUE_HEAD_ONSTACK(name) DECLARE_WAIT_QUEUE_HEAD(name)
init_waitqueue_entry  function  include/linux/wait.h  97  static inline void init_waitqueue_entry(wait_queue_t *q,struct task_struct *p)
init_waitqueue_func_entry  function  include/linux/wait.h  104  static inline void init_waitqueue_func_entry(wait_queue_t *q,wait_queue_func_t func)
waitqueue_active  function  include/linux/wait.h  112  static inline int waitqueue_active(wait_queue_head_t *q)
add_wait_queue  prototype  include/linux/wait.h  117  extern void add_wait_queue(wait_queue_head_t *q,wait_queue_t *wait);
add_wait_queue_exclusive  prototype  include/linux/wait.h  118  extern void add_wait_queue_exclusive(wait_queue_head_t *q,wait_queue_t *wait);
remove_wait_queue  prototype  include/linux/wait.h  119  extern void remove_wait_queue(wait_queue_head_t *q,wait_queue_t *wait);
__add_wait_queue  function  include/linux/wait.h  121  static inline void __add_wait_queue(wait_queue_head_t *head,wait_queue_t *new)
__add_wait_queue_exclusive  function  include/linux/wait.h  129  static inline void __add_wait_queue_exclusive(wait_queue_head_t *q,wait_queue_t *wait)
__add_wait_queue_tail  function  include/linux/wait.h  136  static inline void __add_wait_queue_tail(wait_queue_head_t *head,wait_queue_t *new)
__add_wait_queue_tail_exclusive  function  include/linux/wait.h  142  static inline void __add_wait_queue_tail_exclusive(wait_queue_head_t *q,wait_queue_t *wait)
__remove_wait_queue  function  include/linux/wait.h  149  static inline void __remove_wait_queue(wait_queue_head_t *head,wait_queue_t *old)
__wake_up  prototype  include/linux/wait.h  155  void __wake_up(wait_queue_head_t *q,unsigned int mode,int nr,void *key);
__wake_up_locked_key  prototype  include/linux/wait.h  156  void __wake_up_locked_key(wait_queue_head_t *q,unsigned int mode,void *key);
__wake_up_sync_key  prototype  include/linux/wait.h  157  void __wake_up_sync_key(wait_queue_head_t *q,unsigned int mode,int nr,void *key);
__wake_up_locked  prototype  include/linux/wait.h  159  void __wake_up_locked(wait_queue_head_t *q,unsigned int mode,int nr);
__wake_up_sync  prototype  include/linux/wait.h  160  void __wake_up_sync(wait_queue_head_t *q,unsigned int mode,int nr);
__wake_up_bit  prototype  include/linux/wait.h  161  void __wake_up_bit(wait_queue_head_t *,void *,int);
__wait_on_bit  prototype  include/linux/wait.h  162  int __wait_on_bit(wait_queue_head_t *,struct wait_bit_queue *,int (*)(void *),unsigned);
__wait_on_bit_lock  prototype  include/linux/wait.h  163  int __wait_on_bit_lock(wait_queue_head_t *,struct wait_bit_queue *,int (*)(void *),unsigned);
wake_up_bit  prototype  include/linux/wait.h  164  void wake_up_bit(void *,int);
out_of_line_wait_on_bit  prototype  include/linux/wait.h  165  int out_of_line_wait_on_bit(void *,int,int (*)(void *),unsigned);
out_of_line_wait_on_bit_lock  prototype  include/linux/wait.h  166  int out_of_line_wait_on_bit_lock(void *,int,int (*)(void *),unsigned);
bit_waitqueue  prototype  include/linux/wait.h  167  wait_queue_head_t *bit_waitqueue(void *,int);
wake_up  macro  include/linux/wait.h  169  #define wake_up(x) __wake_up(x,TASK_NORMAL,1,NULL)
wake_up_nr  macro  include/linux/wait.h  170  #define wake_up_nr(x,nr) __wake_up(x,TASK_NORMAL,nr,NULL)
wake_up_all  macro  include/linux/wait.h  171  #define wake_up_all(x) __wake_up(x,TASK_NORMAL,0,NULL)
wake_up_locked  macro  include/linux/wait.h  172  #define wake_up_locked(x) __wake_up_locked((x),TASK_NORMAL,1)
wake_up_all_locked  macro  include/linux/wait.h  173  #define wake_up_all_locked(x) __wake_up_locked((x),TASK_NORMAL,0)
wake_up_interruptible  macro  include/linux/wait.h  175  #define wake_up_interruptible(x) __wake_up(x,TASK_INTERRUPTIBLE,1,NULL)
wake_up_interruptible_nr  macro  include/linux/wait.h  176  #define wake_up_interruptible_nr(x,nr) __wake_up(x,TASK_INTERRUPTIBLE,nr,NULL)
wake_up_interruptible_all  macro  include/linux/wait.h  177  #define wake_up_interruptible_all(x) __wake_up(x,TASK_INTERRUPTIBLE,0,NULL)
wake_up_interruptible_sync  macro  include/linux/wait.h  178  #define wake_up_interruptible_sync(x) __wake_up_sync((x),TASK_INTERRUPTIBLE,1)
wake_up_poll  macro  include/linux/wait.h  183  #define wake_up_poll(x,m) __wake_up(x, TASK_NORMAL, 1, (void *) (m))
wake_up_locked_poll  macro  include/linux/wait.h  185  #define wake_up_locked_poll(x,m) __wake_up_locked_key((x), TASK_NORMAL, (void *) (m))
wake_up_interruptible_poll  macro  include/linux/wait.h  187  #define wake_up_interruptible_poll(x,m) __wake_up(x, TASK_INTERRUPTIBLE, 1, (void *) (m))
wake_up_interruptible_sync_poll  macro  include/linux/wait.h  189  #define wake_up_interruptible_sync_poll(x,m) __wake_up_sync_key((x), TASK_INTERRUPTIBLE, 1, (void *) (m))
__wait_event  macro  include/linux/wait.h  192  #define __wait_event(wq,condition) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_UNINTERRUPTIBLE); if (condition) break; schedule(); } finish_wait(&wq, &__wait); } while (0)
wait_event  macro  include/linux/wait.h  217  #define wait_event(wq,condition) do { if (condition) break; __wait_event(wq, condition); } while (0)
__wait_event_timeout  macro  include/linux/wait.h  224  #define __wait_event_timeout(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_UNINTERRUPTIBLE); if (condition) break; ret = schedule_timeout(ret); if (!ret) break; } finish_wait(&wq, &__wait); } while (0)
wait_event_timeout  macro  include/linux/wait.h  255  #define wait_event_timeout(wq,condition,timeout) ({ long __ret = timeout; if (!(condition)) __wait_event_timeout(wq, condition, __ret); __ret; })
__wait_event_interruptible  macro  include/linux/wait.h  263  #define __wait_event_interruptible(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) break; if (!signal_pending(current)) { schedule(); continue; } ret = -ERESTARTSYS; break; } finish_wait(&wq, &__wait); } while (0)
wait_event_interruptible  macro  include/linux/wait.h  296  #define wait_event_interruptible(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_interruptible(wq, condition, __ret); __ret; })
__wait_event_interruptible_timeout  macro  include/linux/wait.h  304  #define __wait_event_interruptible_timeout(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) break; if (!signal_pending(current)) { ret = schedule_timeout(ret); if (!ret) break; continue; } ret = -ERESTARTSYS; break; } finish_wait(&wq, &__wait); } while (0)
wait_event_interruptible_timeout  macro  include/linux/wait.h  341  #define wait_event_interruptible_timeout(wq,condition,timeout) ({ long __ret = timeout; if (!(condition)) __wait_event_interruptible_timeout(wq, condition, __ret); __ret; })
__wait_event_interruptible_exclusive  macro  include/linux/wait.h  349  #define __wait_event_interruptible_exclusive(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait_exclusive(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) { finish_wait(&wq, &__wait); break; } if (!signal_pending(current)) { schedule(); continue; } ret = -ERESTARTSYS; abort_exclusive_wait(&wq, &__wait, TASK_INTERRUPTIBLE, NULL); break; } } while (0)
wait_event_interruptible_exclusive  macro  include/linux/wait.h  371  #define wait_event_interruptible_exclusive(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_interruptible_exclusive(wq, condition, __ret); __ret; })
__wait_event_interruptible_locked  macro  include/linux/wait.h  380  #define __wait_event_interruptible_locked(wq,condition,exclusive,irq) ({ int __ret = 0; DEFINE_WAIT(__wait); if (exclusive) __wait.flags |= WQ_FLAG_EXCLUSIVE; do { if (likely(list_empty(&__wait.task_list))) __add_wait_queue_tail(&(wq), &__wait); set_current_state(TASK_INTERRUPTIBLE); if (signal_pending(current)) { __ret = -ERESTARTSYS; break; } if (irq) spin_unlock_irq(&(wq).lock); else spin_unlock(&(wq).lock); schedule(); if (irq) spin_lock_irq(&(wq).lock); else spin_lock(&(wq).lock); } while (!(condition)); __remove_wait_queue(&(wq), &__wait); __set_current_state(TASK_RUNNING); __ret; })
wait_event_interruptible_locked  macro  include/linux/wait.h  433  #define wait_event_interruptible_locked(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 0, 0))
wait_event_interruptible_locked_irq  macro  include/linux/wait.h  460  #define wait_event_interruptible_locked_irq(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 0, 1))
wait_event_interruptible_exclusive_locked  macro  include/linux/wait.h  491  #define wait_event_interruptible_exclusive_locked(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 1, 0))
wait_event_interruptible_exclusive_locked_irq  macro  include/linux/wait.h  522  #define wait_event_interruptible_exclusive_locked_irq(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 1, 1))
__wait_event_killable  macro  include/linux/wait.h  528  #define __wait_event_killable(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_KILLABLE); if (condition) break; if (!fatal_signal_pending(current)) { schedule(); continue; } ret = -ERESTARTSYS; break; } finish_wait(&wq, &__wait); } while (0)
wait_event_killable  macro  include/linux/wait.h  561  #define wait_event_killable(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_killable(wq, condition, __ret); __ret; })
sleep_on  prototype  include/linux/wait.h  574  extern void sleep_on(wait_queue_head_t *q);
sleep_on_timeout  prototype  include/linux/wait.h  575  extern long sleep_on_timeout(wait_queue_head_t *q,signed long timeout);
interruptible_sleep_on  prototype  include/linux/wait.h  577  extern void interruptible_sleep_on(wait_queue_head_t *q);
interruptible_sleep_on_timeout  prototype  include/linux/wait.h  578  extern long interruptible_sleep_on_timeout(wait_queue_head_t *q,signed long timeout);
prepare_to_wait  prototype  include/linux/wait.h  584  void prepare_to_wait(wait_queue_head_t *q,wait_queue_t *wait,int state);
prepare_to_wait_exclusive  prototype  include/linux/wait.h  585  void prepare_to_wait_exclusive(wait_queue_head_t *q,wait_queue_t *wait,int state);
finish_wait  prototype  include/linux/wait.h  586  void finish_wait(wait_queue_head_t *q,wait_queue_t *wait);
abort_exclusive_wait  prototype  include/linux/wait.h  587  void abort_exclusive_wait(wait_queue_head_t *q,wait_queue_t *wait,unsigned int mode, void *key);
autoremove_wake_function  prototype  include/linux/wait.h  589  int autoremove_wake_function(wait_queue_t *wait,unsigned mode,int sync,void *key);
wake_bit_function  prototype  include/linux/wait.h  590  int wake_bit_function(wait_queue_t *wait,unsigned mode,int sync,void *key);
DEFINE_WAIT_FUNC  macro  include/linux/wait.h  592  #define DEFINE_WAIT_FUNC(name,function) wait_queue_t name = { .private	= current, .func		= function, .task_list	= LIST_HEAD_INIT((name).task_list), }
DEFINE_WAIT  macro  include/linux/wait.h  599  #define DEFINE_WAIT(name) DEFINE_WAIT_FUNC(name,autoremove_wake_function)
DEFINE_WAIT_BIT  macro  include/linux/wait.h  601  #define DEFINE_WAIT_BIT(name,word,bit) struct wait_bit_queue name = { .key = __WAIT_BIT_KEY_INITIALIZER(word, bit), .wait	= { .private	= current, .func		= wake_bit_function, .task_list	= LIST_HEAD_INIT((name).wait.task_list), }, }
init_wait  macro  include/linux/wait.h  612  #define init_wait(wait) do { (wait)->private = current; (wait)->func = autoremove_wake_function; INIT_LIST_HEAD(&(wait)->task_list); (wait)->flags = 0; } while (0)
wait_on_bit  function  include/linux/wait.h  634  static inline int wait_on_bit(void *word,int bit,int (*action)(void *), unsigned mode)
wait_on_bit_lock  function  include/linux/wait.h  658  static inline int wait_on_bit_lock(void *word,int bit,int (*action)(void *), unsigned mode)
_LINUX_KERNEL_H  macro  include/linux/kernel.h  2  #define _LINUX_KERNEL_H
__ALIGN_KERNEL  macro  include/linux/kernel.h  9  #define __ALIGN_KERNEL(x,a) __ALIGN_KERNEL_MASK(x,(typeof(x))(a) - 1)
__ALIGN_KERNEL_MASK  macro  include/linux/kernel.h  10  #define __ALIGN_KERNEL_MASK(x,mask) (((x) + (mask)) & ~(mask))
USHRT_MAX  macro  include/linux/kernel.h  26  #define USHRT_MAX ((u16)(~0U))
SHRT_MAX  macro  include/linux/kernel.h  27  #define SHRT_MAX ((s16)(USHRT_MAX>>1))
SHRT_MIN  macro  include/linux/kernel.h  28  #define SHRT_MIN ((s16)(-SHRT_MAX - 1))
INT_MAX  macro  include/linux/kernel.h  29  #define INT_MAX ((int)(~0U>>1))
INT_MIN  macro  include/linux/kernel.h  30  #define INT_MIN (-INT_MAX - 1)
UINT_MAX  macro  include/linux/kernel.h  31  #define UINT_MAX (~0U)
LONG_MAX  macro  include/linux/kernel.h  32  #define LONG_MAX ((long)(~0UL>>1))
LONG_MIN  macro  include/linux/kernel.h  33  #define LONG_MIN (-LONG_MAX - 1)
ULONG_MAX  macro  include/linux/kernel.h  34  #define ULONG_MAX (~0UL)
LLONG_MAX  macro  include/linux/kernel.h  35  #define LLONG_MAX ((long long)(~0ULL>>1))
LLONG_MIN  macro  include/linux/kernel.h  36  #define LLONG_MIN (-LLONG_MAX - 1)
ULLONG_MAX  macro  include/linux/kernel.h  37  #define ULLONG_MAX (~0ULL)
SIZE_MAX  macro  include/linux/kernel.h  38  #define SIZE_MAX (~(size_t)0)
STACK_MAGIC  macro  include/linux/kernel.h  40  #define STACK_MAGIC 0xdeadbeef
REPEAT_BYTE  macro  include/linux/kernel.h  42  #define REPEAT_BYTE(x) ((~0ul / 0xff) * (x))
__ALIGN_MASK  macro  include/linux/kernel.h  45  #define __ALIGN_MASK(x,mask) __ALIGN_KERNEL_MASK((x),(mask))
PTR_ALIGN  macro  include/linux/kernel.h  46  #define PTR_ALIGN(p,a) ((typeof(p))ALIGN((unsigned long)(p),(a)))
IS_ALIGNED  macro  include/linux/kernel.h  47  #define IS_ALIGNED(x,a) (((x) & ((typeof(x))(a) - 1)) == 0)
ARRAY_SIZE  macro  include/linux/kernel.h  49  #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]) + __must_be_array(arr))
__round_mask  macro  include/linux/kernel.h  57  #define __round_mask(x,y) ((__typeof__(x))((y)-1))
round_up  macro  include/linux/kernel.h  58  #define round_up(x,y) ((((x)-1) | __round_mask(x,y))+1)
round_down  macro  include/linux/kernel.h  59  #define round_down(x,y) ((x) & ~__round_mask(x,y))
FIELD_SIZEOF  macro  include/linux/kernel.h  61  #define FIELD_SIZEOF(t,f) (sizeof(((t*)0)->f))
DIV_ROUND_UP  macro  include/linux/kernel.h  62  #define DIV_ROUND_UP(n,d) (((n) + (d) - 1) / (d))
DIV_ROUND_UP_ULL  macro  include/linux/kernel.h  63  #define DIV_ROUND_UP_ULL(ll,d) ({ unsigned long long _tmp = (ll)+(d)-1; do_div(_tmp, d); _tmp; })
DIV_ROUND_UP_SECTOR_T  macro  include/linux/kernel.h  69  # define DIV_ROUND_UP_SECTOR_T(ll,d) DIV_ROUND_UP(ll,d)
roundup  macro  include/linux/kernel.h  73  #define roundup(x,y) ( { const typeof(y) __y = y; (((x) + (__y - 1)) / __y) * __y; } )
rounddown  macro  include/linux/kernel.h  79  #define rounddown(x,y) ( { typeof(x) __x = (x); __x - (__x % (y)); } )
DIV_ROUND_CLOSEST  macro  include/linux/kernel.h  85  #define DIV_ROUND_CLOSEST(x,divisor)( { typeof(divisor) __divisor = divisor; (((x) + ((__divisor) / 2)) / (__divisor)); } )
mult_frac  macro  include/linux/kernel.h  96  #define mult_frac(x,numer,denom)( { typeof(x) quot = (x) / (denom); typeof(x) rem  = (x) % (denom); (quot * (numer)) + ((rem * (numer)) / (denom)); } )
_RET_IP_  macro  include/linux/kernel.h  105  #define _RET_IP_ (unsigned long)__builtin_return_address(0)
_THIS_IP_  macro  include/linux/kernel.h  106  #define _THIS_IP_ ({ __label__ __here; __here: (unsigned long)&&__here; })
sector_div  macro  include/linux/kernel.h  112  # define sector_div(n,b)( { int _res; _res = (n) % (b); (n) /= (b); _res; } )
upper_32_bits  macro  include/linux/kernel.h  130  #define upper_32_bits(n) ((u32)(((n) >> 16) >> 16))
lower_32_bits  macro  include/linux/kernel.h  136  #define lower_32_bits(n) ((u32)(n))
might_resched  macro  include/linux/kernel.h  146  # define might_resched() do { } while (0)
__might_sleep  function  include/linux/kernel.h  164  static inline void __might_sleep(const char *file,int line,int preempt_offset) { }
might_sleep  macro  include/linux/kernel.h  166  # define might_sleep() do { might_resched(); } while (0)
might_sleep_if  macro  include/linux/kernel.h  169  #define might_sleep_if(cond) do { if (cond) might_sleep(); } while (0)
abs  macro  include/linux/kernel.h  177  #define abs(x) ({ long ret; if (sizeof(x) == sizeof(long)) { long __x = (x); ret = (__x < 0) ? -__x : __x; } else { int __x = (x); ret = (__x < 0) ? -__x : __x; } ret; })
abs64  macro  include/linux/kernel.h  189  #define abs64(x) ({ s64 __x = (x); (__x < 0) ? -__x : __x; })
might_fault  function  include/linux/kernel.h  197  static inline void might_fault(void)
oops_enter  prototype  include/linux/kernel.h  208  extern void oops_enter(void);
oops_exit  prototype  include/linux/kernel.h  209  extern void oops_exit(void);
print_oops_end_marker  prototype  include/linux/kernel.h  210  void print_oops_end_marker(void);
oops_may_print  prototype  include/linux/kernel.h  211  extern int oops_may_print(void);
_kstrtoul  prototype  include/linux/kernel.h  218  int __must_check _kstrtoul(const char *s,unsigned int base,unsigned long *res);
_kstrtol  prototype  include/linux/kernel.h  219  int __must_check _kstrtol(const char *s,unsigned int base,long *res);
kstrtoull  prototype  include/linux/kernel.h  221  int __must_check kstrtoull(const char *s,unsigned int base,unsigned long long *res);
kstrtoll  prototype  include/linux/kernel.h  222  int __must_check kstrtoll(const char *s,unsigned int base,long long *res);
kstrtoul  function  include/linux/kernel.h  223  static inline int __must_check kstrtoul(const char *s,unsigned int base,unsigned long *res)
kstrtol  function  include/linux/kernel.h  236  static inline int __must_check kstrtol(const char *s,unsigned int base,long *res)
kstrtouint  prototype  include/linux/kernel.h  249  int __must_check kstrtouint(const char *s,unsigned int base,unsigned int *res);
kstrtoint  prototype  include/linux/kernel.h  250  int __must_check kstrtoint(const char *s,unsigned int base,int *res);
kstrtou64  function  include/linux/kernel.h  252  static inline int __must_check kstrtou64(const char *s,unsigned int base,u64 *res)
kstrtos64  function  include/linux/kernel.h  257  static inline int __must_check kstrtos64(const char *s,unsigned int base,s64 *res)
kstrtou32  function  include/linux/kernel.h  262  static inline int __must_check kstrtou32(const char *s,unsigned int base,u32 *res)
kstrtos32  function  include/linux/kernel.h  267  static inline int __must_check kstrtos32(const char *s,unsigned int base,s32 *res)
kstrtou16  prototype  include/linux/kernel.h  272  int __must_check kstrtou16(const char *s,unsigned int base,u16 *res);
kstrtos16  prototype  include/linux/kernel.h  273  int __must_check kstrtos16(const char *s,unsigned int base,s16 *res);
kstrtou8  prototype  include/linux/kernel.h  274  int __must_check kstrtou8(const char *s,unsigned int base,u8 *res);
kstrtos8  prototype  include/linux/kernel.h  275  int __must_check kstrtos8(const char *s,unsigned int base,s8 *res);
kstrtoull_from_user  prototype  include/linux/kernel.h  277  int __must_check kstrtoull_from_user(const char __user *s,size_t count,unsigned int base,unsigned long long *res);
kstrtoll_from_user  prototype  include/linux/kernel.h  278  int __must_check kstrtoll_from_user(const char __user *s,size_t count,unsigned int base,long long *res);
kstrtoul_from_user  prototype  include/linux/kernel.h  279  int __must_check kstrtoul_from_user(const char __user *s,size_t count,unsigned int base,unsigned long *res);
kstrtol_from_user  prototype  include/linux/kernel.h  280  int __must_check kstrtol_from_user(const char __user *s,size_t count,unsigned int base,long *res);
kstrtouint_from_user  prototype  include/linux/kernel.h  281  int __must_check kstrtouint_from_user(const char __user *s,size_t count,unsigned int base,unsigned int *res);
kstrtoint_from_user  prototype  include/linux/kernel.h  282  int __must_check kstrtoint_from_user(const char __user *s,size_t count,unsigned int base,int *res);
kstrtou16_from_user  prototype  include/linux/kernel.h  283  int __must_check kstrtou16_from_user(const char __user *s,size_t count,unsigned int base,u16 *res);
kstrtos16_from_user  prototype  include/linux/kernel.h  284  int __must_check kstrtos16_from_user(const char __user *s,size_t count,unsigned int base,s16 *res);
kstrtou8_from_user  prototype  include/linux/kernel.h  285  int __must_check kstrtou8_from_user(const char __user *s,size_t count,unsigned int base,u8 *res);
kstrtos8_from_user  prototype  include/linux/kernel.h  286  int __must_check kstrtos8_from_user(const char __user *s,size_t count,unsigned int base,s8 *res);
kstrtou64_from_user  function  include/linux/kernel.h  288  static inline int __must_check kstrtou64_from_user(const char __user *s,size_t count,unsigned int base,u64 *res)
kstrtos64_from_user  function  include/linux/kernel.h  293  static inline int __must_check kstrtos64_from_user(const char __user *s,size_t count,unsigned int base,s64 *res)
kstrtou32_from_user  function  include/linux/kernel.h  298  static inline int __must_check kstrtou32_from_user(const char __user *s,size_t count,unsigned int base,u32 *res)
kstrtos32_from_user  function  include/linux/kernel.h  303  static inline int __must_check kstrtos32_from_user(const char __user *s,size_t count,unsigned int base,s32 *res)
simple_strtoul  prototype  include/linux/kernel.h  310  extern unsigned long simple_strtoul(const char *,char **,unsigned int);
simple_strtol  prototype  include/linux/kernel.h  311  extern long simple_strtol(const char *,char **,unsigned int);
simple_strtoull  prototype  include/linux/kernel.h  312  extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
simple_strtoll  prototype  include/linux/kernel.h  313  extern long long simple_strtoll(const char *,char **,unsigned int);
strict_strtoul  macro  include/linux/kernel.h  314  #define strict_strtoul kstrtoul
strict_strtol  macro  include/linux/kernel.h  315  #define strict_strtol kstrtol
strict_strtoull  macro  include/linux/kernel.h  316  #define strict_strtoull kstrtoull
strict_strtoll  macro  include/linux/kernel.h  317  #define strict_strtoll kstrtoll
num_to_str  prototype  include/linux/kernel.h  319  extern int num_to_str(char *buf,int size,unsigned long long num);
sprintf  prototype  include/linux/kernel.h  323  extern __printf(2,3) int sprintf(char *buf,const char * fmt,...);
vsprintf  prototype  include/linux/kernel.h  324  extern __printf(2,0) int vsprintf(char *buf,const char *,va_list);
snprintf  prototype  include/linux/kernel.h  326  int snprintf(char *buf,size_t size,const char *fmt,...);
vsnprintf  prototype  include/linux/kernel.h  328  int vsnprintf(char *buf,size_t size,const char *fmt,va_list args);
scnprintf  prototype  include/linux/kernel.h  330  int scnprintf(char *buf,size_t size,const char *fmt,...);
vscnprintf  prototype  include/linux/kernel.h  332  int vscnprintf(char *buf,size_t size,const char *fmt,va_list args);
kasprintf  prototype  include/linux/kernel.h  334  char *kasprintf(gfp_t gfp,const char *fmt,...);
kvasprintf  prototype  include/linux/kernel.h  335  extern char *kvasprintf(gfp_t gfp,const char *fmt,va_list args);
sscanf  prototype  include/linux/kernel.h  338  int sscanf(const char *,const char *,...);
vsscanf  prototype  include/linux/kernel.h  340  int vsscanf(const char *,const char *,va_list);
get_option  prototype  include/linux/kernel.h  342  extern int get_option(char **str,int *pint);
get_options  prototype  include/linux/kernel.h  343  extern char *get_options(const char *str,int nints,int *ints);
memparse  prototype  include/linux/kernel.h  344  extern unsigned long long memparse(const char *ptr,char **retptr);
core_kernel_text  prototype  include/linux/kernel.h  346  extern int core_kernel_text(unsigned long addr);
core_kernel_data  prototype  include/linux/kernel.h  347  extern int core_kernel_data(unsigned long addr);
__kernel_text_address  prototype  include/linux/kernel.h  348  extern int __kernel_text_address(unsigned long addr);
kernel_text_address  prototype  include/linux/kernel.h  349  extern int kernel_text_address(unsigned long addr);
func_ptr_is_kernel_text  prototype  include/linux/kernel.h  350  extern int func_ptr_is_kernel_text(void *ptr);
session_of_pgrp  prototype  include/linux/kernel.h  353  extern struct pid *session_of_pgrp(struct pid *pgrp);
int_sqrt  prototype  include/linux/kernel.h  355  unsigned long int_sqrt(unsigned long);
bust_spinlocks  prototype  include/linux/kernel.h  357  extern void bust_spinlocks(int yes);
wake_up_klogd  prototype  include/linux/kernel.h  358  extern void wake_up_klogd(void);
print_tainted  prototype  include/linux/kernel.h  365  extern const char *print_tainted(void);
add_taint  prototype  include/linux/kernel.h  366  extern void add_taint(unsigned flag);
test_taint  prototype  include/linux/kernel.h  367  extern int test_taint(unsigned flag);
get_taint  prototype  include/linux/kernel.h  368  extern unsigned long get_taint(void);
system_states  enum  include/linux/kernel.h  374  extern enum system_states { SYSTEM_BOOTING, SYSTEM_RUNNING, SYSTEM_HALT, SYSTEM_POWER_OFF, SYSTEM_RESTART, } system_state;
system_state  enum  include/linux/kernel.h  374  extern enum system_states { SYSTEM_BOOTING, SYSTEM_RUNNING, SYSTEM_HALT, SYSTEM_POWER_OFF, SYSTEM_RESTART, } system_state;
TAINT_PROPRIETARY_MODULE  macro  include/linux/kernel.h  382  #define TAINT_PROPRIETARY_MODULE 0
TAINT_FORCED_MODULE  macro  include/linux/kernel.h  383  #define TAINT_FORCED_MODULE 1
TAINT_UNSAFE_SMP  macro  include/linux/kernel.h  384  #define TAINT_UNSAFE_SMP 2
TAINT_FORCED_RMMOD  macro  include/linux/kernel.h  385  #define TAINT_FORCED_RMMOD 3
TAINT_MACHINE_CHECK  macro  include/linux/kernel.h  386  #define TAINT_MACHINE_CHECK 4
TAINT_BAD_PAGE  macro  include/linux/kernel.h  387  #define TAINT_BAD_PAGE 5
TAINT_USER  macro  include/linux/kernel.h  388  #define TAINT_USER 6
TAINT_DIE  macro  include/linux/kernel.h  389  #define TAINT_DIE 7
TAINT_OVERRIDDEN_ACPI_TABLE  macro  include/linux/kernel.h  390  #define TAINT_OVERRIDDEN_ACPI_TABLE 8
TAINT_WARN  macro  include/linux/kernel.h  391  #define TAINT_WARN 9
TAINT_CRAP  macro  include/linux/kernel.h  392  #define TAINT_CRAP 10
TAINT_FIRMWARE_WORKAROUND  macro  include/linux/kernel.h  393  #define TAINT_FIRMWARE_WORKAROUND 11
TAINT_OOT_MODULE  macro  include/linux/kernel.h  394  #define TAINT_OOT_MODULE 12
hex_asc_lo  macro  include/linux/kernel.h  397  #define hex_asc_lo(x) hex_asc[((x) & 0x0f)]
hex_asc_hi  macro  include/linux/kernel.h  398  #define hex_asc_hi(x) hex_asc[((x) & 0xf0) >> 4]
hex_byte_pack  function  include/linux/kernel.h  400  static inline char *hex_byte_pack(char *buf,u8 byte)
pack_hex_byte  function  include/linux/kernel.h  407  static inline char * __deprecated pack_hex_byte(char *buf,u8 byte)
hex_to_bin  prototype  include/linux/kernel.h  412  extern int hex_to_bin(char ch);
hex2bin  prototype  include/linux/kernel.h  413  extern int __must_check hex2bin(u8 *dst,const char *src,size_t count);
tracing_off_permanent  function  include/linux/kernel.h  438  static inline void tracing_off_permanent(void) { }
ftrace_dump_mode  enum  include/linux/kernel.h  441  enum ftrace_dump_mode { DUMP_NONE, DUMP_ALL, DUMP_ORIG, };
tracing_on  function  include/linux/kernel.h  538  static inline void tracing_on(void) { }
tracing_off  function  include/linux/kernel.h  539  static inline void tracing_off(void) { }
tracing_is_on  function  include/linux/kernel.h  540  static inline int tracing_is_on(void) { return 0; }
tracing_start  function  include/linux/kernel.h  533  static inline void tracing_start(void) { }
tracing_stop  function  include/linux/kernel.h  534  static inline void tracing_stop(void) { }
ftrace_off_permanent  function  include/linux/kernel.h  535  static inline void ftrace_off_permanent(void) { }
____trace_printk_check_format  function  include/linux/kernel.h  457  void ____trace_printk_check_format(const char *fmt,...)
__trace_printk_check_format  macro  include/linux/kernel.h  460  #define __trace_printk_check_format(fmt,args...) do { if (0) ____trace_printk_check_format(fmt, ##args); } while (0)
trace_printk  function  include/linux/kernel.h  543  trace_printk(const char *fmt,...)
__trace_bprintk  prototype  include/linux/kernel.h  498  int __trace_bprintk(unsigned long ip,const char *fmt,...);
__trace_printk  prototype  include/linux/kernel.h  501  int __trace_printk(unsigned long ip,const char *fmt,...);
trace_dump_stack  function  include/linux/kernel.h  536  static inline void trace_dump_stack(void) { }
ftrace_vprintk  function  include/linux/kernel.h  548  ftrace_vprintk(const char *fmt,va_list ap)
__ftrace_vbprintk  prototype  include/linux/kernel.h  523  __ftrace_vbprintk(unsigned long ip,const char *fmt,va_list ap);
__ftrace_vprintk  prototype  include/linux/kernel.h  526  __ftrace_vprintk(unsigned long ip,const char *fmt,va_list ap);
ftrace_dump  function  include/linux/kernel.h  552  static inline void ftrace_dump(enum ftrace_dump_mode oops_dump_mode) { }
min  macro  include/linux/kernel.h  560  #define min(x,y) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })
max  macro  include/linux/kernel.h  566  #define max(x,y) ({ typeof(x) _max1 = (x); typeof(y) _max2 = (y); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; })
min3  macro  include/linux/kernel.h  572  #define min3(x,y,z) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); typeof(z) _min3 = (z); (void) (&_min1 == &_min2); (void) (&_min1 == &_min3); _min1 < _min2 ? (_min1 < _min3 ? _min1 : _min3) : (_min2 < _min3 ? _min2 : _min3); })
max3  macro  include/linux/kernel.h  581  #define max3(x,y,z) ({ typeof(x) _max1 = (x); typeof(y) _max2 = (y); typeof(z) _max3 = (z); (void) (&_max1 == &_max2); (void) (&_max1 == &_max3); _max1 > _max2 ? (_max1 > _max3 ? _max1 : _max3) : (_max2 > _max3 ? _max2 : _max3); })
min_not_zero  macro  include/linux/kernel.h  595  #define min_not_zero(x,y) ({ typeof(x) __x = (x); typeof(y) __y = (y); __x == 0 ? __y : ((__y == 0) ? __x : min(__x, __y)); })
clamp  macro  include/linux/kernel.h  609  #define clamp(val,min,max) ({ typeof(val) __val = (val); typeof(min) __min = (min); typeof(max) __max = (max); (void) (&__val == &__min); (void) (&__val == &__max); __val = __val < __min ? __min: __val; __val > __max ? __max: __val; })
min_t  macro  include/linux/kernel.h  624  #define min_t(type,x,y) ({ type __min1 = (x); type __min2 = (y); __min1 < __min2 ? __min1: __min2; })
max_t  macro  include/linux/kernel.h  629  #define max_t(type,x,y) ({ type __max1 = (x); type __max2 = (y); __max1 > __max2 ? __max1: __max2; })
clamp_t  macro  include/linux/kernel.h  644  #define clamp_t(type,val,min,max) ({ type __val = (val); type __min = (min); type __max = (max); __val = __val < __min ? __min: __val; __val > __max ? __max: __val; })
clamp_val  macro  include/linux/kernel.h  662  #define clamp_val(val,min,max) ({ typeof(val) __val = (val); typeof(val) __min = (min); typeof(val) __max = (max); __val = __val < __min ? __min: __val; __val > __max ? __max: __val; })
swap  macro  include/linux/kernel.h  673  #define swap(a,b) do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)
container_of  macro  include/linux/kernel.h  683  #define container_of(ptr,type,member) ({ const typeof( ((type *)0)->member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );})
__FUNCTION__  macro  include/linux/kernel.h  688  #define __FUNCTION__ (__func__)
NUMA_BUILD  macro  include/linux/kernel.h  694  #define NUMA_BUILD 0
COMPACTION_BUILD  macro  include/linux/kernel.h  701  #define COMPACTION_BUILD 0
REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD  macro  include/linux/kernel.h  706  # define REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD
do_sysinfo  prototype  include/linux/kernel.h  709  extern int do_sysinfo(struct sysinfo *info);
_ASM_X86_DELAY_H  macro  arch/x86/include/asm/delay.h  2  #define _ASM_X86_DELAY_H
use_tsc_delay  prototype  arch/x86/include/asm/delay.h  6  void use_tsc_delay(void);
_LINUX_SLUB_DEF_H  macro  include/linux/slub_def.h  2  #define _LINUX_SLUB_DEF_H
stat_item  enum  include/linux/slub_def.h  17  enum stat_item { ALLOC_FASTPATH, ALLOC_SLOWPATH, FREE_FASTPATH, FREE_SLOWPATH, FREE_FROZEN, FREE_ADD_PARTIAL, FREE_REMOVE_PARTIAL, ALLOC_FROM_PARTIAL, ALLOC_SLAB, ALLOC_REFILL, ALLOC_NODE_MISMATCH, FREE_SLAB, CPUSLAB_FLUSH, DEACTIVATE_FULL, DEACTIVATE_EMPTY, DEACTIVATE_TO_HEAD, DEACTIVATE_TO_TAIL, DEACTIVATE_REMOTE_FREES, DEACTIVATE_BYPASS, ORDER_FALLBACK, CMPXCHG_DOUBLE_CPU_FAIL, CMPXCHG_DOUBLE_FAIL, CPU_PARTIAL_ALLOC, CPU_PARTIAL_FREE, CPU_PARTIAL_NODE, CPU_PARTIAL_DRAIN, NR_SLUB_STAT_ITEMS };
kmem_cache_cpu  struct  include/linux/slub_def.h  46  struct kmem_cache_cpu { void **freelist; unsigned long tid; struct page *page; struct page *partial; int node; unsigned stat[NR_SLUB_STAT_ITEMS]; };
kmem_cache_node  struct  include/linux/slub_def.h  57  struct kmem_cache_node { spinlock_t list_lock; unsigned long nr_partial; struct list_head partial; atomic_long_t nr_slabs; atomic_long_t total_objects; struct list_head full; };
kmem_cache_order_objects  struct  include/linux/slub_def.h  73  struct kmem_cache_order_objects { unsigned long x; };
kmem_cache  struct  include/linux/slab_def.h  24  struct kmem_cache { unsigned int batchcount; unsigned int limit; unsigned int shared; unsigned int buffer_size; u32 reciprocal_buffer_size; unsigned int flags; unsigned int num; unsigned int gfporder; gfp_t gfpflags; size_t colour; unsigned int colour_off; struct kmem_cache *slabp_cache; unsigned int slab_size; unsigned int dflags; void (*ctor)(void *obj); const char *name; struct list_head next; unsigned long num_active; unsigned long num_allocations; unsigned long high_mark; unsigned long grown; unsigned long reaped; unsigned long errors; unsigned long max_freeable; unsigned long node_allocs; unsigned long node_frees; unsigned long node_overflow; atomic_t allochit; atomic_t allocmiss; atomic_t freehit; atomic_t freemiss; int obj_offset; int obj_size; struct kmem_list3 **nodelists; struct array_cache *array[NR_CPUS]; };
KMALLOC_MIN_SIZE  macro  include/linux/slub_def.h  121  #define KMALLOC_MIN_SIZE 8
KMALLOC_SHIFT_LOW  macro  include/linux/slub_def.h  124  #define KMALLOC_SHIFT_LOW ilog2(KMALLOC_MIN_SIZE)
SLUB_MAX_SIZE  macro  include/linux/slub_def.h  135  #define SLUB_MAX_SIZE (2 * PAGE_SIZE)
SLUB_PAGE_SHIFT  macro  include/linux/slub_def.h  137  #define SLUB_PAGE_SHIFT (PAGE_SHIFT + 2)
SLUB_DMA  macro  include/linux/slub_def.h  143  #define SLUB_DMA (__force gfp_t)0
kmalloc_index  function  include/linux/slub_def.h  156  static __always_inline int kmalloc_index(size_t size)
kmalloc_slab  function  include/linux/slub_def.h  210  static __always_inline struct kmem_cache *kmalloc_slab(size_t size)
__kmalloc  prototype  include/linux/slab_def.h  110  void *__kmalloc(size_t size,gfp_t flags);
kmalloc_order  function  include/linux/slub_def.h  224  kmalloc_order(size_t size,gfp_t flags,unsigned int order)
verify_mem_not_deleted  function  include/linux/slub_def.h  238  static inline bool verify_mem_not_deleted(const void *x)
kmem_cache_alloc_trace  function  include/linux/slab_def.h  118  kmem_cache_alloc_trace(size_t size,struct kmem_cache *cachep,gfp_t flags)
kmalloc_order_trace  function  include/linux/slub_def.h  256  kmalloc_order_trace(size_t size,gfp_t flags,unsigned int order)
kmalloc_large  function  include/linux/slub_def.h  262  static __always_inline void *kmalloc_large(size_t size,gfp_t flags)
kmalloc  function  include/linux/slab_def.h  128  static __always_inline void *kmalloc(size_t size,gfp_t flags)
kmem_cache_alloc_node_trace  function  include/linux/slab_def.h  173  kmem_cache_alloc_node_trace(size_t size,struct kmem_cache *cachep,gfp_t flags,int nodeid)
__LINUX_SLOB_DEF_H  macro  include/linux/slob_def.h  2  #define __LINUX_SLOB_DEF_H
_LINUX_SLAB_DEF_H  macro  include/linux/slab_def.h  2  #define _LINUX_SLAB_DEF_H
cache_sizes  struct  include/linux/slab_def.h  100  struct cache_sizes { size_t cs_size; struct kmem_cache *cs_cachep; struct kmem_cache *cs_dmacachep; };
slab_buffer_size  function  include/linux/slab_def.h  122  static inline size_t slab_buffer_size(struct kmem_cache *cachep)
CACHE  macro  include/linux/slab_def.h  198  #undef CACHE
_LINUX_STAT_H  macro  include/linux/stat.h  2  #define _LINUX_STAT_H
S_IFMT  macro  include/linux/stat.h  12  #define S_IFMT 00170000
S_IFSOCK  macro  include/linux/stat.h  13  #define S_IFSOCK 0140000
S_IFLNK  macro  include/linux/stat.h  14  #define S_IFLNK 0120000
S_IFREG  macro  include/linux/stat.h  15  #define S_IFREG 0100000
S_IFBLK  macro  include/linux/stat.h  16  #define S_IFBLK 0060000
S_IFDIR  macro  include/linux/stat.h  17  #define S_IFDIR 0040000
S_IFCHR  macro  include/linux/stat.h  18  #define S_IFCHR 0020000
S_IFIFO  macro  include/linux/stat.h  19  #define S_IFIFO 0010000
S_ISUID  macro  include/linux/stat.h  20  #define S_ISUID 0004000
S_ISGID  macro  include/linux/stat.h  21  #define S_ISGID 0002000
S_ISVTX  macro  include/linux/stat.h  22  #define S_ISVTX 0001000
S_ISLNK  macro  include/linux/stat.h  24  #define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
S_ISREG  macro  include/linux/stat.h  25  #define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
S_ISDIR  macro  include/linux/stat.h  26  #define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
S_ISCHR  macro  include/linux/stat.h  27  #define S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
S_ISBLK  macro  include/linux/stat.h  28  #define S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
S_ISFIFO  macro  include/linux/stat.h  29  #define S_ISFIFO(m) (((m) & S_IFMT) == S_IFIFO)
S_ISSOCK  macro  include/linux/stat.h  30  #define S_ISSOCK(m) (((m) & S_IFMT) == S_IFSOCK)
S_IRWXU  macro  include/linux/stat.h  32  #define S_IRWXU 00700
S_IRUSR  macro  include/linux/stat.h  33  #define S_IRUSR 00400
S_IWUSR  macro  include/linux/stat.h  34  #define S_IWUSR 00200
S_IXUSR  macro  include/linux/stat.h  35  #define S_IXUSR 00100
S_IRWXG  macro  include/linux/stat.h  37  #define S_IRWXG 00070
S_IRGRP  macro  include/linux/stat.h  38  #define S_IRGRP 00040
S_IWGRP  macro  include/linux/stat.h  39  #define S_IWGRP 00020
S_IXGRP  macro  include/linux/stat.h  40  #define S_IXGRP 00010
S_IRWXO  macro  include/linux/stat.h  42  #define S_IRWXO 00007
S_IROTH  macro  include/linux/stat.h  43  #define S_IROTH 00004
S_IWOTH  macro  include/linux/stat.h  44  #define S_IWOTH 00002
S_IXOTH  macro  include/linux/stat.h  45  #define S_IXOTH 00001
S_IRWXUGO  macro  include/linux/stat.h  50  #define S_IRWXUGO (S_IRWXU|S_IRWXG|S_IRWXO)
S_IALLUGO  macro  include/linux/stat.h  51  #define S_IALLUGO (S_ISUID|S_ISGID|S_ISVTX|S_IRWXUGO)
S_IRUGO  macro  include/linux/stat.h  52  #define S_IRUGO (S_IRUSR|S_IRGRP|S_IROTH)
S_IWUGO  macro  include/linux/stat.h  53  #define S_IWUGO (S_IWUSR|S_IWGRP|S_IWOTH)
S_IXUGO  macro  include/linux/stat.h  54  #define S_IXUGO (S_IXUSR|S_IXGRP|S_IXOTH)
UTIME_NOW  macro  include/linux/stat.h  56  #define UTIME_NOW ((1l << 30) - 1l)
UTIME_OMIT  macro  include/linux/stat.h  57  #define UTIME_OMIT ((1l << 30) - 2l)
kstat  struct  include/linux/stat.h  63  struct kstat { u64 ino; dev_t dev; umode_t mode; unsigned int nlink; kuid_t uid; kgid_t gid; dev_t rdev; loff_t size; struct timespec atime; struct timespec mtime; struct timespec ctime; unsigned long blksize; unsigned long long blocks; };
__LINUX_COMPILER_H  macro  include/linux/compiler.h  2  #define __LINUX_COMPILER_H
__user  macro  include/linux/compiler.h  27  # define __user
__kernel  macro  include/linux/compiler.h  28  # define __kernel
__safe  macro  include/linux/compiler.h  29  # define __safe
__force  macro  include/linux/compiler.h  30  # define __force
__nocast  macro  include/linux/compiler.h  31  # define __nocast
__iomem  macro  include/linux/compiler.h  32  # define __iomem
__acquire  macro  include/linux/compiler.h  38  # define __acquire(x) (void)0
__release  macro  include/linux/compiler.h  39  # define __release(x) (void)0
__cond_lock  macro  include/linux/compiler.h  40  # define __cond_lock(x,c) (c)
__percpu  macro  include/linux/compiler.h  41  # define __percpu
__rcu  macro  include/linux/compiler.h  42  # define __rcu
__chk_user_ptr  macro  include/linux/compiler.h  33  # define __chk_user_ptr(x) (void)0
__chk_io_ptr  macro  include/linux/compiler.h  34  # define __chk_io_ptr(x) (void)0
__builtin_warning  macro  include/linux/compiler.h  35  # define __builtin_warning(x,y...) (1)
notrace  macro  arch/x86/include/asm/linkage.h  7  #define notrace __attribute__((no_instrument_function))
ftrace_branch_data  struct  include/linux/compiler.h  66  struct ftrace_branch_data { const char *func; const char *file; unsigned line; union { unsigned long correct; unsigned long incorrect; }; unsigned long miss; unsigned long hit; }; unsigned long miss_hit[2]; };
ftrace_likely_update  prototype  include/linux/compiler.h  89  void ftrace_likely_update(struct ftrace_branch_data *f,int val,int expect);
likely_notrace  macro  include/linux/compiler.h  91  #define likely_notrace(x) __builtin_expect(!!(x),1)
unlikely_notrace  macro  include/linux/compiler.h  92  #define unlikely_notrace(x) __builtin_expect(!!(x),0)
__branch_check__  macro  include/linux/compiler.h  94  #define __branch_check__(x,expect) ({ int ______r; static struct ftrace_branch_data __attribute__((__aligned__(4))) __attribute__((section("_ftrace_annotated_branch"))) ______f = { .func = __func__, .file = __FILE__, .line = __LINE__, }; ______r = likely_notrace(x); ftrace_likely_update(&______f, ______r, expect); ______r; })
likely  macro  include/linux/compiler.h  146  # define likely(x) __builtin_expect(!!(x),1)
unlikely  macro  include/linux/compiler.h  147  # define unlikely(x) __builtin_expect(!!(x),0)
if  macro  include/linux/compiler.h  126  #define if(cond,...) __trace_if( (cond ,## __VA_ARGS__) )
__trace_if  macro  include/linux/compiler.h  127  #define __trace_if(cond) if (__builtin_constant_p((cond)) ? !!(cond) : ({ int ______r; static struct ftrace_branch_data __attribute__((__aligned__(4))) __attribute__((section("_ftrace_branch"))) ______f = { .func = __func__, .file = __FILE__, .line = __LINE__, }; ______r = !!(cond); ______f.miss_hit[______r]++; ______r; }))
barrier  macro  include/linux/compiler-intel.h  19  #define barrier() __memory_barrier()
unreachable  macro  include/linux/compiler.h  157  # define unreachable() do { } while (1)
RELOC_HIDE  macro  include/linux/compiler-intel.h  21  #define RELOC_HIDE(ptr,off) ({ unsigned long __ptr; __ptr = (unsigned long) (ptr); (typeof(ptr)) (__ptr + (off)); })
__deprecated  macro  include/linux/compiler-gcc.h  60  #define __deprecated __attribute__((deprecated))
__deprecated_for_modules  macro  include/linux/compiler.h  200  #define __deprecated_for_modules
__must_check  macro  include/linux/compiler.h  194  #define __must_check
__used  macro  include/linux/compiler.h  222  # define __used
__maybe_unused  macro  include/linux/compiler-gcc.h  94  #define __maybe_unused __attribute__((unused))
__always_unused  macro  include/linux/compiler-gcc.h  95  #define __always_unused __attribute__((unused))
noinline  macro  include/linux/compiler-gcc.h  92  #define noinline __attribute__((noinline))
noinline_for_stack  macro  include/linux/compiler.h  241  #define noinline_for_stack noinline
__always_inline  macro  include/linux/compiler-gcc.h  112  #define __always_inline inline __attribute__((always_inline))
__attribute_const__  macro  include/linux/compiler-gcc.h  93  #define __attribute_const__ __attribute__((__const__))
__cold  macro  include/linux/compiler.h  273  #define __cold
__section  macro  include/linux/compiler.h  278  # define __section(S) __attribute__ ((__section__(#S)))
__same_type  macro  include/linux/compiler.h  283  # define __same_type(a,b) __builtin_types_compatible_p(typeof(a),typeof(b))
__compiletime_object_size  macro  include/linux/compiler.h  288  # define __compiletime_object_size(obj) -1
__compiletime_warning  macro  include/linux/compiler.h  291  # define __compiletime_warning(message)
__compiletime_error  macro  include/linux/compiler.h  294  # define __compiletime_error(message)
__linktime_error  macro  include/linux/compiler.h  297  # define __linktime_error(message)
ACCESS_ONCE  macro  include/linux/compiler.h  311  #define ACCESS_ONCE(x) (*(volatile typeof(x) *)&(x))
__LINUX_CACHE_H  macro  include/linux/cache.h  2  #define __LINUX_CACHE_H
L1_CACHE_ALIGN  macro  include/linux/cache.h  8  #define L1_CACHE_ALIGN(x) ALIGN(x,L1_CACHE_BYTES)
SMP_CACHE_BYTES  macro  include/linux/cache.h  12  #define SMP_CACHE_BYTES L1_CACHE_BYTES
__read_mostly  macro  arch/x86/include/asm/cache.h  10  #define __read_mostly __attribute__((__section__(".data..read_mostly")))
____cacheline_aligned  macro  include/linux/cache.h  20  #define ____cacheline_aligned __attribute__((__aligned__(SMP_CACHE_BYTES)))
____cacheline_aligned_in_smp  macro  include/linux/cache.h  27  #define ____cacheline_aligned_in_smp
__cacheline_aligned  macro  include/linux/cache.h  32  #define __cacheline_aligned __attribute__((__aligned__(SMP_CACHE_BYTES), __section__(".data..cacheline_aligned")))
__cacheline_aligned_in_smp  macro  arch/x86/include/asm/cache.h  17  #define __cacheline_aligned_in_smp __attribute__((__aligned__(INTERNODE_CACHE_BYTES))) __page_aligned_data
INTERNODE_CACHE_SHIFT  macro  arch/x86/include/asm/cache.h  12  #define INTERNODE_CACHE_SHIFT CONFIG_X86_INTERNODE_CACHE_SHIFT
____cacheline_internodealigned_in_smp  macro  include/linux/cache.h  59  #define ____cacheline_internodealigned_in_smp
cache_line_size  macro  arch/x86/include/asm/processor.h  164  #define cache_line_size() (boot_cpu_data.x86_cache_alignment)
__LINUX_KMOD_H__  macro  include/linux/kmod.h  2  #define __LINUX_KMOD_H__
KMOD_PATH_LEN  macro  include/linux/kmod.h  29  #define KMOD_PATH_LEN 256
__request_module  prototype  include/linux/kmod.h  36  int __request_module(bool wait,const char *name,...);
request_module  function  include/linux/kmod.h  42  static inline int request_module(const char *name,...) { return -ENOSYS; }
request_module_nowait  function  include/linux/kmod.h  43  static inline int request_module_nowait(const char *name,...) { return -ENOSYS; }
try_then_request_module  macro  include/linux/kmod.h  44  #define try_then_request_module(x,mod...) (x)
UMH_NO_WAIT  macro  include/linux/kmod.h  51  #define UMH_NO_WAIT 0
UMH_WAIT_EXEC  macro  include/linux/kmod.h  52  #define UMH_WAIT_EXEC 1
UMH_WAIT_PROC  macro  include/linux/kmod.h  53  #define UMH_WAIT_PROC 2
UMH_KILLABLE  macro  include/linux/kmod.h  54  #define UMH_KILLABLE 4
subprocess_info  struct  include/linux/kmod.h  56  struct subprocess_info { struct work_struct work; struct completion *complete; char *path; char **argv; char **envp; int wait; int retval; int (*init)(struct subprocess_info *info, struct cred *new); void (*cleanup)(struct subprocess_info *info); void *data; };
call_usermodehelper_fns  prototype  include/linux/kmod.h  70  call_usermodehelper_fns(char *path,char **argv,char **envp,int wait,int (*init)(struct subprocess_info *info, struct cred *new),void (*cleanup)(struct subprocess_info *), void *data);
call_usermodehelper  function  include/linux/kmod.h  75  call_usermodehelper(char *path,char **argv,char **envp,int wait)
umh_disable_depth  enum  include/linux/kmod.h  83  enum umh_disable_depth { UMH_ENABLED = 0, UMH_FREEZING, UMH_DISABLED, };
usermodehelper_init  prototype  include/linux/kmod.h  89  extern void usermodehelper_init(void);
__usermodehelper_disable  prototype  include/linux/kmod.h  91  extern int __usermodehelper_disable(enum umh_disable_depth depth);
__usermodehelper_set_disable_depth  prototype  include/linux/kmod.h  92  extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);
usermodehelper_disable  function  include/linux/kmod.h  94  static inline int usermodehelper_disable(void)
usermodehelper_enable  function  include/linux/kmod.h  99  static inline void usermodehelper_enable(void)
usermodehelper_read_trylock  prototype  include/linux/kmod.h  104  extern int usermodehelper_read_trylock(void);
usermodehelper_read_lock_wait  prototype  include/linux/kmod.h  105  extern long usermodehelper_read_lock_wait(long timeout);
usermodehelper_read_unlock  prototype  include/linux/kmod.h  106  extern void usermodehelper_read_unlock(void);
_LINUX_ELF_H  macro  include/linux/elf.h  2  #define _LINUX_ELF_H
PT_NULL  macro  include/linux/elf.h  28  #define PT_NULL 0
PT_LOAD  macro  include/linux/elf.h  29  #define PT_LOAD 1
PT_DYNAMIC  macro  include/linux/elf.h  30  #define PT_DYNAMIC 2
PT_INTERP  macro  include/linux/elf.h  31  #define PT_INTERP 3
PT_NOTE  macro  include/linux/elf.h  32  #define PT_NOTE 4
PT_SHLIB  macro  include/linux/elf.h  33  #define PT_SHLIB 5
PT_PHDR  macro  include/linux/elf.h  34  #define PT_PHDR 6
PT_TLS  macro  include/linux/elf.h  35  #define PT_TLS 7
PT_LOOS  macro  include/linux/elf.h  36  #define PT_LOOS 0x60000000
PT_HIOS  macro  include/linux/elf.h  37  #define PT_HIOS 0x6fffffff
PT_LOPROC  macro  include/linux/elf.h  38  #define PT_LOPROC 0x70000000
PT_HIPROC  macro  include/linux/elf.h  39  #define PT_HIPROC 0x7fffffff
PT_GNU_EH_FRAME  macro  include/linux/elf.h  40  #define PT_GNU_EH_FRAME 0x6474e550
PT_GNU_STACK  macro  include/linux/elf.h  42  #define PT_GNU_STACK (PT_LOOS + 0x474e551)
PN_XNUM  macro  include/linux/elf.h  64  #define PN_XNUM 0xffff
ET_NONE  macro  include/linux/elf.h  67  #define ET_NONE 0
ET_REL  macro  include/linux/elf.h  68  #define ET_REL 1
ET_EXEC  macro  include/linux/elf.h  69  #define ET_EXEC 2
ET_DYN  macro  include/linux/elf.h  70  #define ET_DYN 3
ET_CORE  macro  include/linux/elf.h  71  #define ET_CORE 4
ET_LOPROC  macro  include/linux/elf.h  72  #define ET_LOPROC 0xff00
ET_HIPROC  macro  include/linux/elf.h  73  #define ET_HIPROC 0xffff
DT_NULL  macro  include/linux/elf.h  76  #define DT_NULL 0
DT_NEEDED  macro  include/linux/elf.h  77  #define DT_NEEDED 1
DT_PLTRELSZ  macro  include/linux/elf.h  78  #define DT_PLTRELSZ 2
DT_PLTGOT  macro  include/linux/elf.h  79  #define DT_PLTGOT 3
DT_HASH  macro  include/linux/elf.h  80  #define DT_HASH 4
DT_STRTAB  macro  include/linux/elf.h  81  #define DT_STRTAB 5
DT_SYMTAB  macro  include/linux/elf.h  82  #define DT_SYMTAB 6
DT_RELA  macro  include/linux/elf.h  83  #define DT_RELA 7
DT_RELASZ  macro  include/linux/elf.h  84  #define DT_RELASZ 8
DT_RELAENT  macro  include/linux/elf.h  85  #define DT_RELAENT 9
DT_STRSZ  macro  include/linux/elf.h  86  #define DT_STRSZ 10
DT_SYMENT  macro  include/linux/elf.h  87  #define DT_SYMENT 11
DT_INIT  macro  include/linux/elf.h  88  #define DT_INIT 12
DT_FINI  macro  include/linux/elf.h  89  #define DT_FINI 13
DT_SONAME  macro  include/linux/elf.h  90  #define DT_SONAME 14
DT_RPATH  macro  include/linux/elf.h  91  #define DT_RPATH 15
DT_SYMBOLIC  macro  include/linux/elf.h  92  #define DT_SYMBOLIC 16
DT_REL  macro  include/linux/elf.h  93  #define DT_REL 17
DT_RELSZ  macro  include/linux/elf.h  94  #define DT_RELSZ 18
DT_RELENT  macro  include/linux/elf.h  95  #define DT_RELENT 19
DT_PLTREL  macro  include/linux/elf.h  96  #define DT_PLTREL 20
DT_DEBUG  macro  include/linux/elf.h  97  #define DT_DEBUG 21
DT_TEXTREL  macro  include/linux/elf.h  98  #define DT_TEXTREL 22
DT_JMPREL  macro  include/linux/elf.h  99  #define DT_JMPREL 23
DT_ENCODING  macro  include/linux/elf.h  100  #define DT_ENCODING 32
OLD_DT_LOOS  macro  include/linux/elf.h  101  #define OLD_DT_LOOS 0x60000000
DT_LOOS  macro  include/linux/elf.h  102  #define DT_LOOS 0x6000000d
DT_HIOS  macro  include/linux/elf.h  103  #define DT_HIOS 0x6ffff000
DT_VALRNGLO  macro  include/linux/elf.h  104  #define DT_VALRNGLO 0x6ffffd00
DT_VALRNGHI  macro  include/linux/elf.h  105  #define DT_VALRNGHI 0x6ffffdff
DT_ADDRRNGLO  macro  include/linux/elf.h  106  #define DT_ADDRRNGLO 0x6ffffe00
DT_ADDRRNGHI  macro  include/linux/elf.h  107  #define DT_ADDRRNGHI 0x6ffffeff
DT_VERSYM  macro  include/linux/elf.h  108  #define DT_VERSYM 0x6ffffff0
DT_RELACOUNT  macro  include/linux/elf.h  109  #define DT_RELACOUNT 0x6ffffff9
DT_RELCOUNT  macro  include/linux/elf.h  110  #define DT_RELCOUNT 0x6ffffffa
DT_FLAGS_1  macro  include/linux/elf.h  111  #define DT_FLAGS_1 0x6ffffffb
DT_VERDEF  macro  include/linux/elf.h  112  #define DT_VERDEF 0x6ffffffc
DT_VERDEFNUM  macro  include/linux/elf.h  113  #define DT_VERDEFNUM 0x6ffffffd
DT_VERNEED  macro  include/linux/elf.h  114  #define DT_VERNEED 0x6ffffffe
DT_VERNEEDNUM  macro  include/linux/elf.h  115  #define DT_VERNEEDNUM 0x6fffffff
OLD_DT_HIOS  macro  include/linux/elf.h  116  #define OLD_DT_HIOS 0x6fffffff
DT_LOPROC  macro  include/linux/elf.h  117  #define DT_LOPROC 0x70000000
DT_HIPROC  macro  include/linux/elf.h  118  #define DT_HIPROC 0x7fffffff
STB_LOCAL  macro  include/linux/elf.h  121  #define STB_LOCAL 0
STB_GLOBAL  macro  include/linux/elf.h  122  #define STB_GLOBAL 1
STB_WEAK  macro  include/linux/elf.h  123  #define STB_WEAK 2
STT_NOTYPE  macro  include/linux/elf.h  125  #define STT_NOTYPE 0
STT_OBJECT  macro  include/linux/elf.h  126  #define STT_OBJECT 1
STT_FUNC  macro  include/linux/elf.h  127  #define STT_FUNC 2
STT_SECTION  macro  include/linux/elf.h  128  #define STT_SECTION 3
STT_FILE  macro  include/linux/elf.h  129  #define STT_FILE 4
STT_COMMON  macro  include/linux/elf.h  130  #define STT_COMMON 5
STT_TLS  macro  include/linux/elf.h  131  #define STT_TLS 6
ELF_ST_BIND  macro  include/linux/elf.h  133  #define ELF_ST_BIND(x) ((x) >> 4)
ELF_ST_TYPE  macro  include/linux/elf.h  134  #define ELF_ST_TYPE(x) (((unsigned int) x) & 0xf)
ELF32_ST_BIND  macro  include/linux/elf.h  135  #define ELF32_ST_BIND(x) ELF_ST_BIND(x)
ELF32_ST_TYPE  macro  include/linux/elf.h  136  #define ELF32_ST_TYPE(x) ELF_ST_TYPE(x)
ELF64_ST_BIND  macro  include/linux/elf.h  137  #define ELF64_ST_BIND(x) ELF_ST_BIND(x)
ELF64_ST_TYPE  macro  include/linux/elf.h  138  #define ELF64_ST_TYPE(x) ELF_ST_TYPE(x)
dynamic  struct  include/linux/elf.h  140  typedef struct dynamic{ Elf32_Sword d_tag; union { Elf32_Sword d_val; Elf32_Addr d_ptr; } d_un; } Elf32_Dyn;
Elf32_Dyn  struct  include/linux/elf.h  140  typedef struct dynamic{ Elf32_Sword d_tag; union { Elf32_Sword d_val; Elf32_Addr d_ptr; } d_un; } Elf32_Dyn;
Elf64_Dyn  struct  include/linux/elf.h  148  typedef struct { Elf64_Sxword d_tag; Elf64_Xword d_val; Elf64_Addr d_ptr; } d_un; } Elf64_Dyn;
ELF32_R_SYM  macro  include/linux/elf.h  157  #define ELF32_R_SYM(x) ((x) >> 8)
ELF32_R_TYPE  macro  include/linux/elf.h  158  #define ELF32_R_TYPE(x) ((x) & 0xff)
ELF64_R_SYM  macro  include/linux/elf.h  160  #define ELF64_R_SYM(i) ((i) >> 32)
ELF64_R_TYPE  macro  include/linux/elf.h  161  #define ELF64_R_TYPE(i) ((i) & 0xffffffff)
elf32_rel  struct  include/linux/elf.h  163  typedef struct elf32_rel { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel;
Elf32_Rel  struct  include/linux/elf.h  163  typedef struct elf32_rel { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel;
elf64_rel  struct  include/linux/elf.h  168  typedef struct elf64_rel { Elf64_Addr r_offset; Elf64_Xword r_info; } Elf64_Rel;
Elf64_Rel  struct  include/linux/elf.h  168  typedef struct elf64_rel { Elf64_Addr r_offset; Elf64_Xword r_info; } Elf64_Rel;
elf32_rela  struct  include/linux/elf.h  173  typedef struct elf32_rela{ Elf32_Addr r_offset; Elf32_Word r_info; Elf32_Sword r_addend; } Elf32_Rela;
Elf32_Rela  struct  include/linux/elf.h  173  typedef struct elf32_rela{ Elf32_Addr r_offset; Elf32_Word r_info; Elf32_Sword r_addend; } Elf32_Rela;
elf64_rela  struct  include/linux/elf.h  179  typedef struct elf64_rela { Elf64_Addr r_offset; Elf64_Xword r_info; Elf64_Sxword r_addend; } Elf64_Rela;
Elf64_Rela  struct  include/linux/elf.h  179  typedef struct elf64_rela { Elf64_Addr r_offset; Elf64_Xword r_info; Elf64_Sxword r_addend; } Elf64_Rela;
elf32_sym  struct  include/linux/elf.h  185  typedef struct elf32_sym{ Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned char st_info; unsigned char st_other; Elf32_Half st_shndx; } Elf32_Sym;
Elf32_Sym  struct  include/linux/elf.h  185  typedef struct elf32_sym{ Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned char st_info; unsigned char st_other; Elf32_Half st_shndx; } Elf32_Sym;
elf64_sym  struct  include/linux/elf.h  194  typedef struct elf64_sym { Elf64_Word st_name; unsigned char st_info; unsigned char st_other; Elf64_Half st_shndx; Elf64_Addr st_value; Elf64_Xword st_size; } Elf64_Sym;
Elf64_Sym  struct  include/linux/elf.h  194  typedef struct elf64_sym { Elf64_Word st_name; unsigned char st_info; unsigned char st_other; Elf64_Half st_shndx; Elf64_Addr st_value; Elf64_Xword st_size; } Elf64_Sym;
EI_NIDENT  macro  include/linux/elf.h  204  #define EI_NIDENT 16
elf32_hdr  struct  include/linux/elf.h  206  typedef struct elf32_hdr{ unsigned char e_ident[EI_NIDENT]; Elf32_Half e_type; Elf32_Half e_machine; Elf32_Word e_version; Elf32_Addr e_entry; Elf32_Off e_phoff; Elf32_Off e_shoff; Elf32_Word e_flags; Elf32_Half e_ehsize; Elf32_Half e_phentsize; Elf32_Half e_phnum; Elf32_Half e_shentsize; Elf32_Half e_shnum; Elf32_Half e_shstrndx; } Elf32_Ehdr;
Elf32_Ehdr  struct  include/linux/elf.h  206  typedef struct elf32_hdr{ unsigned char e_ident[EI_NIDENT]; Elf32_Half e_type; Elf32_Half e_machine; Elf32_Word e_version; Elf32_Addr e_entry; Elf32_Off e_phoff; Elf32_Off e_shoff; Elf32_Word e_flags; Elf32_Half e_ehsize; Elf32_Half e_phentsize; Elf32_Half e_phnum; Elf32_Half e_shentsize; Elf32_Half e_shnum; Elf32_Half e_shstrndx; } Elf32_Ehdr;
elf64_hdr  struct  include/linux/elf.h  223  typedef struct elf64_hdr { unsigned char e_ident[EI_NIDENT]; Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry; Elf64_Off e_phoff; Elf64_Off e_shoff; Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; } Elf64_Ehdr;
Elf64_Ehdr  struct  include/linux/elf.h  223  typedef struct elf64_hdr { unsigned char e_ident[EI_NIDENT]; Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry; Elf64_Off e_phoff; Elf64_Off e_shoff; Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; } Elf64_Ehdr;
PF_R  macro  include/linux/elf.h  242  #define PF_R 0x4
PF_W  macro  include/linux/elf.h  243  #define PF_W 0x2
PF_X  macro  include/linux/elf.h  244  #define PF_X 0x1
elf32_phdr  struct  include/linux/elf.h  246  typedef struct elf32_phdr{ Elf32_Word p_type; Elf32_Off p_offset; Elf32_Addr p_vaddr; Elf32_Addr p_paddr; Elf32_Word p_filesz; Elf32_Word p_memsz; Elf32_Word p_flags; Elf32_Word p_align; } Elf32_Phdr;
Elf32_Phdr  struct  include/linux/elf.h  246  typedef struct elf32_phdr{ Elf32_Word p_type; Elf32_Off p_offset; Elf32_Addr p_vaddr; Elf32_Addr p_paddr; Elf32_Word p_filesz; Elf32_Word p_memsz; Elf32_Word p_flags; Elf32_Word p_align; } Elf32_Phdr;
elf64_phdr  struct  include/linux/elf.h  257  typedef struct elf64_phdr { Elf64_Word p_type; Elf64_Word p_flags; Elf64_Off p_offset; Elf64_Addr p_vaddr; Elf64_Addr p_paddr; Elf64_Xword p_filesz; Elf64_Xword p_memsz; Elf64_Xword p_align; } Elf64_Phdr;
Elf64_Phdr  struct  include/linux/elf.h  257  typedef struct elf64_phdr { Elf64_Word p_type; Elf64_Word p_flags; Elf64_Off p_offset; Elf64_Addr p_vaddr; Elf64_Addr p_paddr; Elf64_Xword p_filesz; Elf64_Xword p_memsz; Elf64_Xword p_align; } Elf64_Phdr;
SHT_NULL  macro  include/linux/elf.h  269  #define SHT_NULL 0
SHT_PROGBITS  macro  include/linux/elf.h  270  #define SHT_PROGBITS 1
SHT_SYMTAB  macro  include/linux/elf.h  271  #define SHT_SYMTAB 2
SHT_STRTAB  macro  include/linux/elf.h  272  #define SHT_STRTAB 3
SHT_RELA  macro  include/linux/elf.h  273  #define SHT_RELA 4
SHT_HASH  macro  include/linux/elf.h  274  #define SHT_HASH 5
SHT_DYNAMIC  macro  include/linux/elf.h  275  #define SHT_DYNAMIC 6
SHT_NOTE  macro  include/linux/elf.h  276  #define SHT_NOTE 7
SHT_NOBITS  macro  include/linux/elf.h  277  #define SHT_NOBITS 8
SHT_REL  macro  include/linux/elf.h  278  #define SHT_REL 9
SHT_SHLIB  macro  include/linux/elf.h  279  #define SHT_SHLIB 10
SHT_DYNSYM  macro  include/linux/elf.h  280  #define SHT_DYNSYM 11
SHT_NUM  macro  include/linux/elf.h  281  #define SHT_NUM 12
SHT_LOPROC  macro  include/linux/elf.h  282  #define SHT_LOPROC 0x70000000
SHT_HIPROC  macro  include/linux/elf.h  283  #define SHT_HIPROC 0x7fffffff
SHT_LOUSER  macro  include/linux/elf.h  284  #define SHT_LOUSER 0x80000000
SHT_HIUSER  macro  include/linux/elf.h  285  #define SHT_HIUSER 0xffffffff
SHF_WRITE  macro  include/linux/elf.h  288  #define SHF_WRITE 0x1
SHF_ALLOC  macro  include/linux/elf.h  289  #define SHF_ALLOC 0x2
SHF_EXECINSTR  macro  include/linux/elf.h  290  #define SHF_EXECINSTR 0x4
SHF_MASKPROC  macro  include/linux/elf.h  291  #define SHF_MASKPROC 0xf0000000
SHN_UNDEF  macro  include/linux/elf.h  294  #define SHN_UNDEF 0
SHN_LORESERVE  macro  include/linux/elf.h  295  #define SHN_LORESERVE 0xff00
SHN_LOPROC  macro  include/linux/elf.h  296  #define SHN_LOPROC 0xff00
SHN_HIPROC  macro  include/linux/elf.h  297  #define SHN_HIPROC 0xff1f
SHN_ABS  macro  include/linux/elf.h  298  #define SHN_ABS 0xfff1
SHN_COMMON  macro  include/linux/elf.h  299  #define SHN_COMMON 0xfff2
SHN_HIRESERVE  macro  include/linux/elf.h  300  #define SHN_HIRESERVE 0xffff
elf32_shdr  struct  include/linux/elf.h  302  typedef struct elf32_shdr { Elf32_Word sh_name; Elf32_Word sh_type; Elf32_Word sh_flags; Elf32_Addr sh_addr; Elf32_Off sh_offset; Elf32_Word sh_size; Elf32_Word sh_link; Elf32_Word sh_info; Elf32_Word sh_addralign; Elf32_Word sh_entsize; } Elf32_Shdr;
Elf32_Shdr  struct  include/linux/elf.h  302  typedef struct elf32_shdr { Elf32_Word sh_name; Elf32_Word sh_type; Elf32_Word sh_flags; Elf32_Addr sh_addr; Elf32_Off sh_offset; Elf32_Word sh_size; Elf32_Word sh_link; Elf32_Word sh_info; Elf32_Word sh_addralign; Elf32_Word sh_entsize; } Elf32_Shdr;
elf64_shdr  struct  include/linux/elf.h  315  typedef struct elf64_shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; } Elf64_Shdr;
Elf64_Shdr  struct  include/linux/elf.h  315  typedef struct elf64_shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; } Elf64_Shdr;
EI_MAG0  macro  include/linux/elf.h  328  #define EI_MAG0 0
EI_MAG1  macro  include/linux/elf.h  329  #define EI_MAG1 1
EI_MAG2  macro  include/linux/elf.h  330  #define EI_MAG2 2
EI_MAG3  macro  include/linux/elf.h  331  #define EI_MAG3 3
EI_CLASS  macro  include/linux/elf.h  332  #define EI_CLASS 4
EI_DATA  macro  include/linux/elf.h  333  #define EI_DATA 5
EI_VERSION  macro  include/linux/elf.h  334  #define EI_VERSION 6
EI_OSABI  macro  include/linux/elf.h  335  #define EI_OSABI 7
EI_PAD  macro  include/linux/elf.h  336  #define EI_PAD 8
ELFMAG0  macro  include/linux/elf.h  338  #define ELFMAG0 0x7f
ELFMAG1  macro  include/linux/elf.h  339  #define ELFMAG1 'E'
ELFMAG2  macro  include/linux/elf.h  340  #define ELFMAG2 'L'
ELFMAG3  macro  include/linux/elf.h  341  #define ELFMAG3 'F'
ELFMAG  macro  include/linux/elf.h  342  #define ELFMAG "\177ELF"
SELFMAG  macro  include/linux/elf.h  343  #define SELFMAG 4
ELFCLASSNONE  macro  include/linux/elf.h  345  #define ELFCLASSNONE 0
ELFCLASS32  macro  include/linux/elf.h  346  #define ELFCLASS32 1
ELFCLASS64  macro  include/linux/elf.h  347  #define ELFCLASS64 2
ELFCLASSNUM  macro  include/linux/elf.h  348  #define ELFCLASSNUM 3
ELFDATANONE  macro  include/linux/elf.h  350  #define ELFDATANONE 0
ELFDATA2LSB  macro  include/linux/elf.h  351  #define ELFDATA2LSB 1
ELFDATA2MSB  macro  include/linux/elf.h  352  #define ELFDATA2MSB 2
EV_NONE  macro  include/linux/elf.h  354  #define EV_NONE 0
EV_CURRENT  macro  include/linux/elf.h  355  #define EV_CURRENT 1
EV_NUM  macro  include/linux/elf.h  356  #define EV_NUM 2
ELFOSABI_NONE  macro  include/linux/elf.h  358  #define ELFOSABI_NONE 0
ELFOSABI_LINUX  macro  include/linux/elf.h  359  #define ELFOSABI_LINUX 3
ELF_OSABI  macro  include/linux/elf.h  362  #define ELF_OSABI ELFOSABI_NONE
NT_PRSTATUS  macro  include/linux/elf.h  370  #define NT_PRSTATUS 1
NT_PRFPREG  macro  include/linux/elf.h  371  #define NT_PRFPREG 2
NT_PRPSINFO  macro  include/linux/elf.h  372  #define NT_PRPSINFO 3
NT_TASKSTRUCT  macro  include/linux/elf.h  373  #define NT_TASKSTRUCT 4
NT_AUXV  macro  include/linux/elf.h  374  #define NT_AUXV 6
NT_PRXFPREG  macro  include/linux/elf.h  375  #define NT_PRXFPREG 0x46e62b7f
NT_PPC_VMX  macro  include/linux/elf.h  376  #define NT_PPC_VMX 0x100
NT_PPC_SPE  macro  include/linux/elf.h  377  #define NT_PPC_SPE 0x101
NT_PPC_VSX  macro  include/linux/elf.h  378  #define NT_PPC_VSX 0x102
NT_386_TLS  macro  include/linux/elf.h  379  #define NT_386_TLS 0x200
NT_386_IOPERM  macro  include/linux/elf.h  380  #define NT_386_IOPERM 0x201
NT_X86_XSTATE  macro  include/linux/elf.h  381  #define NT_X86_XSTATE 0x202
NT_S390_HIGH_GPRS  macro  include/linux/elf.h  382  #define NT_S390_HIGH_GPRS 0x300
NT_S390_TIMER  macro  include/linux/elf.h  383  #define NT_S390_TIMER 0x301
NT_S390_TODCMP  macro  include/linux/elf.h  384  #define NT_S390_TODCMP 0x302
NT_S390_TODPREG  macro  include/linux/elf.h  385  #define NT_S390_TODPREG 0x303
NT_S390_CTRS  macro  include/linux/elf.h  386  #define NT_S390_CTRS 0x304
NT_S390_PREFIX  macro  include/linux/elf.h  387  #define NT_S390_PREFIX 0x305
NT_S390_LAST_BREAK  macro  include/linux/elf.h  388  #define NT_S390_LAST_BREAK 0x306
NT_S390_SYSTEM_CALL  macro  include/linux/elf.h  389  #define NT_S390_SYSTEM_CALL 0x307
NT_ARM_VFP  macro  include/linux/elf.h  390  #define NT_ARM_VFP 0x400
elf32_note  struct  include/linux/elf.h  394  typedef struct elf32_note { Elf32_Word n_namesz; Elf32_Word n_descsz; Elf32_Word n_type; } Elf32_Nhdr;
Elf32_Nhdr  struct  include/linux/elf.h  394  typedef struct elf32_note { Elf32_Word n_namesz; Elf32_Word n_descsz; Elf32_Word n_type; } Elf32_Nhdr;
elf64_note  struct  include/linux/elf.h  401  typedef struct elf64_note { Elf64_Word n_namesz; Elf64_Word n_descsz; Elf64_Word n_type; } Elf64_Nhdr;
Elf64_Nhdr  struct  include/linux/elf.h  401  typedef struct elf64_note { Elf64_Word n_namesz; Elf64_Word n_descsz; Elf64_Word n_type; } Elf64_Nhdr;
elf_read_implies_exec  macro  arch/x86/include/asm/elf.h  267  #define elf_read_implies_exec(ex,executable_stack) (executable_stack != EXSTACK_DISABLE_X)
elfhdr  macro  include/linux/elf.h  428  #define elfhdr elf64_hdr
elf_phdr  macro  include/linux/elf.h  429  #define elf_phdr elf64_phdr
elf_shdr  macro  include/linux/elf.h  430  #define elf_shdr elf64_shdr
elf_note  macro  include/linux/elf.h  431  #define elf_note elf64_note
elf_addr_t  macro  include/linux/elf.h  432  #define elf_addr_t Elf64_Off
Elf_Half  macro  include/linux/elf.h  433  #define Elf_Half Elf64_Half
elf_coredump_extra_notes_size  prototype  include/linux/elf.h  445  extern int elf_coredump_extra_notes_size(void);
elf_coredump_extra_notes_write  prototype  include/linux/elf.h  446  extern int elf_coredump_extra_notes_write(struct file *file,loff_t *foffset);
__LINUX_STRINGIFY_H  macro  include/linux/stringify.h  2  #define __LINUX_STRINGIFY_H
__stringify_1  macro  include/linux/stringify.h  9  #define __stringify_1(x...) #x
__stringify  macro  include/linux/stringify.h  10  #define __stringify(x...) __stringify_1(x)
_KOBJECT_H_  macro  include/linux/kobject.h  17  #define _KOBJECT_H_
UEVENT_HELPER_PATH_LEN  macro  include/linux/kobject.h  30  #define UEVENT_HELPER_PATH_LEN 256
UEVENT_NUM_ENVP  macro  include/linux/kobject.h  31  #define UEVENT_NUM_ENVP 32
UEVENT_BUFFER_SIZE  macro  include/linux/kobject.h  32  #define UEVENT_BUFFER_SIZE 2048
kobject_action  enum  include/linux/kobject.h  50  enum kobject_action { KOBJ_ADD, KOBJ_REMOVE, KOBJ_CHANGE, KOBJ_MOVE, KOBJ_ONLINE, KOBJ_OFFLINE, KOBJ_MAX };
kobject  struct  include/linux/kobject.h  60  struct kobject { const char *name; struct list_head entry; struct kobject *parent; struct kset *kset; struct kobj_type *ktype; struct sysfs_dirent *sd; struct kref kref; unsigned int state_initialized:1; unsigned int state_in_sysfs:1; unsigned int state_add_uevent_sent:1; unsigned int state_remove_uevent_sent:1; unsigned int uevent_suppress:1; };
kobject_set_name  prototype  include/linux/kobject.h  76  int kobject_set_name(struct kobject *kobj,const char *name,...);
kobject_set_name_vargs  prototype  include/linux/kobject.h  77  extern int kobject_set_name_vargs(struct kobject *kobj,const char *fmt,va_list vargs);
kobject_name  function  include/linux/kobject.h  80  static inline const char *kobject_name(const struct kobject *kobj)
kobject_init  prototype  include/linux/kobject.h  85  extern void kobject_init(struct kobject *kobj,struct kobj_type *ktype);
kobject_add  prototype  include/linux/kobject.h  87  int kobject_add(struct kobject *kobj,struct kobject *parent,const char *fmt, ...);
kobject_init_and_add  prototype  include/linux/kobject.h  90  int kobject_init_and_add(struct kobject *kobj,struct kobj_type *ktype, struct kobject *parent,const char *fmt, ...);
kobject_del  prototype  include/linux/kobject.h  94  extern void kobject_del(struct kobject *kobj);
kobject_create  prototype  include/linux/kobject.h  96  extern struct kobject * __must_check kobject_create(void);
kobject_create_and_add  prototype  include/linux/kobject.h  97  extern struct kobject * __must_check kobject_create_and_add(const char *name,struct kobject *parent);
kobject_rename  prototype  include/linux/kobject.h  100  extern int __must_check kobject_rename(struct kobject *,const char *new_name);
kobject_move  prototype  include/linux/kobject.h  101  extern int __must_check kobject_move(struct kobject *,struct kobject *);
kobject_get  prototype  include/linux/kobject.h  103  extern struct kobject *kobject_get(struct kobject *kobj);
kobject_put  prototype  include/linux/kobject.h  104  extern void kobject_put(struct kobject *kobj);
kobject_get_path  prototype  include/linux/kobject.h  106  extern char *kobject_get_path(struct kobject *kobj,gfp_t flag);
kobj_type  struct  include/linux/kobject.h  108  struct kobj_type { void (*release)(struct kobject *kobj); const struct sysfs_ops *sysfs_ops; struct attribute **default_attrs; const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj); };
kobj_uevent_env  struct  include/linux/kobject.h  116  struct kobj_uevent_env { char *envp[UEVENT_NUM_ENVP]; int envp_idx; char buf[UEVENT_BUFFER_SIZE]; int buflen; };
kset_uevent_ops  struct  include/linux/kobject.h  123  struct kset_uevent_ops { int (* const filter)(struct kset *kset, struct kobject *kobj); const char *(* const name)(struct kset *kset, struct kobject *kobj); int (* const uevent)(struct kset *kset, struct kobject *kobj,struct kobj_uevent_env *env); };
kobj_attribute  struct  include/linux/kobject.h  130  struct kobj_attribute { struct attribute attr; ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,char *buf); ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count); };
kset  struct  include/linux/kobject.h  159  struct kset { struct list_head list; spinlock_t list_lock; struct kobject kobj; const struct kset_uevent_ops *uevent_ops; };
kset_init  prototype  include/linux/kobject.h  166  extern void kset_init(struct kset *kset);
kset_register  prototype  include/linux/kobject.h  167  extern int __must_check kset_register(struct kset *kset);
kset_unregister  prototype  include/linux/kobject.h  168  extern void kset_unregister(struct kset *kset);
kset_create_and_add  prototype  include/linux/kobject.h  169  extern struct kset * __must_check kset_create_and_add(const char *name,const struct kset_uevent_ops *u,struct kobject *parent_kobj);
to_kset  function  include/linux/kobject.h  173  static inline struct kset *to_kset(struct kobject *kobj)
kset_get  function  include/linux/kobject.h  178  static inline struct kset *kset_get(struct kset *k)
kset_put  function  include/linux/kobject.h  183  static inline void kset_put(struct kset *k)
get_ktype  function  include/linux/kobject.h  188  static inline struct kobj_type *get_ktype(struct kobject *kobj)
kset_find_obj  prototype  include/linux/kobject.h  193  extern struct kobject *kset_find_obj(struct kset *,const char *);
kobject_uevent  function  include/linux/kobject.h  217  static inline int kobject_uevent(struct kobject *kobj,enum kobject_action action)
kobject_uevent_env  function  include/linux/kobject.h  220  static inline int kobject_uevent_env(struct kobject *kobj,enum kobject_action action,char *envp[])
add_uevent_var  function  include/linux/kobject.h  226  int add_uevent_var(struct kobj_uevent_env *env,const char *format,...)
kobject_action_type  function  include/linux/kobject.h  229  static inline int kobject_action_type(const char *buf,size_t count,enum kobject_action *type)
_LINUX_MODULE_PARAMS_H  macro  include/linux/moduleparam.h  2  #define _LINUX_MODULE_PARAMS_H
MODULE_PARAM_PREFIX  macro  include/linux/moduleparam.h  13  #define MODULE_PARAM_PREFIX KBUILD_MODNAME "."
MAX_PARAM_PREFIX_LEN  macro  include/linux/moduleparam.h  17  #define MAX_PARAM_PREFIX_LEN (64 - sizeof(unsigned long))
___module_cat  macro  include/linux/moduleparam.h  19  #define ___module_cat(a,b) __mod_ ## a ## b
__module_cat  macro  include/linux/moduleparam.h  20  #define __module_cat(a,b) ___module_cat(a,b)
__MODULE_INFO  macro  include/linux/moduleparam.h  28  #define __MODULE_INFO(tag,name,info) struct __module_cat(name,__LINE__) {}
__MODULE_PARM_TYPE  macro  include/linux/moduleparam.h  31  #define __MODULE_PARM_TYPE(name,_type) __MODULE_INFO(parmtype, name##type, #name ":" _type)
MODULE_PARM_DESC  macro  include/linux/moduleparam.h  36  #define MODULE_PARM_DESC(_parm,desc) __MODULE_INFO(parm, _parm, #_parm ":" desc)
kernel_param_ops  struct  include/linux/moduleparam.h  41  struct kernel_param_ops { int (*set)(const char *val, const struct kernel_param *kp); int (*get)(char *buffer, const struct kernel_param *kp); void (*free)(void *arg); };
kernel_param  struct  include/linux/moduleparam.h  50  struct kernel_param { const char *name; const struct kernel_param_ops *ops; u16 perm; s16 level; union { void *arg; const struct kparam_string *str; const struct kparam_array *arr; };
kparam_string  struct  include/linux/moduleparam.h  63  struct kparam_string { unsigned int maxlen; char *string; };
kparam_array  struct  include/linux/moduleparam.h  69  struct kparam_array { unsigned int max; unsigned int elemsize; unsigned int *num; const struct kernel_param_ops *ops; void *elem; };
module_param  macro  include/linux/moduleparam.h  103  #define module_param(name,type,perm) module_param_named(name, name, type, perm)
module_param_named  macro  include/linux/moduleparam.h  117  #define module_param_named(name,value,type,perm) param_check_##type(name, &(value)); module_param_cb(name, &param_ops_##type, &value, perm); __MODULE_PARM_TYPE(name, #type)
module_param_cb  macro  include/linux/moduleparam.h  130  #define module_param_cb(name,ops,arg,perm) __module_param_call(MODULE_PARAM_PREFIX, name, ops, arg, perm, -1)
__level_param_cb  macro  include/linux/moduleparam.h  142  #define __level_param_cb(name,ops,arg,perm,level) __module_param_call(MODULE_PARAM_PREFIX, name, ops, arg, perm, level)
core_param_cb  macro  include/linux/moduleparam.h  145  #define core_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 1)
postcore_param_cb  macro  include/linux/moduleparam.h  148  #define postcore_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 2)
arch_param_cb  macro  include/linux/moduleparam.h  151  #define arch_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 3)
subsys_param_cb  macro  include/linux/moduleparam.h  154  #define subsys_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 4)
fs_param_cb  macro  include/linux/moduleparam.h  157  #define fs_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 5)
device_param_cb  macro  include/linux/moduleparam.h  160  #define device_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 6)
late_param_cb  macro  include/linux/moduleparam.h  163  #define late_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 7)
__moduleparam_const  macro  include/linux/moduleparam.h  173  #define __moduleparam_const const
__module_param_call  macro  include/linux/moduleparam.h  178  #define __module_param_call(prefix,name,ops,arg,perm,level) /* Default value instead of permissions? */ static int __param_perm_check_##name __attribute__((unused)) = BUILD_BUG_ON_ZERO((perm) < 0 || (perm) > 0777 || ((perm) & 2)) + BUILD_BUG_ON_ZERO(sizeof(""prefix) > MAX_PARAM_PREFIX_LEN); static const char __param_str_##name[] = prefix #name; static struct kernel_param __moduleparam_const __param_##name __used __attribute__ ((unused,__section__ ("__param"),aligned(sizeof(void *)))) = { __param_str_##name, ops, perm, level, { arg } }
module_param_call  macro  include/linux/moduleparam.h  190  #define module_param_call(name,set,get,arg,perm) static struct kernel_param_ops __param_ops_##name = { (void *)set, (void *)get }; __module_param_call(MODULE_PARAM_PREFIX, name, &__param_ops_##name, arg, (perm) + sizeof(__check_old_set_param(set))*0, -1)
__check_old_set_param  function  include/linux/moduleparam.h  199  __check_old_set_param(int (*oldset)(const char *,struct kernel_param *))
kparam_block_sysfs_write  macro  include/linux/moduleparam.h  210  #define kparam_block_sysfs_write(name) do { BUG_ON(!(__param_##name.perm & 0222)); __kernel_param_lock(); } while (0)
kparam_unblock_sysfs_write  macro  include/linux/moduleparam.h  220  #define kparam_unblock_sysfs_write(name) do { BUG_ON(!(__param_##name.perm & 0222)); __kernel_param_unlock(); } while (0)
kparam_block_sysfs_read  macro  include/linux/moduleparam.h  232  #define kparam_block_sysfs_read(name) do { BUG_ON(!(__param_##name.perm & 0444)); __kernel_param_lock(); } while (0)
kparam_unblock_sysfs_read  macro  include/linux/moduleparam.h  242  #define kparam_unblock_sysfs_read(name) do { BUG_ON(!(__param_##name.perm & 0444)); __kernel_param_unlock(); } while (0)
__kernel_param_lock  function  include/linux/moduleparam.h  252  static inline void __kernel_param_lock(void)
__kernel_param_unlock  function  include/linux/moduleparam.h  255  static inline void __kernel_param_unlock(void)
core_param  macro  include/linux/moduleparam.h  273  #define core_param(name,var,type,perm) param_check_##type(name, &(var)); __module_param_call("", name, &param_ops_##type, &var, perm, -1)
module_param_string  macro  include/linux/moduleparam.h  288  #define module_param_string(name,string,len,perm) static const struct kparam_string __param_string_##name = { len, string }; __module_param_call(MODULE_PARAM_PREFIX, name, &param_ops_string, .str = &__param_string_##name, perm, -1); __MODULE_PARM_TYPE(name, "string")
parameq  prototype  include/linux/moduleparam.h  304  extern bool parameq(const char *name1,const char *name2);
parameqn  prototype  include/linux/moduleparam.h  314  extern bool parameqn(const char *name1,const char *name2,size_t n);
parse_args  prototype  include/linux/moduleparam.h  317  extern int parse_args(const char *name,char *args,const struct kernel_param *params,unsigned num,s16 level_min,s16 level_max,int (*unknown)(char *param, char *val,const char *doing));
destroy_params  function  include/linux/moduleparam.h  330  static inline void destroy_params(const struct kernel_param *params,unsigned num)
__param_check  macro  include/linux/moduleparam.h  339  #define __param_check(name,p,type) static inline type *__check_##name(void) { return(p); }
param_set_byte  prototype  include/linux/moduleparam.h  343  extern int param_set_byte(const char *val,const struct kernel_param *kp);
param_get_byte  prototype  include/linux/moduleparam.h  344  extern int param_get_byte(char *buffer,const struct kernel_param *kp);
param_check_byte  macro  include/linux/moduleparam.h  345  #define param_check_byte(name,p) __param_check(name,p,unsigned char)
param_set_short  prototype  include/linux/moduleparam.h  348  extern int param_set_short(const char *val,const struct kernel_param *kp);
param_get_short  prototype  include/linux/moduleparam.h  349  extern int param_get_short(char *buffer,const struct kernel_param *kp);
param_check_short  macro  include/linux/moduleparam.h  350  #define param_check_short(name,p) __param_check(name,p,short)
param_set_ushort  prototype  include/linux/moduleparam.h  353  extern int param_set_ushort(const char *val,const struct kernel_param *kp);
param_get_ushort  prototype  include/linux/moduleparam.h  354  extern int param_get_ushort(char *buffer,const struct kernel_param *kp);
param_check_ushort  macro  include/linux/moduleparam.h  355  #define param_check_ushort(name,p) __param_check(name,p,unsigned short)
param_set_int  prototype  include/linux/moduleparam.h  358  extern int param_set_int(const char *val,const struct kernel_param *kp);
param_get_int  prototype  include/linux/moduleparam.h  359  extern int param_get_int(char *buffer,const struct kernel_param *kp);
param_check_int  macro  include/linux/moduleparam.h  360  #define param_check_int(name,p) __param_check(name,p,int)
param_set_uint  prototype  include/linux/moduleparam.h  363  extern int param_set_uint(const char *val,const struct kernel_param *kp);
param_get_uint  prototype  include/linux/moduleparam.h  364  extern int param_get_uint(char *buffer,const struct kernel_param *kp);
param_check_uint  macro  include/linux/moduleparam.h  365  #define param_check_uint(name,p) __param_check(name,p,unsigned int)
param_set_long  prototype  include/linux/moduleparam.h  368  extern int param_set_long(const char *val,const struct kernel_param *kp);
param_get_long  prototype  include/linux/moduleparam.h  369  extern int param_get_long(char *buffer,const struct kernel_param *kp);
param_check_long  macro  include/linux/moduleparam.h  370  #define param_check_long(name,p) __param_check(name,p,long)
param_set_ulong  prototype  include/linux/moduleparam.h  373  extern int param_set_ulong(const char *val,const struct kernel_param *kp);
param_get_ulong  prototype  include/linux/moduleparam.h  374  extern int param_get_ulong(char *buffer,const struct kernel_param *kp);
param_check_ulong  macro  include/linux/moduleparam.h  375  #define param_check_ulong(name,p) __param_check(name,p,unsigned long)
param_set_charp  prototype  include/linux/moduleparam.h  378  extern int param_set_charp(const char *val,const struct kernel_param *kp);
param_get_charp  prototype  include/linux/moduleparam.h  379  extern int param_get_charp(char *buffer,const struct kernel_param *kp);
param_check_charp  macro  include/linux/moduleparam.h  380  #define param_check_charp(name,p) __param_check(name,p,char *)
param_set_bool  prototype  include/linux/moduleparam.h  384  extern int param_set_bool(const char *val,const struct kernel_param *kp);
param_get_bool  prototype  include/linux/moduleparam.h  385  extern int param_get_bool(char *buffer,const struct kernel_param *kp);
param_check_bool  macro  include/linux/moduleparam.h  386  #define param_check_bool(name,p) __param_check(name,p,bool)
param_set_invbool  prototype  include/linux/moduleparam.h  389  extern int param_set_invbool(const char *val,const struct kernel_param *kp);
param_get_invbool  prototype  include/linux/moduleparam.h  390  extern int param_get_invbool(char *buffer,const struct kernel_param *kp);
param_check_invbool  macro  include/linux/moduleparam.h  391  #define param_check_invbool(name,p) __param_check(name,p,bool)
param_set_bint  prototype  include/linux/moduleparam.h  395  extern int param_set_bint(const char *val,const struct kernel_param *kp);
param_get_bint  macro  include/linux/moduleparam.h  396  #define param_get_bint param_get_int
param_check_bint  macro  include/linux/moduleparam.h  397  #define param_check_bint param_check_int
module_param_array  macro  include/linux/moduleparam.h  412  #define module_param_array(name,type,nump,perm) module_param_array_named(name, name, type, nump, perm)
module_param_array_named  macro  include/linux/moduleparam.h  426  #define module_param_array_named(name,array,type,nump,perm) param_check_##type(name, &(array)[0]); static const struct kparam_array __param_arr_##name = { .max = ARRAY_SIZE(array), .num = nump, .ops = &param_ops_##type, .elemsize = sizeof(array[0]), .elem = array }; __module_param_call(MODULE_PARAM_PREFIX, name, &param_array_ops, .arr = &__param_arr_##name, perm, -1); __MODULE_PARM_TYPE(name, "array of " #type)
param_set_copystring  prototype  include/linux/moduleparam.h  441  extern int param_set_copystring(const char *val,const struct kernel_param *);
param_get_string  prototype  include/linux/moduleparam.h  442  extern int param_get_string(char *buffer,const struct kernel_param *kp);
module_param_sysfs_setup  function  include/linux/moduleparam.h  455  static inline int module_param_sysfs_setup(struct module *mod,const struct kernel_param *kparam,unsigned int num_params)
module_param_sysfs_remove  function  include/linux/moduleparam.h  462  static inline void module_param_sysfs_remove(struct module *mod)
_LINUX_TRACEPOINT_H  macro  include/linux/tracepoint.h  2  #define _LINUX_TRACEPOINT_H
tracepoint_func  struct  include/linux/tracepoint.h  25  struct tracepoint_func { void *func; void *data; };
tracepoint  struct  include/linux/tracepoint.h  30  struct tracepoint { const char *name; struct static_key key; void (*regfunc)(void); void (*unregfunc)(void); struct tracepoint_func __rcu *funcs; };
tracepoint_probe_register  prototype  include/linux/tracepoint.h  42  extern int tracepoint_probe_register(const char *name,void *probe,void *data);
tracepoint_probe_unregister  prototype  include/linux/tracepoint.h  49  tracepoint_probe_unregister(const char *name,void *probe,void *data);
tracepoint_probe_register_noupdate  prototype  include/linux/tracepoint.h  51  extern int tracepoint_probe_register_noupdate(const char *name,void *probe,void *data);
tracepoint_probe_unregister_noupdate  prototype  include/linux/tracepoint.h  53  extern int tracepoint_probe_unregister_noupdate(const char *name,void *probe,void *data);
tracepoint_probe_update_all  prototype  include/linux/tracepoint.h  55  extern void tracepoint_probe_update_all(void);
tp_module  struct  include/linux/tracepoint.h  58  struct tp_module { struct list_head list; unsigned int num_tracepoints; struct tracepoint * const *tracepoints_ptrs; };
tracepoint_iter  struct  include/linux/tracepoint.h  65  struct tracepoint_iter { struct tp_module *module; struct tracepoint * const *tracepoint; };
tracepoint_iter_start  prototype  include/linux/tracepoint.h  72  extern void tracepoint_iter_start(struct tracepoint_iter *iter);
tracepoint_iter_next  prototype  include/linux/tracepoint.h  73  extern void tracepoint_iter_next(struct tracepoint_iter *iter);
tracepoint_iter_stop  prototype  include/linux/tracepoint.h  74  extern void tracepoint_iter_stop(struct tracepoint_iter *iter);
tracepoint_iter_reset  prototype  include/linux/tracepoint.h  75  extern void tracepoint_iter_reset(struct tracepoint_iter *iter);
tracepoint_synchronize_unregister  function  include/linux/tracepoint.h  82  static inline void tracepoint_synchronize_unregister(void)
PARAMS  macro  include/linux/tracepoint.h  87  #define PARAMS(args...) args
TP_PROTO  macro  include/linux/tracepoint.h  101  #define TP_PROTO(args...) args
TP_ARGS  macro  include/linux/tracepoint.h  102  #define TP_ARGS(args...) args
TP_CONDITION  macro  include/linux/tracepoint.h  103  #define TP_CONDITION(args...) args
__DO_TRACE  macro  include/linux/tracepoint.h  117  #define __DO_TRACE(tp,proto,args,cond,prercu,postrcu) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cond)) return; prercu; rcu_read_lock_sched_notrace(); it_func_ptr = rcu_dereference_sched((tp)->funcs); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(proto))(it_func))(args); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); postrcu; } while (0)
__DECLARE_TRACE  macro  include/linux/tracepoint.h  205  #define __DECLARE_TRACE(name,proto,args,cond,data_proto,data_args) static inline void trace_##name(proto) { } static inline void trace_##name##_rcuidle(proto) { } static inline int register_trace_##name(void (*probe)(data_proto), void *data) { return -ENOSYS; } static inline int unregister_trace_##name(void (*probe)(data_proto), void *data) { return -ENOSYS; } static inline void check_trace_callback_type_##name(void (*cb)(data_proto)) { }
DEFINE_TRACE_FN  macro  include/linux/tracepoint.h  226  #define DEFINE_TRACE_FN(name,reg,unreg)
DEFINE_TRACE  macro  include/linux/tracepoint.h  227  #define DEFINE_TRACE(name)
EXPORT_TRACEPOINT_SYMBOL_GPL  macro  include/linux/tracepoint.h  228  #define EXPORT_TRACEPOINT_SYMBOL_GPL(name)
EXPORT_TRACEPOINT_SYMBOL  macro  include/linux/tracepoint.h  229  #define EXPORT_TRACEPOINT_SYMBOL(name)
DECLARE_TRACE_NOARGS  macro  include/linux/tracepoint.h  247  #define DECLARE_TRACE_NOARGS(name) __DECLARE_TRACE(name, void, , 1, void *__data, __data)
DECLARE_TRACE  macro  include/linux/tracepoint.h  250  #define DECLARE_TRACE(name,proto,args) __DECLARE_TRACE(name, PARAMS(proto), PARAMS(args), 1, PARAMS(void *__data, proto), PARAMS(__data, args))
DECLARE_TRACE_CONDITION  macro  include/linux/tracepoint.h  255  #define DECLARE_TRACE_CONDITION(name,proto,args,cond) __DECLARE_TRACE(name, PARAMS(proto), PARAMS(args), PARAMS(cond), PARAMS(void *__data, proto), PARAMS(__data, args))
TRACE_EVENT_FLAGS  macro  include/linux/tracepoint.h  390  #define TRACE_EVENT_FLAGS(event,flag)
DECLARE_EVENT_CLASS  macro  include/linux/tracepoint.h  370  #define DECLARE_EVENT_CLASS(name,proto,args,tstruct,assign,print)
DEFINE_EVENT  macro  include/linux/tracepoint.h  371  #define DEFINE_EVENT(template,name,proto,args) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
DEFINE_EVENT_PRINT  macro  include/linux/tracepoint.h  373  #define DEFINE_EVENT_PRINT(template,name,proto,args,print) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
DEFINE_EVENT_CONDITION  macro  include/linux/tracepoint.h  375  #define DEFINE_EVENT_CONDITION(template,name,proto, args, cond) DECLARE_TRACE_CONDITION(name, PARAMS(proto), PARAMS(args), PARAMS(cond))
TRACE_EVENT  macro  include/linux/tracepoint.h  380  #define TRACE_EVENT(name,proto,args,struct,assign,print) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
TRACE_EVENT_FN  macro  include/linux/tracepoint.h  382  #define TRACE_EVENT_FN(name,proto,args,struct, assign, print, reg, unreg) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
TRACE_EVENT_CONDITION  macro  include/linux/tracepoint.h  385  #define TRACE_EVENT_CONDITION(name,proto,args,cond, struct, assign, print) DECLARE_TRACE_CONDITION(name, PARAMS(proto), PARAMS(args), PARAMS(cond))
_LINUX_EXPORT_H  macro  include/linux/export.h  2  #define _LINUX_EXPORT_H
MODULE_SYMBOL_PREFIX  macro  include/linux/export.h  16  #define MODULE_SYMBOL_PREFIX ""
kernel_symbol  struct  include/linux/export.h  19  struct kernel_symbol { unsigned long value; const char *name; };
THIS_MODULE  macro  include/linux/export.h  29  #define THIS_MODULE ((struct module *)0)
__CRC_SYMBOL  macro  include/linux/export.h  45  #define __CRC_SYMBOL(sym,sec)
__EXPORT_SYMBOL  macro  include/linux/export.h  49  #define __EXPORT_SYMBOL(sym,sec) extern typeof(sym) sym; __CRC_SYMBOL(sym, sec) static const char __kstrtab_##sym[] __attribute__((section("__ksymtab_strings"), aligned(1))) = MODULE_SYMBOL_PREFIX #sym; static const struct kernel_symbol __ksymtab_##sym __used __attribute__((section("___ksymtab" sec "+" #sym), unused)) = { (unsigned long)&sym, __kstrtab_##sym }
EXPORT_SYMBOL  macro  include/linux/export.h  81  #define EXPORT_SYMBOL(sym)
EXPORT_SYMBOL_GPL  macro  include/linux/export.h  82  #define EXPORT_SYMBOL_GPL(sym)
EXPORT_SYMBOL_GPL_FUTURE  macro  include/linux/export.h  83  #define EXPORT_SYMBOL_GPL_FUTURE(sym)
EXPORT_UNUSED_SYMBOL  macro  include/linux/export.h  84  #define EXPORT_UNUSED_SYMBOL(sym)
EXPORT_UNUSED_SYMBOL_GPL  macro  include/linux/export.h  85  #define EXPORT_UNUSED_SYMBOL_GPL(sym)
__LINUX_PERCPU_H  macro  include/linux/percpu.h  2  #define __LINUX_PERCPU_H
PERCPU_MODULE_RESERVE  macro  include/linux/percpu.h  16  #define PERCPU_MODULE_RESERVE 0
PERCPU_ENOUGH_ROOM  macro  include/linux/percpu.h  20  #define PERCPU_ENOUGH_ROOM (ALIGN(__per_cpu_end - __per_cpu_start, SMP_CACHE_BYTES) + PERCPU_MODULE_RESERVE)
get_cpu_var  macro  include/linux/percpu.h  29  #define get_cpu_var(var) (*({ preempt_disable(); &__get_cpu_var(var); }))
put_cpu_var  macro  include/linux/percpu.h  37  #define put_cpu_var(var) do { (void)&(var); preempt_enable(); } while (0)
get_cpu_ptr  macro  include/linux/percpu.h  42  #define get_cpu_ptr(var) ({ preempt_disable(); this_cpu_ptr(var); })
put_cpu_ptr  macro  include/linux/percpu.h  46  #define put_cpu_ptr(var) do { (void)(var); preempt_enable(); } while (0)
PCPU_MIN_UNIT_SIZE  macro  include/linux/percpu.h  52  #define PCPU_MIN_UNIT_SIZE PFN_ALIGN(32 << 10)
PERCPU_DYNAMIC_EARLY_SLOTS  macro  include/linux/percpu.h  61  #define PERCPU_DYNAMIC_EARLY_SLOTS 128
PERCPU_DYNAMIC_EARLY_SIZE  macro  include/linux/percpu.h  62  #define PERCPU_DYNAMIC_EARLY_SIZE (12 << 10)
PERCPU_DYNAMIC_RESERVE  macro  include/linux/percpu.h  78  #define PERCPU_DYNAMIC_RESERVE (12 << 10)
pcpu_group_info  struct  include/linux/percpu.h  84  struct pcpu_group_info { int nr_units; unsigned long base_offset; unsigned int *cpu_map; };
pcpu_alloc_info  struct  include/linux/percpu.h  91  struct pcpu_alloc_info { size_t static_size; size_t reserved_size; size_t dyn_size; size_t unit_size; size_t atom_size; size_t alloc_size; size_t __ai_size; int nr_groups; struct pcpu_group_info groups[]; };
pcpu_fc  enum  include/linux/percpu.h  103  enum pcpu_fc { PCPU_FC_AUTO, PCPU_FC_EMBED, PCPU_FC_PAGE, PCPU_FC_NR, };
pcpu_alloc_alloc_info  prototype  include/linux/percpu.h  120  extern struct pcpu_alloc_info * __init pcpu_alloc_alloc_info(int nr_groups,int nr_units);
pcpu_free_alloc_info  prototype  include/linux/percpu.h  122  extern void __init pcpu_free_alloc_info(struct pcpu_alloc_info *ai);
pcpu_setup_first_chunk  prototype  include/linux/percpu.h  124  extern int __init pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,void *base_addr);
pcpu_embed_first_chunk  prototype  include/linux/percpu.h  128  extern int __init pcpu_embed_first_chunk(size_t reserved_size,size_t dyn_size,size_t atom_size,pcpu_fc_cpu_distance_fn_t cpu_distance_fn,pcpu_fc_alloc_fn_t alloc_fn,pcpu_fc_free_fn_t free_fn);
pcpu_page_first_chunk  prototype  include/linux/percpu.h  136  extern int __init pcpu_page_first_chunk(size_t reserved_size,pcpu_fc_alloc_fn_t alloc_fn,pcpu_fc_free_fn_t free_fn,pcpu_fc_populate_pte_fn_t populate_pte_fn);
per_cpu_ptr  macro  include/linux/percpu.h  150  #define per_cpu_ptr(ptr,cpu) ({ (void)(cpu); VERIFY_PERCPU_PTR((ptr)); })
__alloc_reserved_percpu  prototype  include/linux/percpu.h  153  extern void __percpu *__alloc_reserved_percpu(size_t size,size_t align);
is_kernel_percpu_address  prototype  include/linux/percpu.h  154  extern bool is_kernel_percpu_address(unsigned long addr);
setup_per_cpu_areas  prototype  include/linux/percpu.h  157  extern void __init setup_per_cpu_areas(void);
percpu_init_late  prototype  include/linux/percpu.h  159  extern void __init percpu_init_late(void);
__alloc_percpu  prototype  include/linux/percpu.h  161  extern void __percpu *__alloc_percpu(size_t size,size_t align);
free_percpu  prototype  include/linux/percpu.h  162  extern void free_percpu(void __percpu *__pdata);
per_cpu_ptr_to_phys  prototype  include/linux/percpu.h  163  extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
alloc_percpu  macro  include/linux/percpu.h  165  #define alloc_percpu(type) (typeof(type) __percpu *)__alloc_percpu(sizeof(type), __alignof__(type))
__bad_size_call_parameter  prototype  include/linux/percpu.h  173  extern void __bad_size_call_parameter(void);
__pcpu_size_call_return  macro  include/linux/percpu.h  175  #define __pcpu_size_call_return(stem,variable) ({	typeof(variable) pscr_ret__; __verify_pcpu_ptr(&(variable)); switch(sizeof(variable)) { case 1: pscr_ret__ = stem##1(variable);break; case 2: pscr_ret__ = stem##2(variable);break; case 4: pscr_ret__ = stem##4(variable);break; case 8: pscr_ret__ = stem##8(variable);break; default: __bad_size_call_parameter();break; } pscr_ret__; })
__pcpu_size_call_return2  macro  include/linux/percpu.h  189  #define __pcpu_size_call_return2(stem,variable,...) ({ typeof(variable) pscr2_ret__; __verify_pcpu_ptr(&(variable)); switch(sizeof(variable)) { case 1: pscr2_ret__ = stem##1(variable, __VA_ARGS__); break; case 2: pscr2_ret__ = stem##2(variable, __VA_ARGS__); break; case 4: pscr2_ret__ = stem##4(variable, __VA_ARGS__); break; case 8: pscr2_ret__ = stem##8(variable, __VA_ARGS__); break; default: __bad_size_call_parameter(); break; } pscr2_ret__; })
__pcpu_double_call_return_bool  macro  include/linux/percpu.h  212  #define __pcpu_double_call_return_bool(stem,pcp1,pcp2,...) ({ bool pdcrb_ret__; __verify_pcpu_ptr(&pcp1); BUILD_BUG_ON(sizeof(pcp1) != sizeof(pcp2)); VM_BUG_ON((unsigned long)(&pcp1) % (2 * sizeof(pcp1))); VM_BUG_ON((unsigned long)(&pcp2) != (unsigned long)(&pcp1) + sizeof(pcp1)); switch(sizeof(pcp1)) { case 1: pdcrb_ret__ = stem##1(pcp1, pcp2, __VA_ARGS__); break; case 2: pdcrb_ret__ = stem##2(pcp1, pcp2, __VA_ARGS__); break; case 4: pdcrb_ret__ = stem##4(pcp1, pcp2, __VA_ARGS__); break; case 8: pdcrb_ret__ = stem##8(pcp1, pcp2, __VA_ARGS__); break; default: __bad_size_call_parameter(); break; } pdcrb_ret__; })
__pcpu_size_call  macro  include/linux/percpu.h  231  #define __pcpu_size_call(stem,variable,...) do { __verify_pcpu_ptr(&(variable)); switch(sizeof(variable)) { case 1: stem##1(variable, __VA_ARGS__);break; case 2: stem##2(variable, __VA_ARGS__);break; case 4: stem##4(variable, __VA_ARGS__);break; case 8: stem##8(variable, __VA_ARGS__);break; default: __bad_size_call_parameter();break; } } while (0)
_this_cpu_generic_read  macro  include/linux/percpu.h  270  #define _this_cpu_generic_read(pcp) ({	typeof(pcp) ret__; preempt_disable(); ret__ = *this_cpu_ptr(&(pcp)); preempt_enable(); ret__; })
this_cpu_read_1  macro  arch/x86/include/asm/percpu.h  387  #define this_cpu_read_1(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read_2  macro  arch/x86/include/asm/percpu.h  388  #define this_cpu_read_2(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read_4  macro  arch/x86/include/asm/percpu.h  389  #define this_cpu_read_4(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read_8  macro  arch/x86/include/asm/percpu.h  457  #define this_cpu_read_8(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read  macro  include/linux/percpu.h  291  # define this_cpu_read(pcp) __pcpu_size_call_return(this_cpu_read_,(pcp))
_this_cpu_generic_to_op  macro  include/linux/percpu.h  294  #define _this_cpu_generic_to_op(pcp,val,op) do { unsigned long flags; raw_local_irq_save(flags); *__this_cpu_ptr(&(pcp)) op val; raw_local_irq_restore(flags); } while (0)
this_cpu_write_1  macro  arch/x86/include/asm/percpu.h  390  #define this_cpu_write_1(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write_2  macro  arch/x86/include/asm/percpu.h  391  #define this_cpu_write_2(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write_4  macro  arch/x86/include/asm/percpu.h  392  #define this_cpu_write_4(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write_8  macro  arch/x86/include/asm/percpu.h  458  #define this_cpu_write_8(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write  macro  include/linux/percpu.h  315  # define this_cpu_write(pcp,val) __pcpu_size_call(this_cpu_write_,(pcp),(val))
this_cpu_add_1  macro  arch/x86/include/asm/percpu.h  393  #define this_cpu_add_1(pcp,val) percpu_add_op((pcp),val)
this_cpu_add_2  macro  arch/x86/include/asm/percpu.h  394  #define this_cpu_add_2(pcp,val) percpu_add_op((pcp),val)
this_cpu_add_4  macro  arch/x86/include/asm/percpu.h  395  #define this_cpu_add_4(pcp,val) percpu_add_op((pcp),val)
this_cpu_add_8  macro  arch/x86/include/asm/percpu.h  459  #define this_cpu_add_8(pcp,val) percpu_add_op((pcp),val)
this_cpu_add  macro  include/linux/percpu.h  331  # define this_cpu_add(pcp,val) __pcpu_size_call(this_cpu_add_,(pcp),(val))
this_cpu_sub  macro  include/linux/percpu.h  335  # define this_cpu_sub(pcp,val) this_cpu_add((pcp),-(val))
this_cpu_inc  macro  include/linux/percpu.h  339  # define this_cpu_inc(pcp) this_cpu_add((pcp),1)
this_cpu_dec  macro  include/linux/percpu.h  343  # define this_cpu_dec(pcp) this_cpu_sub((pcp),1)
this_cpu_and_1  macro  arch/x86/include/asm/percpu.h  396  #define this_cpu_and_1(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and_2  macro  arch/x86/include/asm/percpu.h  397  #define this_cpu_and_2(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and_4  macro  arch/x86/include/asm/percpu.h  398  #define this_cpu_and_4(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and_8  macro  arch/x86/include/asm/percpu.h  460  #define this_cpu_and_8(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and  macro  include/linux/percpu.h  359  # define this_cpu_and(pcp,val) __pcpu_size_call(this_cpu_and_,(pcp),(val))
this_cpu_or_1  macro  arch/x86/include/asm/percpu.h  399  #define this_cpu_or_1(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or_2  macro  arch/x86/include/asm/percpu.h  400  #define this_cpu_or_2(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or_4  macro  arch/x86/include/asm/percpu.h  401  #define this_cpu_or_4(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or_8  macro  arch/x86/include/asm/percpu.h  461  #define this_cpu_or_8(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or  macro  include/linux/percpu.h  375  # define this_cpu_or(pcp,val) __pcpu_size_call(this_cpu_or_,(pcp),(val))
this_cpu_xor_1  macro  arch/x86/include/asm/percpu.h  402  #define this_cpu_xor_1(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor_2  macro  arch/x86/include/asm/percpu.h  403  #define this_cpu_xor_2(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor_4  macro  arch/x86/include/asm/percpu.h  404  #define this_cpu_xor_4(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor_8  macro  arch/x86/include/asm/percpu.h  462  #define this_cpu_xor_8(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor  macro  include/linux/percpu.h  391  # define this_cpu_xor(pcp,val) __pcpu_size_call(this_cpu_or_,(pcp),(val))
_this_cpu_generic_add_return  macro  include/linux/percpu.h  394  #define _this_cpu_generic_add_return(pcp,val) ({ typeof(pcp) ret__; unsigned long flags; raw_local_irq_save(flags); __this_cpu_add(pcp, val); ret__ = __this_cpu_read(pcp); raw_local_irq_restore(flags); ret__; })
this_cpu_add_return_1  macro  arch/x86/include/asm/percpu.h  417  #define this_cpu_add_return_1(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return_2  macro  arch/x86/include/asm/percpu.h  418  #define this_cpu_add_return_2(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return_4  macro  arch/x86/include/asm/percpu.h  419  #define this_cpu_add_return_4(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return_8  macro  arch/x86/include/asm/percpu.h  463  #define this_cpu_add_return_8(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return  macro  include/linux/percpu.h  418  # define this_cpu_add_return(pcp,val) __pcpu_size_call_return2(this_cpu_add_return_,pcp,val)
this_cpu_sub_return  macro  include/linux/percpu.h  421  #define this_cpu_sub_return(pcp,val) this_cpu_add_return(pcp,-(val))
this_cpu_inc_return  macro  include/linux/percpu.h  422  #define this_cpu_inc_return(pcp) this_cpu_add_return(pcp,1)
this_cpu_dec_return  macro  include/linux/percpu.h  423  #define this_cpu_dec_return(pcp) this_cpu_add_return(pcp,-1)
_this_cpu_generic_xchg  macro  include/linux/percpu.h  425  #define _this_cpu_generic_xchg(pcp,nval) ({	typeof(pcp) ret__; unsigned long flags; raw_local_irq_save(flags); ret__ = __this_cpu_read(pcp); __this_cpu_write(pcp, nval); raw_local_irq_restore(flags); ret__; })
this_cpu_xchg_1  macro  arch/x86/include/asm/percpu.h  405  #define this_cpu_xchg_1(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg_2  macro  arch/x86/include/asm/percpu.h  406  #define this_cpu_xchg_2(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg_4  macro  arch/x86/include/asm/percpu.h  407  #define this_cpu_xchg_4(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg_8  macro  arch/x86/include/asm/percpu.h  464  #define this_cpu_xchg_8(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg  macro  include/linux/percpu.h  448  # define this_cpu_xchg(pcp,nval) __pcpu_size_call_return2(this_cpu_xchg_, (pcp), nval)
_this_cpu_generic_cmpxchg  macro  include/linux/percpu.h  452  #define _this_cpu_generic_cmpxchg(pcp,oval,nval) ({ typeof(pcp) ret__; unsigned long flags; raw_local_irq_save(flags); ret__ = __this_cpu_read(pcp); if (ret__ == (oval)) __this_cpu_write(pcp, nval); raw_local_irq_restore(flags); ret__; })
this_cpu_cmpxchg_1  macro  arch/x86/include/asm/percpu.h  420  #define this_cpu_cmpxchg_1(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg_2  macro  arch/x86/include/asm/percpu.h  421  #define this_cpu_cmpxchg_2(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg_4  macro  arch/x86/include/asm/percpu.h  422  #define this_cpu_cmpxchg_4(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg_8  macro  arch/x86/include/asm/percpu.h  465  #define this_cpu_cmpxchg_8(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg  macro  include/linux/percpu.h  477  # define this_cpu_cmpxchg(pcp,oval,nval) __pcpu_size_call_return2(this_cpu_cmpxchg_, pcp, oval, nval)
_this_cpu_generic_cmpxchg_double  macro  include/linux/percpu.h  489  #define _this_cpu_generic_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) ({ int ret__; unsigned long flags; raw_local_irq_save(flags); ret__ = __this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2); raw_local_irq_restore(flags); ret__; })
this_cpu_cmpxchg_double_1  macro  include/linux/percpu.h  502  # define this_cpu_cmpxchg_double_1(pcp1,pcp2,oval1,oval2,nval1,nval2) _this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
this_cpu_cmpxchg_double_2  macro  include/linux/percpu.h  506  # define this_cpu_cmpxchg_double_2(pcp1,pcp2,oval1,oval2,nval1,nval2) _this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
this_cpu_cmpxchg_double_4  macro  arch/x86/include/asm/percpu.h  439  #define this_cpu_cmpxchg_double_4 percpu_cmpxchg8b_double
this_cpu_cmpxchg_double_8  macro  arch/x86/include/asm/percpu.h  488  #define this_cpu_cmpxchg_double_8 percpu_cmpxchg16b_double
this_cpu_cmpxchg_double  macro  include/linux/percpu.h  517  # define this_cpu_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) __pcpu_double_call_return_bool(this_cpu_cmpxchg_double_, (pcp1), (pcp2), (oval1), (oval2), (nval1), (nval2))
__this_cpu_read_1  macro  arch/x86/include/asm/percpu.h  364  #define __this_cpu_read_1(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read_2  macro  arch/x86/include/asm/percpu.h  365  #define __this_cpu_read_2(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read_4  macro  arch/x86/include/asm/percpu.h  366  #define __this_cpu_read_4(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read_8  macro  arch/x86/include/asm/percpu.h  447  #define __this_cpu_read_8(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read  macro  include/linux/percpu.h  548  # define __this_cpu_read(pcp) __pcpu_size_call_return(__this_cpu_read_,(pcp))
__this_cpu_generic_to_op  macro  include/linux/percpu.h  551  #define __this_cpu_generic_to_op(pcp,val,op) do { *__this_cpu_ptr(&(pcp)) op val; } while (0)
__this_cpu_write_1  macro  arch/x86/include/asm/percpu.h  368  #define __this_cpu_write_1(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write_2  macro  arch/x86/include/asm/percpu.h  369  #define __this_cpu_write_2(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write_4  macro  arch/x86/include/asm/percpu.h  370  #define __this_cpu_write_4(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write_8  macro  arch/x86/include/asm/percpu.h  448  #define __this_cpu_write_8(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write  macro  include/linux/percpu.h  569  # define __this_cpu_write(pcp,val) __pcpu_size_call(__this_cpu_write_,(pcp),(val))
__this_cpu_add_1  macro  arch/x86/include/asm/percpu.h  371  #define __this_cpu_add_1(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add_2  macro  arch/x86/include/asm/percpu.h  372  #define __this_cpu_add_2(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add_4  macro  arch/x86/include/asm/percpu.h  373  #define __this_cpu_add_4(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add_8  macro  arch/x86/include/asm/percpu.h  449  #define __this_cpu_add_8(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add  macro  include/linux/percpu.h  585  # define __this_cpu_add(pcp,val) __pcpu_size_call(__this_cpu_add_,(pcp),(val))
__this_cpu_sub  macro  include/linux/percpu.h  589  # define __this_cpu_sub(pcp,val) __this_cpu_add((pcp),-(val))
__this_cpu_inc  macro  include/linux/percpu.h  593  # define __this_cpu_inc(pcp) __this_cpu_add((pcp),1)
__this_cpu_dec  macro  include/linux/percpu.h  597  # define __this_cpu_dec(pcp) __this_cpu_sub((pcp),1)
__this_cpu_and_1  macro  arch/x86/include/asm/percpu.h  374  #define __this_cpu_and_1(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and_2  macro  arch/x86/include/asm/percpu.h  375  #define __this_cpu_and_2(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and_4  macro  arch/x86/include/asm/percpu.h  376  #define __this_cpu_and_4(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and_8  macro  arch/x86/include/asm/percpu.h  450  #define __this_cpu_and_8(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and  macro  include/linux/percpu.h  613  # define __this_cpu_and(pcp,val) __pcpu_size_call(__this_cpu_and_,(pcp),(val))
__this_cpu_or_1  macro  arch/x86/include/asm/percpu.h  377  #define __this_cpu_or_1(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or_2  macro  arch/x86/include/asm/percpu.h  378  #define __this_cpu_or_2(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or_4  macro  arch/x86/include/asm/percpu.h  379  #define __this_cpu_or_4(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or_8  macro  arch/x86/include/asm/percpu.h  451  #define __this_cpu_or_8(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or  macro  include/linux/percpu.h  629  # define __this_cpu_or(pcp,val) __pcpu_size_call(__this_cpu_or_,(pcp),(val))
__this_cpu_xor_1  macro  arch/x86/include/asm/percpu.h  380  #define __this_cpu_xor_1(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor_2  macro  arch/x86/include/asm/percpu.h  381  #define __this_cpu_xor_2(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor_4  macro  arch/x86/include/asm/percpu.h  382  #define __this_cpu_xor_4(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor_8  macro  arch/x86/include/asm/percpu.h  452  #define __this_cpu_xor_8(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor  macro  include/linux/percpu.h  645  # define __this_cpu_xor(pcp,val) __pcpu_size_call(__this_cpu_xor_,(pcp),(val))
__this_cpu_generic_add_return  macro  include/linux/percpu.h  648  #define __this_cpu_generic_add_return(pcp,val) ({ __this_cpu_add(pcp, val); __this_cpu_read(pcp); })
__this_cpu_add_return_1  macro  arch/x86/include/asm/percpu.h  410  #define __this_cpu_add_return_1(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return_2  macro  arch/x86/include/asm/percpu.h  411  #define __this_cpu_add_return_2(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return_4  macro  arch/x86/include/asm/percpu.h  412  #define __this_cpu_add_return_4(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return_8  macro  arch/x86/include/asm/percpu.h  453  #define __this_cpu_add_return_8(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return  macro  include/linux/percpu.h  667  # define __this_cpu_add_return(pcp,val) __pcpu_size_call_return2(__this_cpu_add_return_, pcp, val)
__this_cpu_sub_return  macro  include/linux/percpu.h  671  #define __this_cpu_sub_return(pcp,val) __this_cpu_add_return(pcp,-(val))
__this_cpu_inc_return  macro  include/linux/percpu.h  672  #define __this_cpu_inc_return(pcp) __this_cpu_add_return(pcp,1)
__this_cpu_dec_return  macro  include/linux/percpu.h  673  #define __this_cpu_dec_return(pcp) __this_cpu_add_return(pcp,-1)
__this_cpu_generic_xchg  macro  include/linux/percpu.h  675  #define __this_cpu_generic_xchg(pcp,nval) ({	typeof(pcp) ret__; ret__ = __this_cpu_read(pcp); __this_cpu_write(pcp, nval); ret__; })
__this_cpu_xchg_1  macro  arch/x86/include/asm/percpu.h  383  #define __this_cpu_xchg_1(pcp,val) percpu_xchg_op(pcp,val)
__this_cpu_xchg_2  macro  arch/x86/include/asm/percpu.h  384  #define __this_cpu_xchg_2(pcp,val) percpu_xchg_op(pcp,val)
__this_cpu_xchg_4  macro  arch/x86/include/asm/percpu.h  385  #define __this_cpu_xchg_4(pcp,val) percpu_xchg_op(pcp,val)
__this_cpu_xchg_8  macro  arch/x86/include/asm/percpu.h  454  #define __this_cpu_xchg_8(pcp,nval) percpu_xchg_op(pcp,nval)
__this_cpu_xchg  macro  include/linux/percpu.h  695  # define __this_cpu_xchg(pcp,nval) __pcpu_size_call_return2(__this_cpu_xchg_, (pcp), nval)
__this_cpu_generic_cmpxchg  macro  include/linux/percpu.h  699  #define __this_cpu_generic_cmpxchg(pcp,oval,nval) ({ typeof(pcp) ret__; ret__ = __this_cpu_read(pcp); if (ret__ == (oval)) __this_cpu_write(pcp, nval); ret__; })
__this_cpu_cmpxchg_1  macro  arch/x86/include/asm/percpu.h  413  #define __this_cpu_cmpxchg_1(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg_2  macro  arch/x86/include/asm/percpu.h  414  #define __this_cpu_cmpxchg_2(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg_4  macro  arch/x86/include/asm/percpu.h  415  #define __this_cpu_cmpxchg_4(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg_8  macro  arch/x86/include/asm/percpu.h  455  #define __this_cpu_cmpxchg_8(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg  macro  include/linux/percpu.h  721  # define __this_cpu_cmpxchg(pcp,oval,nval) __pcpu_size_call_return2(__this_cpu_cmpxchg_, pcp, oval, nval)
__this_cpu_generic_cmpxchg_double  macro  include/linux/percpu.h  725  #define __this_cpu_generic_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) ({ int __ret = 0; if (__this_cpu_read(pcp1) == (oval1) && __this_cpu_read(pcp2)  == (oval2)) { __this_cpu_write(pcp1, (nval1)); __this_cpu_write(pcp2, (nval2)); __ret = 1; } (__ret); })
__this_cpu_cmpxchg_double_1  macro  include/linux/percpu.h  739  # define __this_cpu_cmpxchg_double_1(pcp1,pcp2,oval1,oval2,nval1,nval2) __this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
__this_cpu_cmpxchg_double_2  macro  include/linux/percpu.h  743  # define __this_cpu_cmpxchg_double_2(pcp1,pcp2,oval1,oval2,nval1,nval2) __this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
__this_cpu_cmpxchg_double_4  macro  arch/x86/include/asm/percpu.h  438  #define __this_cpu_cmpxchg_double_4 percpu_cmpxchg8b_double
__this_cpu_cmpxchg_double_8  macro  arch/x86/include/asm/percpu.h  487  #define __this_cpu_cmpxchg_double_8 percpu_cmpxchg16b_double
__this_cpu_cmpxchg_double  macro  include/linux/percpu.h  754  # define __this_cpu_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) __pcpu_double_call_return_bool(__this_cpu_cmpxchg_double_, (pcp1), (pcp2), (oval1), (oval2), (nval1), (nval2))
_ASM_X86_MODULE_H  macro  arch/x86/include/asm/module.h  2  #define _ASM_X86_MODULE_H
MODULE_PROC_FAMILY  macro  arch/x86/include/asm/module.h  57  #define MODULE_PROC_FAMILY "GEODE "
MODULE_ARCH_VERMAGIC  macro  arch/x86/include/asm/module.h  63  # define MODULE_ARCH_VERMAGIC MODULE_PROC_FAMILY
_ASM_X86_TYPES_H  macro  arch/x86/include/asm/types.h  2  #define _ASM_X86_TYPES_H
_LINUX_POSIX_TYPES_H  macro  include/linux/posix_types.h  2  #define _LINUX_POSIX_TYPES_H
__FD_SETSIZE  macro  include/linux/posix_types.h  22  #define __FD_SETSIZE 1024
__kernel_fd_set  struct  include/linux/posix_types.h  24  typedef struct { unsigned long fds_bits[__FD_SETSIZE / (8 * sizeof(long))]; } __kernel_fd_set;
_LINUX_STRING_H_  macro  include/linux/string.h  2  #define _LINUX_STRING_H_
strndup_user  prototype  include/linux/string.h  15  extern char *strndup_user(const char __user *,long);
memdup_user  prototype  include/linux/string.h  16  extern void *memdup_user(const void __user *,size_t);
strcpy  prototype  include/linux/string.h  24  extern char * strcpy(char *,const char *);
strncpy  prototype  include/linux/string.h  27  extern char * strncpy(char *,const char *,__kernel_size_t);
strlcpy  prototype  include/linux/string.h  30  size_t strlcpy(char *,const char *,size_t);
strcat  prototype  include/linux/string.h  33  extern char * strcat(char *,const char *);
strncat  prototype  include/linux/string.h  36  extern char * strncat(char *,const char *,__kernel_size_t);
strlcat  prototype  include/linux/string.h  39  extern size_t strlcat(char *,const char *,__kernel_size_t);
strcmp  prototype  include/linux/string.h  42  extern int strcmp(const char *,const char *);
strncmp  prototype  include/linux/string.h  45  extern int strncmp(const char *,const char *,__kernel_size_t);
strnicmp  prototype  include/linux/string.h  48  extern int strnicmp(const char *,const char *,__kernel_size_t);
strcasecmp  prototype  include/linux/string.h  51  extern int strcasecmp(const char *s1,const char *s2);
strncasecmp  prototype  include/linux/string.h  54  extern int strncasecmp(const char *s1,const char *s2,size_t n);
strchr  prototype  include/linux/string.h  57  extern char * strchr(const char *,int);
strnchr  prototype  include/linux/string.h  60  extern char * strnchr(const char *,size_t,int);
strrchr  prototype  include/linux/string.h  63  extern char * strrchr(const char *,int);
skip_spaces  prototype  include/linux/string.h  65  extern char * __must_check skip_spaces(const char *);
strim  prototype  include/linux/string.h  67  extern char *strim(char *);
strstrip  function  include/linux/string.h  69  static inline __must_check char *strstrip(char *str)
strstr  prototype  include/linux/string.h  75  extern char * strstr(const char *,const char *);
strnstr  prototype  include/linux/string.h  78  extern char * strnstr(const char *,const char *,size_t);
strlen  prototype  include/linux/string.h  81  extern __kernel_size_t strlen(const char *);
strnlen  prototype  include/linux/string.h  84  extern __kernel_size_t strnlen(const char *,__kernel_size_t);
strpbrk  prototype  include/linux/string.h  87  extern char * strpbrk(const char *,const char *);
strsep  prototype  include/linux/string.h  90  extern char * strsep(char **,const char *);
strspn  prototype  include/linux/string.h  93  extern __kernel_size_t strspn(const char *,const char *);
strcspn  prototype  include/linux/string.h  96  extern __kernel_size_t strcspn(const char *,const char *);
memset  prototype  include/linux/string.h  100  extern void * memset(void *,int,__kernel_size_t);
memcpy  prototype  include/linux/string.h  103  extern void * memcpy(void *,const void *,__kernel_size_t);
memmove  prototype  include/linux/string.h  106  extern void * memmove(void *,const void *,__kernel_size_t);
memscan  prototype  include/linux/string.h  109  extern void * memscan(void *,int,__kernel_size_t);
memcmp  prototype  include/linux/string.h  112  extern int memcmp(const void *,const void *,__kernel_size_t);
memchr  prototype  include/linux/string.h  115  extern void * memchr(const void *,int,__kernel_size_t);
memchr_inv  prototype  include/linux/string.h  117  void *memchr_inv(const void *s,int c,size_t n);
kstrdup  prototype  include/linux/string.h  119  extern char *kstrdup(const char *s,gfp_t gfp);
kstrndup  prototype  include/linux/string.h  120  extern char *kstrndup(const char *s,size_t len,gfp_t gfp);
kmemdup  prototype  include/linux/string.h  121  extern void *kmemdup(const void *src,size_t len,gfp_t gfp);
argv_split  prototype  include/linux/string.h  123  extern char **argv_split(gfp_t gfp,const char *str,int *argcp);
argv_free  prototype  include/linux/string.h  124  extern void argv_free(char **argv);
sysfs_streq  prototype  include/linux/string.h  126  extern bool sysfs_streq(const char *s1,const char *s2);
strtobool  prototype  include/linux/string.h  127  extern int strtobool(const char *s,bool *res);
vbin_printf  prototype  include/linux/string.h  130  int vbin_printf(u32 *bin_buf,size_t size,const char *fmt,va_list args);
bstr_printf  prototype  include/linux/string.h  131  int bstr_printf(char *buf,size_t size,const char *fmt,const u32 *bin_buf);
memory_read_from_buffer  prototype  include/linux/string.h  135  extern ssize_t memory_read_from_buffer(void *to,size_t count,loff_t *ppos,const void *from, size_t available);
strstarts  function  include/linux/string.h  143  static inline bool strstarts(const char *str,const char *prefix)
_LINUX_BUG_H  macro  include/linux/bug.h  2  #define _LINUX_BUG_H
bug_trap_type  enum  include/linux/bug.h  6  enum bug_trap_type { BUG_TRAP_TYPE_NONE = 0, BUG_TRAP_TYPE_WARN = 1, BUG_TRAP_TYPE_BUG = 2, };
BUILD_BUG_ON_NOT_POWER_OF_2  macro  include/linux/bug.h  23  #define BUILD_BUG_ON_NOT_POWER_OF_2(n) BUILD_BUG_ON((n) == 0 || (((n) & ((n) - 1)) != 0))
BUILD_BUG_ON_ZERO  macro  include/linux/bug.h  30  #define BUILD_BUG_ON_ZERO(e) (sizeof(struct { int:-!!(e); }))
BUILD_BUG_ON_NULL  macro  include/linux/bug.h  31  #define BUILD_BUG_ON_NULL(e) ((void *)sizeof(struct { int:-!!(e); }))
BUILD_BUG_ON  macro  include/linux/bug.h  59  #define BUILD_BUG_ON(condition) do { ((void)sizeof(char[1 - 2*!!(condition)])); if (condition) __build_bug_on_failed = 1; } while(0)
BUILD_BUG  macro  include/linux/bug.h  73  #define BUILD_BUG() do { extern void __build_bug_failed(void) __linktime_error("BUILD_BUG failed"); __build_bug_failed(); } while (0)
BUILD_BUG_ON_INVALID  macro  include/linux/bug.h  38  #define BUILD_BUG_ON_INVALID(e) ((void)(sizeof((__force long)(e))))
is_warning_bug  function  include/linux/bug.h  85  static inline int is_warning_bug(const struct bug_entry *bug)
find_bug  prototype  include/linux/bug.h  90  const struct bug_entry *find_bug(unsigned long bugaddr);
report_bug  function  include/linux/bug.h  99  static inline enum bug_trap_type report_bug(unsigned long bug_addr,struct pt_regs *regs)
is_valid_bugaddr  prototype  include/linux/bug.h  95  int is_valid_bugaddr(unsigned long addr);
_LINUX_MM_H  macro  include/linux/mm.h  2  #define _LINUX_MM_H
sysctl_legacy_va_layout  macro  include/linux/mm.h  40  #define sysctl_legacy_va_layout 0
nth_page  macro  include/linux/mm.h  47  #define nth_page(page,n) pfn_to_page(page_to_pfn((page)) + (n))
PAGE_ALIGN  macro  include/linux/mm.h  50  #define PAGE_ALIGN(addr) ALIGN(addr,PAGE_SIZE)
kobjsize  prototype  include/linux/mm.h  67  extern unsigned int kobjsize(const void *objp);
VM_READ  macro  include/linux/mm.h  73  #define VM_READ 0x00000001
VM_WRITE  macro  include/linux/mm.h  74  #define VM_WRITE 0x00000002
VM_EXEC  macro  include/linux/mm.h  75  #define VM_EXEC 0x00000004
VM_SHARED  macro  include/linux/mm.h  76  #define VM_SHARED 0x00000008
VM_MAYREAD  macro  include/linux/mm.h  79  #define VM_MAYREAD 0x00000010
VM_MAYWRITE  macro  include/linux/mm.h  80  #define VM_MAYWRITE 0x00000020
VM_MAYEXEC  macro  include/linux/mm.h  81  #define VM_MAYEXEC 0x00000040
VM_MAYSHARE  macro  include/linux/mm.h  82  #define VM_MAYSHARE 0x00000080
VM_GROWSDOWN  macro  include/linux/mm.h  84  #define VM_GROWSDOWN 0x00000100
VM_GROWSUP  macro  include/linux/mm.h  88  #define VM_GROWSUP 0x00000000
VM_NOHUGEPAGE  macro  include/linux/mm.h  89  #define VM_NOHUGEPAGE 0x00000200
VM_PFNMAP  macro  include/linux/mm.h  91  #define VM_PFNMAP 0x00000400
VM_DENYWRITE  macro  include/linux/mm.h  92  #define VM_DENYWRITE 0x00000800
VM_EXECUTABLE  macro  include/linux/mm.h  94  #define VM_EXECUTABLE 0x00001000
VM_LOCKED  macro  include/linux/mm.h  95  #define VM_LOCKED 0x00002000
VM_IO  macro  include/linux/mm.h  96  #define VM_IO 0x00004000
VM_SEQ_READ  macro  include/linux/mm.h  99  #define VM_SEQ_READ 0x00008000
VM_RAND_READ  macro  include/linux/mm.h  100  #define VM_RAND_READ 0x00010000
VM_DONTCOPY  macro  include/linux/mm.h  102  #define VM_DONTCOPY 0x00020000
VM_DONTEXPAND  macro  include/linux/mm.h  103  #define VM_DONTEXPAND 0x00040000
VM_RESERVED  macro  include/linux/mm.h  104  #define VM_RESERVED 0x00080000
VM_ACCOUNT  macro  include/linux/mm.h  105  #define VM_ACCOUNT 0x00100000
VM_NORESERVE  macro  include/linux/mm.h  106  #define VM_NORESERVE 0x00200000
VM_HUGETLB  macro  include/linux/mm.h  107  #define VM_HUGETLB 0x00400000
VM_NONLINEAR  macro  include/linux/mm.h  108  #define VM_NONLINEAR 0x00800000
VM_MAPPED_COPY  macro  include/linux/mm.h  110  #define VM_MAPPED_COPY 0x01000000
VM_HUGEPAGE  macro  include/linux/mm.h  112  #define VM_HUGEPAGE 0x01000000
VM_INSERTPAGE  macro  include/linux/mm.h  114  #define VM_INSERTPAGE 0x02000000
VM_NODUMP  macro  include/linux/mm.h  115  #define VM_NODUMP 0x04000000
VM_CAN_NONLINEAR  macro  include/linux/mm.h  117  #define VM_CAN_NONLINEAR 0x08000000
VM_MIXEDMAP  macro  include/linux/mm.h  118  #define VM_MIXEDMAP 0x10000000
VM_SAO  macro  include/linux/mm.h  119  #define VM_SAO 0x20000000
VM_PFN_AT_MMAP  macro  include/linux/mm.h  120  #define VM_PFN_AT_MMAP 0x40000000
VM_MERGEABLE  macro  include/linux/mm.h  121  #define VM_MERGEABLE 0x80000000
VM_STACK_INCOMPLETE_SETUP  macro  include/linux/mm.h  124  #define VM_STACK_INCOMPLETE_SETUP (VM_RAND_READ | VM_SEQ_READ)
VM_STACK_DEFAULT_FLAGS  macro  include/linux/mm.h  127  #define VM_STACK_DEFAULT_FLAGS VM_DATA_DEFAULT_FLAGS
VM_STACK_FLAGS  macro  include/linux/mm.h  133  #define VM_STACK_FLAGS (VM_GROWSDOWN | VM_STACK_DEFAULT_FLAGS | VM_ACCOUNT)
VM_READHINTMASK  macro  include/linux/mm.h  136  #define VM_READHINTMASK (VM_SEQ_READ | VM_RAND_READ)
VM_ClearReadHint  macro  include/linux/mm.h  137  #define VM_ClearReadHint(v) (v)->vm_flags &= ~VM_READHINTMASK
VM_NormalReadHint  macro  include/linux/mm.h  138  #define VM_NormalReadHint(v) (!((v)->vm_flags & VM_READHINTMASK))
VM_SequentialReadHint  macro  include/linux/mm.h  139  #define VM_SequentialReadHint(v) ((v)->vm_flags & VM_SEQ_READ)
VM_RandomReadHint  macro  include/linux/mm.h  140  #define VM_RandomReadHint(v) ((v)->vm_flags & VM_RAND_READ)
VM_SPECIAL  macro  include/linux/mm.h  146  #define VM_SPECIAL (VM_IO | VM_DONTEXPAND | VM_RESERVED | VM_PFNMAP)
FAULT_FLAG_WRITE  macro  include/linux/mm.h  154  #define FAULT_FLAG_WRITE 0x01
FAULT_FLAG_NONLINEAR  macro  include/linux/mm.h  155  #define FAULT_FLAG_NONLINEAR 0x02
FAULT_FLAG_MKWRITE  macro  include/linux/mm.h  156  #define FAULT_FLAG_MKWRITE 0x04
FAULT_FLAG_ALLOW_RETRY  macro  include/linux/mm.h  157  #define FAULT_FLAG_ALLOW_RETRY 0x08
FAULT_FLAG_RETRY_NOWAIT  macro  include/linux/mm.h  158  #define FAULT_FLAG_RETRY_NOWAIT 0x10
FAULT_FLAG_KILLABLE  macro  include/linux/mm.h  159  #define FAULT_FLAG_KILLABLE 0x20
is_linear_pfn_mapping  function  include/linux/mm.h  169  static inline int is_linear_pfn_mapping(struct vm_area_struct *vma)
is_pfn_mapping  function  include/linux/mm.h  174  static inline int is_pfn_mapping(struct vm_area_struct *vma)
vm_fault  struct  include/linux/mm.h  188  struct vm_fault { unsigned int flags; pgoff_t pgoff; void __user *virtual_address; struct page *page; };
vm_operations_struct  struct  include/linux/mm.h  205  struct vm_operations_struct { void (*open)(struct vm_area_struct * area); void (*close)(struct vm_area_struct * area); int (*fault)(struct vm_area_struct *vma, struct vm_fault *vmf); int (*page_mkwrite)(struct vm_area_struct *vma, struct vm_fault *vmf); int (*access)(struct vm_area_struct *vma, unsigned long addr,void *buf, int len, int write); int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new); struct mempolicy *(*get_policy)(struct vm_area_struct *vma,unsigned long addr); int (*migrate)(struct vm_area_struct *vma, const nodemask_t *from,const nodemask_t *to, unsigned long flags); };
page_private  macro  include/linux/mm.h  249  #define page_private(page) ((page)->private)
set_page_private  macro  include/linux/mm.h  250  #define set_page_private(page,v) ((page)->private = (v))
put_page_testzero  function  include/linux/mm.h  275  static inline int put_page_testzero(struct page *page)
get_page_unless_zero  function  include/linux/mm.h  285  static inline int get_page_unless_zero(struct page *page)
page_is_ram  prototype  include/linux/mm.h  290  extern int page_is_ram(unsigned long pfn);
vmalloc_to_page  prototype  include/linux/mm.h  293  struct page *vmalloc_to_page(const void *addr);
vmalloc_to_pfn  prototype  include/linux/mm.h  294  unsigned long vmalloc_to_pfn(const void *addr);
is_vmalloc_addr  function  include/linux/mm.h  302  static inline int is_vmalloc_addr(const void *x)
is_vmalloc_or_module_addr  function  include/linux/mm.h  315  static inline int is_vmalloc_or_module_addr(const void *x)
compound_lock  function  include/linux/mm.h  321  static inline void compound_lock(struct page *page)
compound_unlock  function  include/linux/mm.h  329  static inline void compound_unlock(struct page *page)
compound_lock_irqsave  function  include/linux/mm.h  337  static inline unsigned long compound_lock_irqsave(struct page *page)
compound_unlock_irqrestore  function  include/linux/mm.h  347  static inline void compound_unlock_irqrestore(struct page *page,unsigned long flags)
compound_head  function  include/linux/mm.h  356  static inline struct page *compound_head(struct page *page)
reset_page_mapcount  function  include/linux/mm.h  368  static inline void reset_page_mapcount(struct page *page)
page_mapcount  function  include/linux/mm.h  373  static inline int page_mapcount(struct page *page)
page_count  function  include/linux/mm.h  378  static inline int page_count(struct page *page)
get_huge_page_tail  function  include/linux/mm.h  383  static inline void get_huge_page_tail(struct page *page)
__get_page_tail  prototype  include/linux/mm.h  394  extern bool __get_page_tail(struct page *page);
get_page  function  include/linux/mm.h  396  static inline void get_page(struct page *page)
virt_to_head_page  function  include/linux/mm.h  409  static inline struct page *virt_to_head_page(const void *x)
init_page_count  function  include/linux/mm.h  419  static inline void init_page_count(struct page *page)
PAGE_BUDDY_MAPCOUNT_VALUE  macro  include/linux/mm.h  433  #define PAGE_BUDDY_MAPCOUNT_VALUE (-128)
PageBuddy  function  include/linux/mm.h  435  static inline int PageBuddy(struct page *page)
__SetPageBuddy  function  include/linux/mm.h  440  static inline void __SetPageBuddy(struct page *page)
__ClearPageBuddy  function  include/linux/mm.h  446  static inline void __ClearPageBuddy(struct page *page)
put_page  prototype  include/linux/mm.h  452  void put_page(struct page *page);
put_pages_list  prototype  include/linux/mm.h  453  void put_pages_list(struct list_head *pages);
split_page  prototype  include/linux/mm.h  455  void split_page(struct page *page,unsigned int order);
split_free_page  prototype  include/linux/mm.h  456  int split_free_page(struct page *page);
set_compound_page_dtor  function  include/linux/mm.h  465  static inline void set_compound_page_dtor(struct page *page,compound_page_dtor *dtor)
get_compound_page_dtor  function  include/linux/mm.h  471  static inline compound_page_dtor *get_compound_page_dtor(struct page *page)
compound_order  function  include/linux/mm.h  476  static inline int compound_order(struct page *page)
compound_trans_order  function  include/linux/mm.h  483  static inline int compound_trans_order(struct page *page)
set_compound_order  function  include/linux/mm.h  497  static inline void set_compound_order(struct page *page,unsigned long order)
maybe_mkwrite  function  include/linux/mm.h  509  static inline pte_t maybe_mkwrite(pte_t pte,struct vm_area_struct *vma)
SECTIONS_WIDTH  macro  include/linux/mm.h  600  #define SECTIONS_WIDTH 0
ZONES_WIDTH  macro  include/linux/mm.h  603  #define ZONES_WIDTH ZONES_SHIFT
NODES_WIDTH  macro  include/linux/mm.h  611  #define NODES_WIDTH 0
SECTIONS_PGOFF  macro  include/linux/mm.h  615  #define SECTIONS_PGOFF ((sizeof(unsigned long)*8) - SECTIONS_WIDTH)
NODES_PGOFF  macro  include/linux/mm.h  616  #define NODES_PGOFF (SECTIONS_PGOFF - NODES_WIDTH)
ZONES_PGOFF  macro  include/linux/mm.h  617  #define ZONES_PGOFF (NODES_PGOFF - ZONES_WIDTH)
NODE_NOT_IN_PAGE_FLAGS  macro  include/linux/mm.h  624  #define NODE_NOT_IN_PAGE_FLAGS
SECTIONS_PGSHIFT  macro  include/linux/mm.h  632  #define SECTIONS_PGSHIFT (SECTIONS_PGOFF * (SECTIONS_WIDTH != 0))
NODES_PGSHIFT  macro  include/linux/mm.h  633  #define NODES_PGSHIFT (NODES_PGOFF * (NODES_WIDTH != 0))
ZONES_PGSHIFT  macro  include/linux/mm.h  634  #define ZONES_PGSHIFT (ZONES_PGOFF * (ZONES_WIDTH != 0))
ZONEID_SHIFT  macro  include/linux/mm.h  642  #define ZONEID_SHIFT (NODES_SHIFT + ZONES_SHIFT)
ZONEID_PGOFF  macro  include/linux/mm.h  643  #define ZONEID_PGOFF ((NODES_PGOFF < ZONES_PGOFF)? NODES_PGOFF : ZONES_PGOFF)
ZONEID_PGSHIFT  macro  include/linux/mm.h  647  #define ZONEID_PGSHIFT (ZONEID_PGOFF * (ZONEID_SHIFT != 0))
ZONES_MASK  macro  include/linux/mm.h  653  #define ZONES_MASK ((1UL << ZONES_WIDTH) - 1)
NODES_MASK  macro  include/linux/mm.h  654  #define NODES_MASK ((1UL << NODES_WIDTH) - 1)
SECTIONS_MASK  macro  include/linux/mm.h  655  #define SECTIONS_MASK ((1UL << SECTIONS_WIDTH) - 1)
ZONEID_MASK  macro  include/linux/mm.h  656  #define ZONEID_MASK ((1UL << ZONEID_SHIFT) - 1)
page_zonenum  function  include/linux/mm.h  658  static inline enum zone_type page_zonenum(const struct page *page)
page_zone_id  function  include/linux/mm.h  671  static inline int page_zone_id(struct page *page)
zone_to_nid  function  include/linux/mm.h  676  static inline int zone_to_nid(struct zone *zone)
page_to_nid  function  include/linux/mm.h  688  static inline int page_to_nid(const struct page *page)
page_zone  function  include/linux/mm.h  694  static inline struct zone *page_zone(const struct page *page)
set_page_section  function  include/linux/mm.h  700  static inline void set_page_section(struct page *page,unsigned long section)
page_to_section  function  include/linux/mm.h  706  static inline unsigned long page_to_section(const struct page *page)
set_page_zone  function  include/linux/mm.h  712  static inline void set_page_zone(struct page *page,enum zone_type zone)
set_page_node  function  include/linux/mm.h  718  static inline void set_page_node(struct page *page,unsigned long node)
set_page_links  function  include/linux/mm.h  724  static inline void set_page_links(struct page *page,enum zone_type zone,unsigned long node, unsigned long pfn)
lowmem_page_address  function  include/linux/mm.h  739  static __always_inline void *lowmem_page_address(const struct page *page)
HASHED_PAGE_VIRTUAL  macro  include/linux/mm.h  745  #define HASHED_PAGE_VIRTUAL
page_address  macro  include/linux/mm.h  764  #define page_address(page) lowmem_page_address(page)
set_page_address  macro  include/linux/mm.h  765  #define set_page_address(page,address) do { } while(0)
page_address_init  macro  include/linux/mm.h  766  #define page_address_init() do { } while(0)
PAGE_MAPPING_ANON  macro  include/linux/mm.h  785  #define PAGE_MAPPING_ANON 1
PAGE_MAPPING_KSM  macro  include/linux/mm.h  786  #define PAGE_MAPPING_KSM 2
PAGE_MAPPING_FLAGS  macro  include/linux/mm.h  787  #define PAGE_MAPPING_FLAGS (PAGE_MAPPING_ANON | PAGE_MAPPING_KSM)
page_mapping  function  include/linux/mm.h  790  static inline struct address_space *page_mapping(struct page *page)
page_rmapping  function  include/linux/mm.h  803  static inline void *page_rmapping(struct page *page)
PageAnon  function  include/linux/mm.h  808  static inline int PageAnon(struct page *page)
page_index  function  include/linux/mm.h  817  static inline pgoff_t page_index(struct page *page)
page_mapped  function  include/linux/mm.h  827  static inline int page_mapped(struct page *page)
VM_FAULT_MINOR  macro  include/linux/mm.h  838  #define VM_FAULT_MINOR 0
VM_FAULT_OOM  macro  include/linux/mm.h  840  #define VM_FAULT_OOM 0x0001
VM_FAULT_SIGBUS  macro  include/linux/mm.h  841  #define VM_FAULT_SIGBUS 0x0002
VM_FAULT_MAJOR  macro  include/linux/mm.h  842  #define VM_FAULT_MAJOR 0x0004
VM_FAULT_WRITE  macro  include/linux/mm.h  843  #define VM_FAULT_WRITE 0x0008
VM_FAULT_HWPOISON  macro  include/linux/mm.h  844  #define VM_FAULT_HWPOISON 0x0010
VM_FAULT_HWPOISON_LARGE  macro  include/linux/mm.h  845  #define VM_FAULT_HWPOISON_LARGE 0x0020
VM_FAULT_NOPAGE  macro  include/linux/mm.h  847  #define VM_FAULT_NOPAGE 0x0100
VM_FAULT_LOCKED  macro  include/linux/mm.h  848  #define VM_FAULT_LOCKED 0x0200
VM_FAULT_RETRY  macro  include/linux/mm.h  849  #define VM_FAULT_RETRY 0x0400
VM_FAULT_HWPOISON_LARGE_MASK  macro  include/linux/mm.h  851  #define VM_FAULT_HWPOISON_LARGE_MASK 0xf000
VM_FAULT_ERROR  macro  include/linux/mm.h  853  #define VM_FAULT_ERROR (VM_FAULT_OOM | VM_FAULT_SIGBUS | VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE)
VM_FAULT_SET_HINDEX  macro  include/linux/mm.h  857  #define VM_FAULT_SET_HINDEX(x) ((x) << 12)
VM_FAULT_GET_HINDEX  macro  include/linux/mm.h  858  #define VM_FAULT_GET_HINDEX(x) (((x) >> 12) & 0xf)
pagefault_out_of_memory  prototype  include/linux/mm.h  863  extern void pagefault_out_of_memory(void);
offset_in_page  macro  include/linux/mm.h  865  #define offset_in_page(p) ((unsigned long)(p) & ~PAGE_MASK)
SHOW_MEM_FILTER_NODES  macro  include/linux/mm.h  871  #define SHOW_MEM_FILTER_NODES (0x0001u)
show_free_areas  prototype  include/linux/mm.h  873  extern void show_free_areas(unsigned int flags);
skip_free_areas_node  prototype  include/linux/mm.h  874  extern bool skip_free_areas_node(unsigned int flags,int nid);
shmem_zero_setup  prototype  include/linux/mm.h  876  int shmem_zero_setup(struct vm_area_struct *);
can_do_mlock  prototype  include/linux/mm.h  878  extern int can_do_mlock(void);
user_shm_lock  prototype  include/linux/mm.h  879  extern int user_shm_lock(size_t,struct user_struct *);
user_shm_unlock  prototype  include/linux/mm.h  880  extern void user_shm_unlock(size_t,struct user_struct *);
zap_details  struct  include/linux/mm.h  885  struct zap_details { struct vm_area_struct *nonlinear_vma; struct address_space *check_mapping; pgoff_t first_index; pgoff_t last_index; };
vm_normal_page  prototype  include/linux/mm.h  892  struct page *vm_normal_page(struct vm_area_struct *vma,unsigned long addr,pte_t pte);
zap_vma_ptes  prototype  include/linux/mm.h  895  int zap_vma_ptes(struct vm_area_struct *vma,unsigned long address,unsigned long size);
zap_page_range  prototype  include/linux/mm.h  897  void zap_page_range(struct vm_area_struct *vma,unsigned long address,unsigned long size, struct zap_details *);
unmap_vmas  prototype  include/linux/mm.h  899  void unmap_vmas(struct mmu_gather *tlb,struct vm_area_struct *start_vma,unsigned long start, unsigned long end);
mm_walk  struct  include/linux/mm.h  918  struct mm_walk { int (*pgd_entry)(pgd_t *, unsigned long, unsigned long, struct mm_walk *); int (*pud_entry)(pud_t *, unsigned long, unsigned long, struct mm_walk *); int (*pmd_entry)(pmd_t *, unsigned long, unsigned long, struct mm_walk *); int (*pte_entry)(pte_t *, unsigned long, unsigned long, struct mm_walk *); int (*pte_hole)(unsigned long, unsigned long, struct mm_walk *); int (*hugetlb_entry)(pte_t *, unsigned long,unsigned long, unsigned long, struct mm_walk *); struct mm_struct *mm; };
walk_page_range  prototype  include/linux/mm.h  930  int walk_page_range(unsigned long addr,unsigned long end,struct mm_walk *walk);
free_pgd_range  prototype  include/linux/mm.h  932  void free_pgd_range(struct mmu_gather *tlb,unsigned long addr,unsigned long end, unsigned long floor, unsigned long ceiling);
copy_page_range  prototype  include/linux/mm.h  934  int copy_page_range(struct mm_struct *dst,struct mm_struct *src,struct vm_area_struct *vma);
unmap_mapping_range  prototype  include/linux/mm.h  936  void unmap_mapping_range(struct address_space *mapping,loff_t const holebegin, loff_t const holelen, int even_cows);
follow_pfn  prototype  include/linux/mm.h  938  int follow_pfn(struct vm_area_struct *vma,unsigned long address,unsigned long *pfn);
follow_phys  prototype  include/linux/mm.h  940  int follow_phys(struct vm_area_struct *vma,unsigned long address,unsigned int flags, unsigned long *prot, resource_size_t *phys);
generic_access_phys  prototype  include/linux/mm.h  942  int generic_access_phys(struct vm_area_struct *vma,unsigned long addr,void *buf, int len, int write);
unmap_shared_mapping_range  function  include/linux/mm.h  945  static inline void unmap_shared_mapping_range(struct address_space *mapping,loff_t const holebegin, loff_t const holelen)
truncate_pagecache  prototype  include/linux/mm.h  951  extern void truncate_pagecache(struct inode *inode,loff_t old,loff_t new);
truncate_setsize  prototype  include/linux/mm.h  952  extern void truncate_setsize(struct inode *inode,loff_t newsize);
vmtruncate  prototype  include/linux/mm.h  953  extern int vmtruncate(struct inode *inode,loff_t offset);
truncate_pagecache_range  prototype  include/linux/mm.h  954  void truncate_pagecache_range(struct inode *inode,loff_t offset,loff_t end);
truncate_inode_page  prototype  include/linux/mm.h  955  int truncate_inode_page(struct address_space *mapping,struct page *page);
generic_error_remove_page  prototype  include/linux/mm.h  956  int generic_error_remove_page(struct address_space *mapping,struct page *page);
invalidate_inode_page  prototype  include/linux/mm.h  957  int invalidate_inode_page(struct page *page);
handle_mm_fault  function  include/linux/mm.h  965  static inline int handle_mm_fault(struct mm_struct *mm,struct vm_area_struct *vma, unsigned long address,unsigned int flags)
fixup_user_fault  function  include/linux/mm.h  973  static inline int fixup_user_fault(struct task_struct *tsk,struct mm_struct *mm, unsigned long address,unsigned int fault_flags)
make_pages_present  prototype  include/linux/mm.h  983  extern int make_pages_present(unsigned long addr,unsigned long end);
access_process_vm  prototype  include/linux/mm.h  984  extern int access_process_vm(struct task_struct *tsk,unsigned long addr,void *buf,int len,int write);
access_remote_vm  prototype  include/linux/mm.h  985  extern int access_remote_vm(struct mm_struct *mm,unsigned long addr,void *buf, int len, int write);
__get_user_pages  prototype  include/linux/mm.h  988  int __get_user_pages(struct task_struct *tsk,struct mm_struct *mm,unsigned long start, int len, unsigned int foll_flags,struct page **pages, struct vm_area_struct **vmas,int *nonblocking);
get_user_pages  prototype  include/linux/mm.h  992  int get_user_pages(struct task_struct *tsk,struct mm_struct *mm,unsigned long start, int nr_pages, int write, int force,struct page **pages, struct vm_area_struct **vmas);
get_user_pages_fast  prototype  include/linux/mm.h  995  int get_user_pages_fast(unsigned long start,int nr_pages,int write,struct page **pages);
get_dump_page  prototype  include/linux/mm.h  997  struct page *get_dump_page(unsigned long addr);
try_to_release_page  prototype  include/linux/mm.h  999  extern int try_to_release_page(struct page * page,gfp_t gfp_mask);
do_invalidatepage  prototype  include/linux/mm.h  1000  extern void do_invalidatepage(struct page *page,unsigned long offset);
__set_page_dirty_nobuffers  prototype  include/linux/mm.h  1002  int __set_page_dirty_nobuffers(struct page *page);
__set_page_dirty_no_writeback  prototype  include/linux/mm.h  1003  int __set_page_dirty_no_writeback(struct page *page);
redirty_page_for_writepage  prototype  include/linux/mm.h  1004  int redirty_page_for_writepage(struct writeback_control *wbc,struct page *page);
account_page_dirtied  prototype  include/linux/mm.h  1006  void account_page_dirtied(struct page *page,struct address_space *mapping);
account_page_writeback  prototype  include/linux/mm.h  1007  void account_page_writeback(struct page *page);
set_page_dirty  prototype  include/linux/mm.h  1008  int set_page_dirty(struct page *page);
set_page_dirty_lock  prototype  include/linux/mm.h  1009  int set_page_dirty_lock(struct page *page);
clear_page_dirty_for_io  prototype  include/linux/mm.h  1010  int clear_page_dirty_for_io(struct page *page);
vma_growsdown  function  include/linux/mm.h  1013  static inline int vma_growsdown(struct vm_area_struct *vma,unsigned long addr)
stack_guard_page_start  function  include/linux/mm.h  1018  static inline int stack_guard_page_start(struct vm_area_struct *vma,unsigned long addr)
vma_growsup  function  include/linux/mm.h  1027  static inline int vma_growsup(struct vm_area_struct *vma,unsigned long addr)
stack_guard_page_end  function  include/linux/mm.h  1032  static inline int stack_guard_page_end(struct vm_area_struct *vma,unsigned long addr)
vm_is_stack  prototype  include/linux/mm.h  1041  vm_is_stack(struct task_struct *task,struct vm_area_struct *vma,int in_group);
move_page_tables  prototype  include/linux/mm.h  1043  extern unsigned long move_page_tables(struct vm_area_struct *vma,unsigned long old_addr, struct vm_area_struct *new_vma,unsigned long new_addr, unsigned long len);
do_mremap  prototype  include/linux/mm.h  1046  extern unsigned long do_mremap(unsigned long addr,unsigned long old_len, unsigned long new_len,unsigned long flags, unsigned long new_addr);
mprotect_fixup  prototype  include/linux/mm.h  1049  extern int mprotect_fixup(struct vm_area_struct *vma,struct vm_area_struct **pprev, unsigned long start,unsigned long end, unsigned long newflags);
__get_user_pages_fast  prototype  include/linux/mm.h  1056  int __get_user_pages_fast(unsigned long start,int nr_pages,int write,struct page **pages);
get_mm_counter  function  include/linux/mm.h  1061  static inline unsigned long get_mm_counter(struct mm_struct *mm,int member)
add_mm_counter  function  include/linux/mm.h  1076  static inline void add_mm_counter(struct mm_struct *mm,int member,long value)
inc_mm_counter  function  include/linux/mm.h  1081  static inline void inc_mm_counter(struct mm_struct *mm,int member)
dec_mm_counter  function  include/linux/mm.h  1086  static inline void dec_mm_counter(struct mm_struct *mm,int member)
get_mm_rss  function  include/linux/mm.h  1091  static inline unsigned long get_mm_rss(struct mm_struct *mm)
get_mm_hiwater_rss  function  include/linux/mm.h  1097  static inline unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
get_mm_hiwater_vm  function  include/linux/mm.h  1102  static inline unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
update_hiwater_rss  function  include/linux/mm.h  1107  static inline void update_hiwater_rss(struct mm_struct *mm)
update_hiwater_vm  function  include/linux/mm.h  1115  static inline void update_hiwater_vm(struct mm_struct *mm)
setmax_mm_hiwater_rss  function  include/linux/mm.h  1121  static inline void setmax_mm_hiwater_rss(unsigned long *maxrss,struct mm_struct *mm)
sync_mm_rss  function  include/linux/mm.h  1133  static inline void sync_mm_rss(struct mm_struct *mm)
vma_wants_writenotify  prototype  include/linux/mm.h  1138  int vma_wants_writenotify(struct vm_area_struct *vma);
__get_locked_pte  prototype  include/linux/mm.h  1140  extern pte_t *__get_locked_pte(struct mm_struct *mm,unsigned long addr,spinlock_t **ptl);
get_locked_pte  function  include/linux/mm.h  1142  static inline pte_t *get_locked_pte(struct mm_struct *mm,unsigned long addr,spinlock_t **ptl)
__pud_alloc  prototype  include/linux/mm.h  1157  int __pud_alloc(struct mm_struct *mm,pgd_t *pgd,unsigned long address);
__pmd_alloc  prototype  include/linux/mm.h  1167  int __pmd_alloc(struct mm_struct *mm,pud_t *pud,unsigned long address);
__pte_alloc  prototype  include/linux/mm.h  1170  int __pte_alloc(struct mm_struct *mm,struct vm_area_struct *vma,pmd_t *pmd, unsigned long address);
__pte_alloc_kernel  prototype  include/linux/mm.h  1172  int __pte_alloc_kernel(pmd_t *pmd,unsigned long address);
pud_alloc  function  include/linux/mm.h  1179  static inline pud_t *pud_alloc(struct mm_struct *mm,pgd_t *pgd,unsigned long address)
pmd_alloc  function  include/linux/mm.h  1185  static inline pmd_t *pmd_alloc(struct mm_struct *mm,pud_t *pud,unsigned long address)
__pte_lockptr  macro  include/linux/mm.h  1199  #define __pte_lockptr(page) &((page)->ptl)
pte_lock_init  macro  include/linux/mm.h  1209  #define pte_lock_init(page) do {} while (0)
pte_lock_deinit  macro  include/linux/mm.h  1210  #define pte_lock_deinit(page) do {} while (0)
pte_lockptr  macro  include/linux/mm.h  1211  #define pte_lockptr(mm,pmd) ({(void)(pmd); &(mm)->page_table_lock;})
pgtable_page_ctor  function  include/linux/mm.h  1214  static inline void pgtable_page_ctor(struct page *page)
pgtable_page_dtor  function  include/linux/mm.h  1220  static inline void pgtable_page_dtor(struct page *page)
pte_offset_map_lock  macro  include/linux/mm.h  1226  #define pte_offset_map_lock(mm,pmd,address,ptlp) ({ spinlock_t *__ptl = pte_lockptr(mm, pmd); pte_t *__pte = pte_offset_map(pmd, address); *(ptlp) = __ptl; spin_lock(__ptl); __pte; })
pte_unmap_unlock  macro  include/linux/mm.h  1235  #define pte_unmap_unlock(pte,ptl) do { spin_unlock(ptl); pte_unmap(pte); } while (0)
pte_alloc_map  macro  include/linux/mm.h  1240  #define pte_alloc_map(mm,vma,pmd,address) ((unlikely(pmd_none(*(pmd))) && __pte_alloc(mm, vma, pmd, address))? NULL: pte_offset_map(pmd, address))
pte_alloc_map_lock  macro  include/linux/mm.h  1245  #define pte_alloc_map_lock(mm,pmd,address,ptlp) ((unlikely(pmd_none(*(pmd))) && __pte_alloc(mm, NULL, pmd, address))? NULL: pte_offset_map_lock(mm, pmd, address, ptlp))
pte_alloc_kernel  macro  include/linux/mm.h  1250  #define pte_alloc_kernel(pmd,address) ((unlikely(pmd_none(*(pmd))) && __pte_alloc_kernel(pmd, address))? NULL: pte_offset_kernel(pmd, address))
free_area_init  prototype  include/linux/mm.h  1254  extern void free_area_init(unsigned long * zones_size);
free_area_init_node  prototype  include/linux/mm.h  1255  extern void free_area_init_node(int nid,unsigned long * zones_size,unsigned long zone_start_pfn, unsigned long *zholes_size);
free_initmem  prototype  include/linux/mm.h  1257  extern void free_initmem(void);
free_area_init_nodes  prototype  include/linux/mm.h  1286  extern void free_area_init_nodes(unsigned long *max_zone_pfn);
node_map_pfn_alignment  prototype  include/linux/mm.h  1287  unsigned long node_map_pfn_alignment(void);
__absent_pages_in_range  prototype  include/linux/mm.h  1288  unsigned long __absent_pages_in_range(int nid,unsigned long start_pfn,unsigned long end_pfn);
absent_pages_in_range  prototype  include/linux/mm.h  1290  extern unsigned long absent_pages_in_range(unsigned long start_pfn,unsigned long end_pfn);
get_pfn_range_for_nid  prototype  include/linux/mm.h  1292  extern void get_pfn_range_for_nid(unsigned int nid,unsigned long *start_pfn, unsigned long *end_pfn);
find_min_pfn_with_active_regions  prototype  include/linux/mm.h  1294  extern unsigned long find_min_pfn_with_active_regions(void);
free_bootmem_with_active_regions  prototype  include/linux/mm.h  1295  extern void free_bootmem_with_active_regions(int nid,unsigned long max_low_pfn);
sparse_memory_present_with_active_regions  prototype  include/linux/mm.h  1297  extern void sparse_memory_present_with_active_regions(int nid);
__early_pfn_to_nid  prototype  include/linux/mm.h  1312  extern int __meminit __early_pfn_to_nid(unsigned long pfn);
set_dma_reserve  prototype  include/linux/mm.h  1316  extern void set_dma_reserve(unsigned long new_dma_reserve);
memmap_init_zone  prototype  include/linux/mm.h  1317  extern void memmap_init_zone(unsigned long,int,unsigned long,unsigned long, enum memmap_context);
setup_per_zone_wmarks  prototype  include/linux/mm.h  1319  extern void setup_per_zone_wmarks(void);
init_per_zone_wmark_min  prototype  include/linux/mm.h  1320  extern int __meminit init_per_zone_wmark_min(void);
mem_init  prototype  include/linux/mm.h  1321  extern void mem_init(void);
mmap_init  prototype  include/linux/mm.h  1322  extern void __init mmap_init(void);
show_mem  prototype  include/linux/mm.h  1323  extern void show_mem(unsigned int flags);
si_meminfo  prototype  include/linux/mm.h  1324  extern void si_meminfo(struct sysinfo * val);
si_meminfo_node  prototype  include/linux/mm.h  1325  extern void si_meminfo_node(struct sysinfo *val,int nid);
warn_alloc_failed  prototype  include/linux/mm.h  1329  void warn_alloc_failed(gfp_t gfp_mask,int order,const char *fmt,...);
setup_per_cpu_pageset  prototype  include/linux/mm.h  1331  extern void setup_per_cpu_pageset(void);
zone_pcp_update  prototype  include/linux/mm.h  1333  extern void zone_pcp_update(struct zone *zone);
nommu_shrink_inode_mappings  prototype  include/linux/mm.h  1337  extern int nommu_shrink_inode_mappings(struct inode *,size_t,size_t);
vma_prio_tree_add  prototype  include/linux/mm.h  1340  void vma_prio_tree_add(struct vm_area_struct *,struct vm_area_struct *old);
vma_prio_tree_insert  prototype  include/linux/mm.h  1341  void vma_prio_tree_insert(struct vm_area_struct *,struct prio_tree_root *);
vma_prio_tree_remove  prototype  include/linux/mm.h  1342  void vma_prio_tree_remove(struct vm_area_struct *,struct prio_tree_root *);
vma_prio_tree_next  prototype  include/linux/mm.h  1343  struct vm_area_struct *vma_prio_tree_next(struct vm_area_struct *vma,struct prio_tree_iter *iter);
vma_prio_tree_foreach  macro  include/linux/mm.h  1346  #define vma_prio_tree_foreach(vma,iter,root,begin,end) for (prio_tree_iter_init(iter, root, begin, end), vma = NULL; (vma = vma_prio_tree_next(vma, iter)); )
vma_nonlinear_insert  function  include/linux/mm.h  1350  static inline void vma_nonlinear_insert(struct vm_area_struct *vma,struct list_head *list)
__vm_enough_memory  prototype  include/linux/mm.h  1358  extern int __vm_enough_memory(struct mm_struct *mm,long pages,int cap_sys_admin);
vma_adjust  prototype  include/linux/mm.h  1359  extern int vma_adjust(struct vm_area_struct *vma,unsigned long start,unsigned long end, pgoff_t pgoff, struct vm_area_struct *insert);
vma_merge  prototype  include/linux/mm.h  1361  extern struct vm_area_struct *vma_merge(struct mm_struct *,struct vm_area_struct *prev, unsigned long addr, unsigned long end,unsigned long vm_flags, struct anon_vma *, struct file *, pgoff_t,struct mempolicy *);
find_mergeable_anon_vma  prototype  include/linux/mm.h  1365  extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
split_vma  prototype  include/linux/mm.h  1366  extern int split_vma(struct mm_struct *,struct vm_area_struct *, unsigned long addr, int new_below);
insert_vm_struct  prototype  include/linux/mm.h  1368  extern int insert_vm_struct(struct mm_struct *,struct vm_area_struct *);
__vma_link_rb  prototype  include/linux/mm.h  1369  extern void __vma_link_rb(struct mm_struct *,struct vm_area_struct *,struct rb_node **, struct rb_node *);
unlink_file_vma  prototype  include/linux/mm.h  1371  extern void unlink_file_vma(struct vm_area_struct *);
copy_vma  prototype  include/linux/mm.h  1372  extern struct vm_area_struct *copy_vma(struct vm_area_struct **,unsigned long addr, unsigned long len, pgoff_t pgoff);
exit_mmap  prototype  include/linux/mm.h  1374  extern void exit_mmap(struct mm_struct *);
mm_take_all_locks  prototype  include/linux/mm.h  1376  extern int mm_take_all_locks(struct mm_struct *mm);
mm_drop_all_locks  prototype  include/linux/mm.h  1377  extern void mm_drop_all_locks(struct mm_struct *mm);
added_exe_file_vma  prototype  include/linux/mm.h  1380  extern void added_exe_file_vma(struct mm_struct *mm);
removed_exe_file_vma  prototype  include/linux/mm.h  1381  extern void removed_exe_file_vma(struct mm_struct *mm);
set_mm_exe_file  prototype  include/linux/mm.h  1382  extern void set_mm_exe_file(struct mm_struct *mm,struct file *new_exe_file);
get_mm_exe_file  prototype  include/linux/mm.h  1383  extern struct file *get_mm_exe_file(struct mm_struct *mm);
may_expand_vm  prototype  include/linux/mm.h  1385  extern int may_expand_vm(struct mm_struct *mm,unsigned long npages);
install_special_mapping  prototype  include/linux/mm.h  1386  extern int install_special_mapping(struct mm_struct *mm,unsigned long addr, unsigned long len,unsigned long flags, struct page **pages);
get_unmapped_area  prototype  include/linux/mm.h  1390  extern unsigned long get_unmapped_area(struct file *,unsigned long,unsigned long,unsigned long,unsigned long);
mmap_region  prototype  include/linux/mm.h  1392  extern unsigned long mmap_region(struct file *file,unsigned long addr,unsigned long len, unsigned long flags,vm_flags_t vm_flags, unsigned long pgoff);
do_mmap_pgoff  prototype  include/linux/mm.h  1395  extern unsigned long do_mmap_pgoff(struct file *,unsigned long,unsigned long, unsigned long,unsigned long, unsigned long);
do_munmap  prototype  include/linux/mm.h  1398  extern int do_munmap(struct mm_struct *,unsigned long,size_t);
vm_brk  prototype  include/linux/mm.h  1401  extern unsigned long vm_brk(unsigned long,unsigned long);
vm_munmap  prototype  include/linux/mm.h  1402  extern int vm_munmap(unsigned long,size_t);
vm_mmap  prototype  include/linux/mm.h  1403  extern unsigned long vm_mmap(struct file *,unsigned long,unsigned long, unsigned long,unsigned long, unsigned long);
truncate_inode_pages  prototype  include/linux/mm.h  1408  extern void truncate_inode_pages(struct address_space *,loff_t);
truncate_inode_pages_range  prototype  include/linux/mm.h  1409  extern void truncate_inode_pages_range(struct address_space *,loff_t lstart, loff_t lend);
filemap_fault  prototype  include/linux/mm.h  1413  extern int filemap_fault(struct vm_area_struct *,struct vm_fault *);
write_one_page  prototype  include/linux/mm.h  1416  int write_one_page(struct page *page,int wait);
task_dirty_inc  prototype  include/linux/mm.h  1417  void task_dirty_inc(struct task_struct *tsk);
VM_MAX_READAHEAD  macro  include/linux/mm.h  1420  #define VM_MAX_READAHEAD 128
VM_MIN_READAHEAD  macro  include/linux/mm.h  1421  #define VM_MIN_READAHEAD 16
force_page_cache_readahead  prototype  include/linux/mm.h  1423  int force_page_cache_readahead(struct address_space *mapping,struct file *filp,pgoff_t offset, unsigned long nr_to_read);
page_cache_sync_readahead  prototype  include/linux/mm.h  1426  void page_cache_sync_readahead(struct address_space *mapping,struct file_ra_state *ra,struct file *filp,pgoff_t offset,unsigned long size);
page_cache_async_readahead  prototype  include/linux/mm.h  1432  void page_cache_async_readahead(struct address_space *mapping,struct file_ra_state *ra,struct file *filp,struct page *pg,pgoff_t offset,unsigned long size);
max_sane_readahead  prototype  include/linux/mm.h  1439  unsigned long max_sane_readahead(unsigned long nr);
ra_submit  prototype  include/linux/mm.h  1440  unsigned long ra_submit(struct file_ra_state *ra,struct address_space *mapping,struct file *filp);
expand_stack  prototype  include/linux/mm.h  1445  extern int expand_stack(struct vm_area_struct *vma,unsigned long address);
expand_downwards  prototype  include/linux/mm.h  1448  extern int expand_downwards(struct vm_area_struct *vma,unsigned long address);
expand_upwards  macro  include/linux/mm.h  1453  #define expand_upwards(vma,address) do { } while (0)
find_vma  prototype  include/linux/mm.h  1457  extern struct vm_area_struct * find_vma(struct mm_struct * mm,unsigned long addr);
find_vma_prev  prototype  include/linux/mm.h  1458  extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm,unsigned long addr,struct vm_area_struct **pprev);
find_vma_intersection  function  include/linux/mm.h  1463  static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm,unsigned long start_addr,unsigned long end_addr)
vma_pages  function  include/linux/mm.h  1472  static inline unsigned long vma_pages(struct vm_area_struct *vma)
find_exact_vma  function  include/linux/mm.h  1478  static inline struct vm_area_struct *find_exact_vma(struct mm_struct *mm,unsigned long vm_start, unsigned long vm_end)
vm_get_page_prot  function  include/linux/mm.h  1492  static inline pgprot_t vm_get_page_prot(unsigned long vm_flags)
find_extend_vma  prototype  include/linux/mm.h  1498  struct vm_area_struct *find_extend_vma(struct mm_struct *,unsigned long addr);
remap_pfn_range  prototype  include/linux/mm.h  1499  int remap_pfn_range(struct vm_area_struct *,unsigned long addr,unsigned long pfn, unsigned long size, pgprot_t);
vm_insert_page  prototype  include/linux/mm.h  1501  int vm_insert_page(struct vm_area_struct *,unsigned long addr,struct page *);
vm_insert_pfn  prototype  include/linux/mm.h  1502  int vm_insert_pfn(struct vm_area_struct *vma,unsigned long addr,unsigned long pfn);
vm_insert_mixed  prototype  include/linux/mm.h  1504  int vm_insert_mixed(struct vm_area_struct *vma,unsigned long addr,unsigned long pfn);
follow_page  prototype  include/linux/mm.h  1507  struct page *follow_page(struct vm_area_struct *,unsigned long address,unsigned int foll_flags);
FOLL_WRITE  macro  include/linux/mm.h  1509  #define FOLL_WRITE 0x01
FOLL_TOUCH  macro  include/linux/mm.h  1510  #define FOLL_TOUCH 0x02
FOLL_GET  macro  include/linux/mm.h  1511  #define FOLL_GET 0x04
FOLL_DUMP  macro  include/linux/mm.h  1512  #define FOLL_DUMP 0x08
FOLL_FORCE  macro  include/linux/mm.h  1513  #define FOLL_FORCE 0x10
FOLL_NOWAIT  macro  include/linux/mm.h  1514  #define FOLL_NOWAIT 0x20
FOLL_MLOCK  macro  include/linux/mm.h  1516  #define FOLL_MLOCK 0x40
FOLL_SPLIT  macro  include/linux/mm.h  1517  #define FOLL_SPLIT 0x80
FOLL_HWPOISON  macro  include/linux/mm.h  1518  #define FOLL_HWPOISON 0x100
apply_to_page_range  prototype  include/linux/mm.h  1522  extern int apply_to_page_range(struct mm_struct *mm,unsigned long address,unsigned long size, pte_fn_t fn, void *data);
vm_stat_account  function  include/linux/mm.h  1528  static inline void vm_stat_account(struct mm_struct *mm,unsigned long flags, struct file *file, long pages)
kernel_map_pages  function  include/linux/mm.h  1541  kernel_map_pages(struct page *page,int numpages,int enable) {}
kernel_page_present  function  include/linux/mm.h  1543  static inline bool kernel_page_present(struct page *page) { return true; }
get_gate_vma  prototype  include/linux/mm.h  1547  extern struct vm_area_struct *get_gate_vma(struct mm_struct *mm);
in_gate_area_no_mm  prototype  include/linux/mm.h  1552  int in_gate_area_no_mm(unsigned long addr);
in_gate_area  macro  include/linux/mm.h  1553  #define in_gate_area(mm,addr) ({(void)mm; in_gate_area_no_mm(addr);})
drop_caches_sysctl_handler  prototype  include/linux/mm.h  1556  int drop_caches_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
shrink_slab  prototype  include/linux/mm.h  1558  unsigned long shrink_slab(struct shrink_control *shrink,unsigned long nr_pages_scanned,unsigned long lru_pages);
randomize_va_space  macro  include/linux/mm.h  1563  #define randomize_va_space 0
arch_vma_name  prototype  include/linux/mm.h  1568  const char * arch_vma_name(struct vm_area_struct *vma);
print_vma_addr  prototype  include/linux/mm.h  1569  void print_vma_addr(char *prefix,unsigned long rip);
sparse_mem_maps_populate_node  prototype  include/linux/mm.h  1571  void sparse_mem_maps_populate_node(struct page **map_map,unsigned long pnum_begin,unsigned long pnum_end,unsigned long map_count,int nodeid);
sparse_mem_map_populate  prototype  include/linux/mm.h  1577  struct page *sparse_mem_map_populate(unsigned long pnum,int nid);
vmemmap_pgd_populate  prototype  include/linux/mm.h  1578  pgd_t *vmemmap_pgd_populate(unsigned long addr,int node);
vmemmap_pud_populate  prototype  include/linux/mm.h  1579  pud_t *vmemmap_pud_populate(pgd_t *pgd,unsigned long addr,int node);
vmemmap_pmd_populate  prototype  include/linux/mm.h  1580  pmd_t *vmemmap_pmd_populate(pud_t *pud,unsigned long addr,int node);
vmemmap_pte_populate  prototype  include/linux/mm.h  1581  pte_t *vmemmap_pte_populate(pmd_t *pmd,unsigned long addr,int node);
vmemmap_alloc_block  prototype  include/linux/mm.h  1582  void *vmemmap_alloc_block(unsigned long size,int node);
vmemmap_alloc_block_buf  prototype  include/linux/mm.h  1583  void *vmemmap_alloc_block_buf(unsigned long size,int node);
vmemmap_verify  prototype  include/linux/mm.h  1584  void vmemmap_verify(pte_t *,int,unsigned long,unsigned long);
vmemmap_populate_basepages  prototype  include/linux/mm.h  1585  int vmemmap_populate_basepages(struct page *start_page,unsigned long pages, int node);
vmemmap_populate  prototype  include/linux/mm.h  1587  int vmemmap_populate(struct page *start_page,unsigned long pages,int node);
vmemmap_populate_print_last  prototype  include/linux/mm.h  1588  void vmemmap_populate_print_last(void);
mf_flags  enum  include/linux/mm.h  1591  enum mf_flags { MF_COUNT_INCREASED = 1 << 0, MF_ACTION_REQUIRED = 1 << 1, MF_MUST_KILL = 1 << 2, };
memory_failure  prototype  include/linux/mm.h  1596  extern int memory_failure(unsigned long pfn,int trapno,int flags);
memory_failure_queue  prototype  include/linux/mm.h  1597  extern void memory_failure_queue(unsigned long pfn,int trapno,int flags);
unpoison_memory  prototype  include/linux/mm.h  1598  extern int unpoison_memory(unsigned long pfn);
shake_page  prototype  include/linux/mm.h  1601  extern void shake_page(struct page *p,int access);
soft_offline_page  prototype  include/linux/mm.h  1603  extern int soft_offline_page(struct page *page,int flags);
dump_page  prototype  include/linux/mm.h  1605  extern void dump_page(struct page *page);
clear_huge_page  prototype  include/linux/mm.h  1608  extern void clear_huge_page(struct page *page,unsigned long addr,unsigned int pages_per_huge_page);
copy_user_huge_page  prototype  include/linux/mm.h  1611  extern void copy_user_huge_page(struct page *dst,struct page *src,unsigned long addr, struct vm_area_struct *vma,unsigned int pages_per_huge_page);
debug_guardpage_minorder  function  include/linux/mm.h  1629  static inline unsigned int debug_guardpage_minorder(void) { return 0; }
page_is_guard  function  include/linux/mm.h  1630  static inline bool page_is_guard(struct page *page) { return false; }
_ASM_X86_SCATTERLIST_H  macro  arch/x86/include/asm/scatterlist.h  2  #define _ASM_X86_SCATTERLIST_H
ARCH_HAS_SG_CHAIN  macro  arch/x86/include/asm/scatterlist.h  6  #define ARCH_HAS_SG_CHAIN
_ASM_X86_IO_H  macro  arch/x86/include/asm/io.h  2  #define _ASM_X86_IO_H
ARCH_HAS_IOREMAP_WC  macro  arch/x86/include/asm/io.h  37  #define ARCH_HAS_IOREMAP_WC
build_mmio_read  macro  arch/x86/include/asm/io.h  43  #define build_mmio_read(name,size,type,reg,barrier) static inline type name(const volatile void __iomem *addr) { type ret; asm volatile("mov" size " %1,%0":reg (ret) :"m" (*(volatile type __force *)addr) barrier); return ret; }
build_mmio_write  macro  arch/x86/include/asm/io.h  48  #define build_mmio_write(name,size,type,reg,barrier) static inline void name(type val, volatile void __iomem *addr) { asm volatile("mov" size " %0,%1": :reg (val), "m" (*(volatile type __force *)addr) barrier); }
readb_relaxed  macro  arch/x86/include/asm/io.h  69  #define readb_relaxed(a) __readb(a)
readw_relaxed  macro  arch/x86/include/asm/io.h  70  #define readw_relaxed(a) __readw(a)
readl_relaxed  macro  arch/x86/include/asm/io.h  71  #define readl_relaxed(a) __readl(a)
__raw_readb  macro  arch/x86/include/asm/io.h  72  #define __raw_readb __readb
__raw_readw  macro  arch/x86/include/asm/io.h  73  #define __raw_readw __readw
__raw_readl  macro  arch/x86/include/asm/io.h  74  #define __raw_readl __readl
__raw_writeb  macro  arch/x86/include/asm/io.h  76  #define __raw_writeb __writeb
__raw_writew  macro  arch/x86/include/asm/io.h  77  #define __raw_writew __writew
__raw_writel  macro  arch/x86/include/asm/io.h  78  #define __raw_writel __writel
mmiowb  macro  arch/x86/include/asm/io.h  80  #define mmiowb() barrier()
readq_relaxed  macro  arch/x86/include/asm/io.h  87  #define readq_relaxed(a) readq(a)
__raw_readq  macro  arch/x86/include/asm/io.h  89  #define __raw_readq(a) readq(a)
__raw_writeq  macro  arch/x86/include/asm/io.h  90  #define __raw_writeq(val,addr) writeq(val,addr)
readq  macro  arch/x86/include/asm/io.h  93  #define readq readq
writeq  macro  arch/x86/include/asm/io.h  94  #define writeq writeq
virt_to_phys  function  arch/x86/include/asm/io.h  111  static inline phys_addr_t virt_to_phys(volatile void *address)
phys_to_virt  function  arch/x86/include/asm/io.h  129  static inline void *phys_to_virt(phys_addr_t address)
page_to_phys  macro  arch/x86/include/asm/io.h  137  #define page_to_phys(page) ((dma_addr_t)page_to_pfn(page) << PAGE_SHIFT)
isa_virt_to_bus  function  arch/x86/include/asm/io.h  144  static inline unsigned int isa_virt_to_bus(volatile void *address)
isa_page_to_bus  macro  arch/x86/include/asm/io.h  148  #define isa_page_to_bus(page) ((unsigned int)page_to_phys(page))
isa_bus_to_virt  macro  arch/x86/include/asm/io.h  149  #define isa_bus_to_virt phys_to_virt
virt_to_bus  macro  arch/x86/include/asm/io.h  157  #define virt_to_bus virt_to_phys
bus_to_virt  macro  arch/x86/include/asm/io.h  158  #define bus_to_virt phys_to_virt
ioremap_nocache  prototype  arch/x86/include/asm/io.h  174  extern void __iomem *ioremap_nocache(resource_size_t offset,unsigned long size);
ioremap_cache  prototype  arch/x86/include/asm/io.h  175  extern void __iomem *ioremap_cache(resource_size_t offset,unsigned long size);
ioremap_prot  prototype  arch/x86/include/asm/io.h  176  extern void __iomem *ioremap_prot(resource_size_t offset,unsigned long size,unsigned long prot_val);
ioremap  function  arch/x86/include/asm/io.h  182  static inline void __iomem *ioremap(resource_size_t offset,unsigned long size)
iounmap  prototype  arch/x86/include/asm/io.h  187  extern void iounmap(volatile void __iomem *addr);
set_iounmap_nonlazy  prototype  arch/x86/include/asm/io.h  189  extern void set_iounmap_nonlazy(void);
xlate_dev_kmem_ptr  macro  arch/x86/include/asm/io.h  200  #define xlate_dev_kmem_ptr(p) p
memset_io  function  arch/x86/include/asm/io.h  203  memset_io(volatile void __iomem *addr,unsigned char val,size_t count)
memcpy_fromio  function  arch/x86/include/asm/io.h  209  memcpy_fromio(void *dst,const volatile void __iomem *src,size_t count)
memcpy_toio  function  arch/x86/include/asm/io.h  215  memcpy_toio(volatile void __iomem *dst,const void *src,size_t count)
__ISA_IO_base  macro  arch/x86/include/asm/io.h  228  #define __ISA_IO_base ((char __iomem *)(PAGE_OFFSET))
flush_write_buffers  function  arch/x86/include/asm/io.h  238  static inline void flush_write_buffers(void)
native_io_delay  prototype  arch/x86/include/asm/io.h  247  extern void native_io_delay(void);
io_delay_init  prototype  arch/x86/include/asm/io.h  250  extern void io_delay_init(void);
slow_down_io  function  arch/x86/include/asm/io.h  256  static inline void slow_down_io(void)
BUILDIO  macro  arch/x86/include/asm/io.h  268  #define BUILDIO(bwl,bw,type) static inline void out##bwl(unsigned type value, int port) { asm volatile("out" #bwl " %" #bw "0, %w1" : : "a"(value), "Nd"(port)); } static inline unsigned type in##bwl(int port) { unsigned type value; asm volatile("in" #bwl " %w1, %" #bw "0" : "=a"(value) : "Nd"(port)); return value; } static inline void out##bwl##_p(unsigned type value, int port) { out##bwl(value, port); slow_down_io(); } static inline unsigned type in##bwl##_p(int port) { unsigned type value = in##bwl(port); slow_down_io(); return value; } static inline void outs##bwl(int port, const void *addr, unsigned long count) { asm volatile("rep; outs" #bwl : "+S"(addr), "+c"(count) : "d"(port)); } static inline void ins##bwl(int port, void *addr, unsigned long count) { asm volatile("rep; ins" #bwl : "+D"(addr), "+c"(count) : "d"(port)); }
xlate_dev_mem_ptr  prototype  arch/x86/include/asm/io.h  312  extern void *xlate_dev_mem_ptr(unsigned long phys);
unxlate_dev_mem_ptr  prototype  arch/x86/include/asm/io.h  313  extern void unxlate_dev_mem_ptr(unsigned long phys,void *addr);
ioremap_change_attr  prototype  arch/x86/include/asm/io.h  315  extern int ioremap_change_attr(unsigned long vaddr,unsigned long size,unsigned long prot_val);
ioremap_wc  prototype  arch/x86/include/asm/io.h  317  extern void __iomem *ioremap_wc(resource_size_t offset,unsigned long size);
early_ioremap_init  prototype  arch/x86/include/asm/io.h  324  extern void early_ioremap_init(void);
early_ioremap_reset  prototype  arch/x86/include/asm/io.h  325  extern void early_ioremap_reset(void);
early_ioremap  prototype  arch/x86/include/asm/io.h  326  extern void __iomem *early_ioremap(resource_size_t phys_addr,unsigned long size);
early_memremap  prototype  arch/x86/include/asm/io.h  328  extern void __iomem *early_memremap(resource_size_t phys_addr,unsigned long size);
early_iounmap  prototype  arch/x86/include/asm/io.h  330  extern void early_iounmap(void __iomem *addr,unsigned long size);
fixup_early_ioremap  prototype  arch/x86/include/asm/io.h  331  extern void fixup_early_ioremap(void);
is_early_ioremap_ptep  prototype  arch/x86/include/asm/io.h  332  extern bool is_early_ioremap_ptep(pte_t *ptep);
xen_biovec_phys_mergeable  prototype  arch/x86/include/asm/io.h  338  extern bool xen_biovec_phys_mergeable(const struct bio_vec *vec1,const struct bio_vec *vec2);
BIOVEC_PHYS_MERGEABLE  macro  arch/x86/include/asm/io.h  341  #define BIOVEC_PHYS_MERGEABLE(vec1,vec2) (__BIOVEC_PHYS_MERGEABLE(vec1, vec2) && (!xen_domain() || xen_biovec_phys_mergeable(vec1, vec2)))
IO_SPACE_LIMIT  macro  arch/x86/include/asm/io.h  346  #define IO_SPACE_LIMIT 0xffff
TYPECHECK_H_INCLUDED  macro  include/linux/typecheck.h  2  #define TYPECHECK_H_INCLUDED
typecheck  macro  include/linux/typecheck.h  8  #define typecheck(type,x) ({	type __dummy; typeof(x) __dummy2; (void)(&__dummy == &__dummy2); 1; })
typecheck_fn  macro  include/linux/typecheck.h  19  #define typecheck_fn(type,function) ({	typeof(type) __tmp = function; (void)__tmp; })
__LINUX_PREEMPT_H  macro  include/linux/preempt.h  2  #define __LINUX_PREEMPT_H
add_preempt_count  macro  include/linux/preempt.h  17  # define add_preempt_count(val) do { preempt_count() += (val); } while (0)
sub_preempt_count  macro  include/linux/preempt.h  18  # define sub_preempt_count(val) do { preempt_count() -= (val); } while (0)
inc_preempt_count  macro  include/linux/preempt.h  21  #define inc_preempt_count() add_preempt_count(1)
dec_preempt_count  macro  include/linux/preempt.h  22  #define dec_preempt_count() sub_preempt_count(1)
preempt_count  macro  include/linux/preempt.h  24  #define preempt_count() (current_thread_info()->preempt_count)
preempt_schedule  prototype  include/linux/preempt.h  28  asmlinkage void preempt_schedule(void);
preempt_check_resched  macro  include/linux/preempt.h  38  #define preempt_check_resched() do { } while (0)
preempt_disable  macro  include/linux/preempt.h  96  #define preempt_disable() do { } while (0)
sched_preempt_enable_no_resched  macro  include/linux/preempt.h  97  #define sched_preempt_enable_no_resched() do { } while (0)
preempt_enable_no_resched  macro  include/linux/preempt.h  98  #define preempt_enable_no_resched() do { } while (0)
preempt_enable  macro  include/linux/preempt.h  99  #define preempt_enable() do { } while (0)
add_preempt_count_notrace  macro  include/linux/preempt.h  67  #define add_preempt_count_notrace(val) do { preempt_count() += (val); } while (0)
sub_preempt_count_notrace  macro  include/linux/preempt.h  69  #define sub_preempt_count_notrace(val) do { preempt_count() -= (val); } while (0)
inc_preempt_count_notrace  macro  include/linux/preempt.h  71  #define inc_preempt_count_notrace() add_preempt_count_notrace(1)
dec_preempt_count_notrace  macro  include/linux/preempt.h  72  #define dec_preempt_count_notrace() sub_preempt_count_notrace(1)
preempt_disable_notrace  macro  include/linux/preempt.h  101  #define preempt_disable_notrace() do { } while (0)
preempt_enable_no_resched_notrace  macro  include/linux/preempt.h  102  #define preempt_enable_no_resched_notrace() do { } while (0)
preempt_enable_notrace  macro  include/linux/preempt.h  103  #define preempt_enable_notrace() do { } while (0)
preempt_ops  struct  include/linux/preempt.h  125  struct preempt_ops { void (*sched_in)(struct preempt_notifier *notifier, int cpu); void (*sched_out)(struct preempt_notifier *notifier,struct task_struct *next); };
preempt_notifier  struct  include/linux/preempt.h  138  struct preempt_notifier { struct hlist_node link; struct preempt_ops *ops; };
preempt_notifier_register  prototype  include/linux/preempt.h  143  void preempt_notifier_register(struct preempt_notifier *notifier);
preempt_notifier_unregister  prototype  include/linux/preempt.h  144  void preempt_notifier_unregister(struct preempt_notifier *notifier);
preempt_notifier_init  function  include/linux/preempt.h  146  static inline void preempt_notifier_init(struct preempt_notifier *notifier,struct preempt_ops *ops)
_LINUX_TRACE_IRQFLAGS_H  macro  include/linux/irqflags.h  12  #define _LINUX_TRACE_IRQFLAGS_H
trace_softirqs_on  macro  include/linux/irqflags.h  34  # define trace_softirqs_on(ip) do { } while (0)
trace_softirqs_off  macro  include/linux/irqflags.h  35  # define trace_softirqs_off(ip) do { } while (0)
trace_hardirqs_on  macro  include/linux/irqflags.h  32  # define trace_hardirqs_on() do { } while (0)
trace_hardirqs_off  macro  include/linux/irqflags.h  33  # define trace_hardirqs_off() do { } while (0)
trace_hardirq_context  macro  include/linux/irqflags.h  36  # define trace_hardirq_context(p) 0
trace_softirq_context  macro  include/linux/irqflags.h  37  # define trace_softirq_context(p) 0
trace_hardirqs_enabled  macro  include/linux/irqflags.h  38  # define trace_hardirqs_enabled(p) 0
trace_softirqs_enabled  macro  include/linux/irqflags.h  39  # define trace_softirqs_enabled(p) 0
trace_hardirq_enter  macro  include/linux/irqflags.h  40  # define trace_hardirq_enter() do { } while (0)
trace_hardirq_exit  macro  include/linux/irqflags.h  41  # define trace_hardirq_exit() do { } while (0)
lockdep_softirq_enter  macro  include/linux/irqflags.h  42  # define lockdep_softirq_enter() do { } while (0)
lockdep_softirq_exit  macro  include/linux/irqflags.h  43  # define lockdep_softirq_exit() do { } while (0)
INIT_TRACE_IRQFLAGS  macro  include/linux/irqflags.h  44  # define INIT_TRACE_IRQFLAGS
stop_critical_timings  macro  include/linux/irqflags.h  52  # define stop_critical_timings() do { } while (0)
start_critical_timings  macro  include/linux/irqflags.h  53  # define start_critical_timings() do { } while (0)
raw_local_irq_disable  macro  include/linux/irqflags.h  59  #define raw_local_irq_disable() arch_local_irq_disable()
raw_local_irq_enable  macro  include/linux/irqflags.h  60  #define raw_local_irq_enable() arch_local_irq_enable()
raw_local_irq_save  macro  include/linux/irqflags.h  61  #define raw_local_irq_save(flags) do { typecheck(unsigned long, flags); flags = arch_local_irq_save(); } while (0)
raw_local_irq_restore  macro  include/linux/irqflags.h  66  #define raw_local_irq_restore(flags) do { typecheck(unsigned long, flags); arch_local_irq_restore(flags); } while (0)
raw_local_save_flags  macro  include/linux/irqflags.h  71  #define raw_local_save_flags(flags) do { typecheck(unsigned long, flags); flags = arch_local_save_flags(); } while (0)
raw_irqs_disabled_flags  macro  include/linux/irqflags.h  76  #define raw_irqs_disabled_flags(flags) ({ typecheck(unsigned long, flags); arch_irqs_disabled_flags(flags); })
raw_irqs_disabled  macro  include/linux/irqflags.h  81  #define raw_irqs_disabled() (arch_irqs_disabled())
raw_safe_halt  macro  include/linux/irqflags.h  82  #define raw_safe_halt() arch_safe_halt()
local_irq_enable  macro  include/linux/irqflags.h  136  #define local_irq_enable() do { raw_local_irq_enable(); } while (0)
local_irq_disable  macro  include/linux/irqflags.h  137  #define local_irq_disable() do { raw_local_irq_disable(); } while (0)
local_irq_save  macro  include/linux/irqflags.h  138  #define local_irq_save(flags) do { raw_local_irq_save(flags); } while (0)
local_irq_restore  macro  include/linux/irqflags.h  142  #define local_irq_restore(flags) do { raw_local_irq_restore(flags); } while (0)
local_save_flags  macro  include/linux/irqflags.h  143  #define local_save_flags(flags) do { raw_local_save_flags(flags); } while (0)
irqs_disabled_flags  macro  include/linux/irqflags.h  145  #define irqs_disabled_flags(flags) (raw_irqs_disabled_flags(flags))
irqs_disabled  macro  include/linux/irqflags.h  144  #define irqs_disabled() (raw_irqs_disabled())
safe_halt  macro  include/linux/irqflags.h  146  #define safe_halt() do { raw_safe_halt(); } while (0)
_LINUX_THREAD_INFO_H  macro  include/linux/thread_info.h  8  #define _LINUX_THREAD_INFO_H
restart_block  struct  include/linux/thread_info.h  19  struct restart_block { long (*fn)(struct restart_block *); union { u32 __user *uaddr; u32 val; u32 flags; u32 bitset; u64 time; u32 __user *uaddr2; } futex; clockid_t clockid; struct timespec __user *rmtp; struct compat_timespec __user *compat_rmtp; u64 expires; } nanosleep; struct pollfd __user *ufds; int nfds; int has_timeout; unsigned long tv_sec; unsigned long tv_nsec; } poll; };
do_no_restart_syscall  prototype  include/linux/thread_info.h  51  extern long do_no_restart_syscall(struct restart_block *parm);
THREADINFO_GFP  macro  include/linux/thread_info.h  61  # define THREADINFO_GFP (GFP_KERNEL | __GFP_NOTRACK)
set_ti_thread_flag  function  include/linux/thread_info.h  69  static inline void set_ti_thread_flag(struct thread_info *ti,int flag)
clear_ti_thread_flag  function  include/linux/thread_info.h  74  static inline void clear_ti_thread_flag(struct thread_info *ti,int flag)
test_and_set_ti_thread_flag  function  include/linux/thread_info.h  79  static inline int test_and_set_ti_thread_flag(struct thread_info *ti,int flag)
test_and_clear_ti_thread_flag  function  include/linux/thread_info.h  84  static inline int test_and_clear_ti_thread_flag(struct thread_info *ti,int flag)
test_ti_thread_flag  function  include/linux/thread_info.h  89  static inline int test_ti_thread_flag(struct thread_info *ti,int flag)
set_thread_flag  macro  include/linux/thread_info.h  94  #define set_thread_flag(flag) set_ti_thread_flag(current_thread_info(), flag)
clear_thread_flag  macro  include/linux/thread_info.h  96  #define clear_thread_flag(flag) clear_ti_thread_flag(current_thread_info(), flag)
test_and_set_thread_flag  macro  include/linux/thread_info.h  98  #define test_and_set_thread_flag(flag) test_and_set_ti_thread_flag(current_thread_info(), flag)
test_and_clear_thread_flag  macro  include/linux/thread_info.h  100  #define test_and_clear_thread_flag(flag) test_and_clear_ti_thread_flag(current_thread_info(), flag)
test_thread_flag  macro  include/linux/thread_info.h  102  #define test_thread_flag(flag) test_ti_thread_flag(current_thread_info(), flag)
set_need_resched  macro  include/linux/thread_info.h  105  #define set_need_resched() set_thread_flag(TIF_NEED_RESCHED)
clear_need_resched  macro  include/linux/thread_info.h  106  #define clear_need_resched() clear_thread_flag(TIF_NEED_RESCHED)
HAVE_SET_RESTORE_SIGMASK  macro  include/linux/thread_info.h  113  #define HAVE_SET_RESTORE_SIGMASK 1
set_restore_sigmask  function  include/linux/thread_info.h  126  static inline void set_restore_sigmask(void)
clear_restore_sigmask  function  include/linux/thread_info.h  131  static inline void clear_restore_sigmask(void)
test_restore_sigmask  function  include/linux/thread_info.h  135  static inline bool test_restore_sigmask(void)
test_and_clear_restore_sigmask  function  include/linux/thread_info.h  139  static inline bool test_and_clear_restore_sigmask(void)
_LINUX_BH_H  macro  include/linux/bottom_half.h  2  #define _LINUX_BH_H
local_bh_disable  prototype  include/linux/bottom_half.h  4  extern void local_bh_disable(void);
_local_bh_enable  prototype  include/linux/bottom_half.h  5  extern void _local_bh_enable(void);
local_bh_enable  prototype  include/linux/bottom_half.h  6  extern void local_bh_enable(void);
local_bh_enable_ip  prototype  include/linux/bottom_half.h  7  extern void local_bh_enable_ip(unsigned long ip);
_ASM_X86_BARRIER_H  macro  arch/x86/include/asm/barrier.h  2  #define _ASM_X86_BARRIER_H
mb  macro  arch/x86/include/asm/barrier.h  22  #define mb() asm volatile("mfence":::"memory")
rmb  macro  arch/x86/include/asm/barrier.h  23  #define rmb() asm volatile("lfence":::"memory")
wmb  macro  arch/x86/include/asm/barrier.h  24  #define wmb() asm volatile("sfence" ::: "memory")
read_barrier_depends  macro  arch/x86/include/asm/barrier.h  79  #define read_barrier_depends() do { } while (0)
smp_mb  macro  arch/x86/include/asm/barrier.h  96  #define smp_mb() barrier()
smp_rmb  macro  arch/x86/include/asm/barrier.h  97  #define smp_rmb() barrier()
smp_wmb  macro  arch/x86/include/asm/barrier.h  98  #define smp_wmb() barrier()
smp_read_barrier_depends  macro  arch/x86/include/asm/barrier.h  99  #define smp_read_barrier_depends() do { } while (0)
set_mb  macro  arch/x86/include/asm/barrier.h  100  #define set_mb(var,value) do { var = value; barrier(); } while (0)
rdtsc_barrier  function  arch/x86/include/asm/barrier.h  110  static __always_inline void rdtsc_barrier(void)
__LINUX_SPINLOCK_TYPES_H  macro  include/linux/spinlock_types.h  2  #define __LINUX_SPINLOCK_TYPES_H
raw_spinlock  struct  include/linux/spinlock_types.h  20  typedef struct raw_spinlock { arch_spinlock_t raw_lock; unsigned int break_lock; unsigned int magic, owner_cpu; void *owner; struct lockdep_map dep_map; } raw_spinlock_t;
raw_spinlock_t  struct  include/linux/spinlock_types.h  20  typedef struct raw_spinlock { arch_spinlock_t raw_lock; unsigned int break_lock; unsigned int magic, owner_cpu; void *owner; struct lockdep_map dep_map; } raw_spinlock_t;
SPINLOCK_MAGIC  macro  include/linux/spinlock_types.h  34  #define SPINLOCK_MAGIC 0xdead4ead
SPINLOCK_OWNER_INIT  macro  include/linux/spinlock_types.h  36  #define SPINLOCK_OWNER_INIT ((void *)-1L)
SPIN_DEP_MAP_INIT  macro  include/linux/spinlock_types.h  41  # define SPIN_DEP_MAP_INIT(lockname)
SPIN_DEBUG_INIT  macro  include/linux/spinlock_types.h  50  # define SPIN_DEBUG_INIT(lockname)
__RAW_SPIN_LOCK_INITIALIZER  macro  include/linux/spinlock_types.h  53  #define __RAW_SPIN_LOCK_INITIALIZER(lockname) { .raw_lock = __ARCH_SPIN_LOCK_UNLOCKED, SPIN_DEBUG_INIT(lockname) SPIN_DEP_MAP_INIT(lockname) }
__RAW_SPIN_LOCK_UNLOCKED  macro  include/linux/spinlock_types.h  59  #define __RAW_SPIN_LOCK_UNLOCKED(lockname) (raw_spinlock_t) __RAW_SPIN_LOCK_INITIALIZER(lockname)
DEFINE_RAW_SPINLOCK  macro  include/linux/spinlock_types.h  62  #define DEFINE_RAW_SPINLOCK(x) raw_spinlock_t x = __RAW_SPIN_LOCK_UNLOCKED(x)
spinlock  struct  include/linux/spinlock_types.h  64  typedef struct spinlock { struct raw_spinlock rlock; # define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map)) struct { u8 __padding[LOCK_PADSIZE]; struct lockdep_map dep_map; }; } spinlock_t;
spinlock_t  struct  include/linux/spinlock_types.h  64  typedef struct spinlock { struct raw_spinlock rlock; # define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map)) struct { u8 __padding[LOCK_PADSIZE]; struct lockdep_map dep_map; }; } spinlock_t;
__SPIN_LOCK_INITIALIZER  macro  include/linux/spinlock_types.h  78  #define __SPIN_LOCK_INITIALIZER(lockname) { { .rlock = __RAW_SPIN_LOCK_INITIALIZER(lockname) } }
__SPIN_LOCK_UNLOCKED  macro  include/linux/spinlock_types.h  81  #define __SPIN_LOCK_UNLOCKED(lockname) (spinlock_t ) __SPIN_LOCK_INITIALIZER(lockname)
DEFINE_SPINLOCK  macro  include/linux/spinlock_types.h  84  #define DEFINE_SPINLOCK(x) spinlock_t x = __SPIN_LOCK_UNLOCKED(x)
_ASM_X86_SPINLOCK_H  macro  arch/x86/include/asm/spinlock.h  2  #define _ASM_X86_SPINLOCK_H
LOCK_PTR_REG  macro  arch/x86/include/asm/spinlock.h  24  # define LOCK_PTR_REG "D"
UNLOCK_LOCK_PREFIX  macro  arch/x86/include/asm/spinlock.h  35  # define UNLOCK_LOCK_PREFIX
__ticket_spin_lock  function  arch/x86/include/asm/spinlock.h  51  static __always_inline void __ticket_spin_lock(arch_spinlock_t *lock)
__ticket_spin_trylock  function  arch/x86/include/asm/spinlock.h  66  static __always_inline int __ticket_spin_trylock(arch_spinlock_t *lock)
__ticket_spin_unlock  function  arch/x86/include/asm/spinlock.h  80  static __always_inline void __ticket_spin_unlock(arch_spinlock_t *lock)
__ticket_spin_is_locked  function  arch/x86/include/asm/spinlock.h  85  static inline int __ticket_spin_is_locked(arch_spinlock_t *lock)
__ticket_spin_is_contended  function  arch/x86/include/asm/spinlock.h  92  static inline int __ticket_spin_is_contended(arch_spinlock_t *lock)
arch_spin_is_locked  macro  include/linux/spinlock_up.h  62  #define arch_spin_is_locked(lock) ((void)(lock),0)
arch_spin_is_contended  macro  include/linux/spinlock_up.h  70  #define arch_spin_is_contended(lock) (((void)(lock),0))
arch_spin_lock  macro  include/linux/spinlock_up.h  64  # define arch_spin_lock(lock) do { (void)(lock); } while (0)
arch_spin_trylock  macro  include/linux/spinlock_up.h  67  # define arch_spin_trylock(lock) ({ (void)(lock); 1; })
arch_spin_unlock  macro  include/linux/spinlock_up.h  66  # define arch_spin_unlock(lock) do { (void)(lock); } while (0)
arch_spin_lock_flags  macro  include/linux/spinlock_up.h  65  # define arch_spin_lock_flags(lock,flags) do { (void)(lock); } while (0)
arch_spin_unlock_wait  macro  include/linux/spinlock_up.h  75  #define arch_spin_unlock_wait(lock) do { cpu_relax(); } while (arch_spin_is_locked(lock))
arch_read_can_lock  macro  include/linux/spinlock_up.h  72  #define arch_read_can_lock(lock) (((void)(lock),1))
arch_write_can_lock  macro  include/linux/spinlock_up.h  73  #define arch_write_can_lock(lock) (((void)(lock),1))
arch_read_lock  macro  include/linux/spinlock_up.h  54  #define arch_read_lock(lock) do { (void)(lock); } while (0)
arch_write_lock  macro  include/linux/spinlock_up.h  55  #define arch_write_lock(lock) do { (void)(lock); } while (0)
arch_read_trylock  macro  include/linux/spinlock_up.h  56  #define arch_read_trylock(lock) ({ (void)(lock); 1; })
arch_write_trylock  macro  include/linux/spinlock_up.h  57  #define arch_write_trylock(lock) ({ (void)(lock); 1; })
arch_read_unlock  macro  include/linux/spinlock_up.h  58  #define arch_read_unlock(lock) do { (void)(lock); } while (0)
arch_write_unlock  macro  include/linux/spinlock_up.h  59  #define arch_write_unlock(lock) do { (void)(lock); } while (0)
arch_read_lock_flags  macro  arch/x86/include/asm/spinlock.h  224  #define arch_read_lock_flags(lock,flags) arch_read_lock(lock)
arch_write_lock_flags  macro  arch/x86/include/asm/spinlock.h  225  #define arch_write_lock_flags(lock,flags) arch_write_lock(lock)
READ_LOCK_SIZE  macro  arch/x86/include/asm/spinlock.h  227  #undef READ_LOCK_SIZE
READ_LOCK_ATOMIC  macro  arch/x86/include/asm/spinlock.h  228  #undef READ_LOCK_ATOMIC
WRITE_LOCK_ADD  macro  arch/x86/include/asm/spinlock.h  229  #undef WRITE_LOCK_ADD
WRITE_LOCK_SUB  macro  arch/x86/include/asm/spinlock.h  230  #undef WRITE_LOCK_SUB
WRITE_LOCK_CMP  macro  arch/x86/include/asm/spinlock.h  231  #undef WRITE_LOCK_CMP
arch_spin_relax  macro  arch/x86/include/asm/spinlock.h  233  #define arch_spin_relax(lock) cpu_relax()
arch_read_relax  macro  arch/x86/include/asm/spinlock.h  234  #define arch_read_relax(lock) cpu_relax()
arch_write_relax  macro  arch/x86/include/asm/spinlock.h  235  #define arch_write_relax(lock) cpu_relax()
ARCH_HAS_SMP_MB_AFTER_LOCK  macro  arch/x86/include/asm/spinlock.h  239  #define ARCH_HAS_SMP_MB_AFTER_LOCK
__LINUX_SPINLOCK_UP_H  macro  include/linux/spinlock_up.h  2  #define __LINUX_SPINLOCK_UP_H
__LINUX_RWLOCK_H  macro  include/linux/rwlock.h  2  #define __LINUX_RWLOCK_H
__rwlock_init  prototype  include/linux/rwlock.h  18  extern void __rwlock_init(rwlock_t *lock,const char *name,struct lock_class_key *key);
rwlock_init  macro  include/linux/rwlock.h  27  # define rwlock_init(lock) do { *(lock) = __RW_LOCK_UNLOCKED(lock); } while (0)
do_raw_read_lock_flags  macro  include/linux/rwlock.h  42  # define do_raw_read_lock_flags(lock,flags) do {__acquire(lock); arch_read_lock_flags(&(lock)->raw_lock, *(flags)); } while (0)
do_raw_read_trylock  macro  include/linux/rwlock.h  44  # define do_raw_read_trylock(rwlock) arch_read_trylock(&(rwlock)->raw_lock)
do_raw_write_lock_flags  macro  include/linux/rwlock.h  47  # define do_raw_write_lock_flags(lock,flags) do {__acquire(lock); arch_write_lock_flags(&(lock)->raw_lock, *(flags)); } while (0)
do_raw_write_trylock  macro  include/linux/rwlock.h  49  # define do_raw_write_trylock(rwlock) arch_write_trylock(&(rwlock)->raw_lock)
do_raw_read_lock  macro  include/linux/rwlock.h  41  # define do_raw_read_lock(rwlock) do {__acquire(lock); arch_read_lock(&(rwlock)->raw_lock); } while (0)
do_raw_read_unlock  macro  include/linux/rwlock.h  45  # define do_raw_read_unlock(rwlock) do {arch_read_unlock(&(rwlock)->raw_lock); __release(lock); } while (0)
do_raw_write_lock  macro  include/linux/rwlock.h  46  # define do_raw_write_lock(rwlock) do {__acquire(lock); arch_write_lock(&(rwlock)->raw_lock); } while (0)
do_raw_write_unlock  macro  include/linux/rwlock.h  50  # define do_raw_write_unlock(rwlock) do {arch_write_unlock(&(rwlock)->raw_lock); __release(lock); } while (0)
read_can_lock  macro  include/linux/rwlock.h  53  #define read_can_lock(rwlock) arch_read_can_lock(&(rwlock)->raw_lock)
write_can_lock  macro  include/linux/rwlock.h  54  #define write_can_lock(rwlock) arch_write_can_lock(&(rwlock)->raw_lock)
read_trylock  macro  include/linux/rwlock.h  61  #define read_trylock(lock) __cond_lock(lock,_raw_read_trylock(lock))
write_trylock  macro  include/linux/rwlock.h  62  #define write_trylock(lock) __cond_lock(lock,_raw_write_trylock(lock))
write_lock  macro  include/linux/rwlock.h  64  #define write_lock(lock) _raw_write_lock(lock)
read_lock  macro  include/linux/rwlock.h  65  #define read_lock(lock) _raw_read_lock(lock)
read_lock_irqsave  macro  include/linux/rwlock.h  82  #define read_lock_irqsave(lock,flags) do { typecheck(unsigned long, flags); _raw_read_lock_irqsave(lock, flags); } while (0)
write_lock_irqsave  macro  include/linux/rwlock.h  87  #define write_lock_irqsave(lock,flags) do { typecheck(unsigned long, flags); _raw_write_lock_irqsave(lock, flags); } while (0)
read_lock_irq  macro  include/linux/rwlock.h  95  #define read_lock_irq(lock) _raw_read_lock_irq(lock)
read_lock_bh  macro  include/linux/rwlock.h  96  #define read_lock_bh(lock) _raw_read_lock_bh(lock)
write_lock_irq  macro  include/linux/rwlock.h  97  #define write_lock_irq(lock) _raw_write_lock_irq(lock)
write_lock_bh  macro  include/linux/rwlock.h  98  #define write_lock_bh(lock) _raw_write_lock_bh(lock)
read_unlock  macro  include/linux/rwlock.h  99  #define read_unlock(lock) _raw_read_unlock(lock)
write_unlock  macro  include/linux/rwlock.h  100  #define write_unlock(lock) _raw_write_unlock(lock)
read_unlock_irq  macro  include/linux/rwlock.h  101  #define read_unlock_irq(lock) _raw_read_unlock_irq(lock)
write_unlock_irq  macro  include/linux/rwlock.h  102  #define write_unlock_irq(lock) _raw_write_unlock_irq(lock)
read_unlock_irqrestore  macro  include/linux/rwlock.h  104  #define read_unlock_irqrestore(lock,flags) do { typecheck(unsigned long, flags); _raw_read_unlock_irqrestore(lock, flags); } while (0)
read_unlock_bh  macro  include/linux/rwlock.h  109  #define read_unlock_bh(lock) _raw_read_unlock_bh(lock)
write_unlock_irqrestore  macro  include/linux/rwlock.h  111  #define write_unlock_irqrestore(lock,flags) do { typecheck(unsigned long, flags); _raw_write_unlock_irqrestore(lock, flags); } while (0)
write_unlock_bh  macro  include/linux/rwlock.h  116  #define write_unlock_bh(lock) _raw_write_unlock_bh(lock)
write_trylock_irqsave  macro  include/linux/rwlock.h  118  #define write_trylock_irqsave(lock,flags) ({ local_irq_save(flags); write_trylock(lock) ? 1 : ({ local_irq_restore(flags); 0; }); })
__LINUX_SPINLOCK_API_SMP_H  macro  include/linux/spinlock_api_smp.h  2  #define __LINUX_SPINLOCK_API_SMP_H
in_lock_functions  macro  include/linux/spinlock_api_up.h  17  #define in_lock_functions(ADDR) 0
assert_raw_spin_locked  macro  include/linux/spinlock_api_up.h  19  #define assert_raw_spin_locked(lock) do { (void)(lock); } while (0)
_raw_spin_trylock  macro  include/linux/spinlock_api_up.h  65  #define _raw_spin_trylock(lock) ({ __LOCK(lock); 1; })
_raw_spin_trylock_bh  macro  include/linux/spinlock_api_up.h  68  #define _raw_spin_trylock_bh(lock) ({ __LOCK_BH(lock); 1; })
_raw_spin_lock  macro  include/linux/spinlock_api_up.h  52  #define _raw_spin_lock(lock) __LOCK(lock)
_raw_spin_lock_bh  macro  include/linux/spinlock_api_up.h  56  #define _raw_spin_lock_bh(lock) __LOCK_BH(lock)
_raw_spin_lock_irq  macro  include/linux/spinlock_api_up.h  59  #define _raw_spin_lock_irq(lock) __LOCK_IRQ(lock)
_raw_spin_lock_irqsave  macro  include/linux/spinlock_api_up.h  62  #define _raw_spin_lock_irqsave(lock,flags) __LOCK_IRQSAVE(lock,flags)
_raw_spin_unlock  macro  include/linux/spinlock_api_up.h  69  #define _raw_spin_unlock(lock) __UNLOCK(lock)
_raw_spin_unlock_bh  macro  include/linux/spinlock_api_up.h  72  #define _raw_spin_unlock_bh(lock) __UNLOCK_BH(lock)
_raw_spin_unlock_irq  macro  include/linux/spinlock_api_up.h  75  #define _raw_spin_unlock_irq(lock) __UNLOCK_IRQ(lock)
_raw_spin_unlock_irqrestore  macro  include/linux/spinlock_api_up.h  78  #define _raw_spin_unlock_irqrestore(lock,flags) __UNLOCK_IRQRESTORE(lock, flags)
__raw_spin_trylock  function  include/linux/spinlock_api_smp.h  86  static inline int __raw_spin_trylock(raw_spinlock_t *lock)
__raw_spin_lock_irqsave  function  include/linux/spinlock_api_smp.h  104  static inline unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
__raw_spin_lock_irq  function  include/linux/spinlock_api_smp.h  124  static inline void __raw_spin_lock_irq(raw_spinlock_t *lock)
__raw_spin_lock_bh  function  include/linux/spinlock_api_smp.h  132  static inline void __raw_spin_lock_bh(raw_spinlock_t *lock)
__raw_spin_lock  function  include/linux/spinlock_api_smp.h  140  static inline void __raw_spin_lock(raw_spinlock_t *lock)
__raw_spin_unlock  function  include/linux/spinlock_api_smp.h  149  static inline void __raw_spin_unlock(raw_spinlock_t *lock)
__raw_spin_unlock_irqrestore  function  include/linux/spinlock_api_smp.h  156  static inline void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,unsigned long flags)
__raw_spin_unlock_irq  function  include/linux/spinlock_api_smp.h  165  static inline void __raw_spin_unlock_irq(raw_spinlock_t *lock)
__raw_spin_unlock_bh  function  include/linux/spinlock_api_smp.h  173  static inline void __raw_spin_unlock_bh(raw_spinlock_t *lock)
__raw_spin_trylock_bh  function  include/linux/spinlock_api_smp.h  181  static inline int __raw_spin_trylock_bh(raw_spinlock_t *lock)
__LINUX_SPINLOCK_API_UP_H  macro  include/linux/spinlock_api_up.h  2  #define __LINUX_SPINLOCK_API_UP_H
__LOCK  macro  include/linux/spinlock_api_up.h  27  #define __LOCK(lock) do { preempt_disable(); __acquire(lock); (void)(lock); } while (0)
__LOCK_BH  macro  include/linux/spinlock_api_up.h  30  #define __LOCK_BH(lock) do { local_bh_disable(); __LOCK(lock); } while (0)
__LOCK_IRQ  macro  include/linux/spinlock_api_up.h  33  #define __LOCK_IRQ(lock) do { local_irq_disable(); __LOCK(lock); } while (0)
__LOCK_IRQSAVE  macro  include/linux/spinlock_api_up.h  36  #define __LOCK_IRQSAVE(lock,flags) do { local_irq_save(flags); __LOCK(lock); } while (0)
__UNLOCK  macro  include/linux/spinlock_api_up.h  39  #define __UNLOCK(lock) do { preempt_enable(); __release(lock); (void)(lock); } while (0)
__UNLOCK_BH  macro  include/linux/spinlock_api_up.h  42  #define __UNLOCK_BH(lock) do { preempt_enable_no_resched(); local_bh_enable(); __release(lock); (void)(lock); } while (0)
__UNLOCK_IRQ  macro  include/linux/spinlock_api_up.h  46  #define __UNLOCK_IRQ(lock) do { local_irq_enable(); __UNLOCK(lock); } while (0)
__UNLOCK_IRQRESTORE  macro  include/linux/spinlock_api_up.h  49  #define __UNLOCK_IRQRESTORE(lock,flags) do { local_irq_restore(flags); __UNLOCK(lock); } while (0)
_raw_spin_lock_nested  macro  include/linux/spinlock_api_up.h  53  #define _raw_spin_lock_nested(lock,subclass) __LOCK(lock)
_raw_read_lock  macro  include/linux/spinlock_api_up.h  54  #define _raw_read_lock(lock) __LOCK(lock)
_raw_write_lock  macro  include/linux/spinlock_api_up.h  55  #define _raw_write_lock(lock) __LOCK(lock)
_raw_read_lock_bh  macro  include/linux/spinlock_api_up.h  57  #define _raw_read_lock_bh(lock) __LOCK_BH(lock)
_raw_write_lock_bh  macro  include/linux/spinlock_api_up.h  58  #define _raw_write_lock_bh(lock) __LOCK_BH(lock)
_raw_read_lock_irq  macro  include/linux/spinlock_api_up.h  60  #define _raw_read_lock_irq(lock) __LOCK_IRQ(lock)
_raw_write_lock_irq  macro  include/linux/spinlock_api_up.h  61  #define _raw_write_lock_irq(lock) __LOCK_IRQ(lock)
_raw_read_lock_irqsave  macro  include/linux/spinlock_api_up.h  63  #define _raw_read_lock_irqsave(lock,flags) __LOCK_IRQSAVE(lock,flags)
_raw_write_lock_irqsave  macro  include/linux/spinlock_api_up.h  64  #define _raw_write_lock_irqsave(lock,flags) __LOCK_IRQSAVE(lock,flags)
_raw_read_trylock  macro  include/linux/spinlock_api_up.h  66  #define _raw_read_trylock(lock) ({ __LOCK(lock); 1; })
_raw_write_trylock  macro  include/linux/spinlock_api_up.h  67  #define _raw_write_trylock(lock) ({ __LOCK(lock); 1; })
_raw_read_unlock  macro  include/linux/spinlock_api_up.h  70  #define _raw_read_unlock(lock) __UNLOCK(lock)
_raw_write_unlock  macro  include/linux/spinlock_api_up.h  71  #define _raw_write_unlock(lock) __UNLOCK(lock)
_raw_write_unlock_bh  macro  include/linux/spinlock_api_up.h  73  #define _raw_write_unlock_bh(lock) __UNLOCK_BH(lock)
_raw_read_unlock_bh  macro  include/linux/spinlock_api_up.h  74  #define _raw_read_unlock_bh(lock) __UNLOCK_BH(lock)
_raw_read_unlock_irq  macro  include/linux/spinlock_api_up.h  76  #define _raw_read_unlock_irq(lock) __UNLOCK_IRQ(lock)
_raw_write_unlock_irq  macro  include/linux/spinlock_api_up.h  77  #define _raw_write_unlock_irq(lock) __UNLOCK_IRQ(lock)
_raw_read_unlock_irqrestore  macro  include/linux/spinlock_api_up.h  80  #define _raw_read_unlock_irqrestore(lock,flags) __UNLOCK_IRQRESTORE(lock, flags)
_raw_write_unlock_irqrestore  macro  include/linux/spinlock_api_up.h  82  #define _raw_write_unlock_irqrestore(lock,flags) __UNLOCK_IRQRESTORE(lock, flags)
_LINUX_IOPORT_H  macro  include/linux/ioport.h  9  #define _LINUX_IOPORT_H
resource  struct  include/linux/ioport.h  18  struct resource { resource_size_t start; resource_size_t end; const char *name; unsigned long flags; struct resource *parent, *sibling, *child; };
IORESOURCE_BITS  macro  include/linux/ioport.h  29  #define IORESOURCE_BITS 0x000000ff
IORESOURCE_TYPE_BITS  macro  include/linux/ioport.h  31  #define IORESOURCE_TYPE_BITS 0x00001f00
IORESOURCE_IO  macro  include/linux/ioport.h  32  #define IORESOURCE_IO 0x00000100
IORESOURCE_MEM  macro  include/linux/ioport.h  33  #define IORESOURCE_MEM 0x00000200
IORESOURCE_IRQ  macro  include/linux/ioport.h  34  #define IORESOURCE_IRQ 0x00000400
IORESOURCE_DMA  macro  include/linux/ioport.h  35  #define IORESOURCE_DMA 0x00000800
IORESOURCE_BUS  macro  include/linux/ioport.h  36  #define IORESOURCE_BUS 0x00001000
IORESOURCE_PREFETCH  macro  include/linux/ioport.h  38  #define IORESOURCE_PREFETCH 0x00002000
IORESOURCE_READONLY  macro  include/linux/ioport.h  39  #define IORESOURCE_READONLY 0x00004000
IORESOURCE_CACHEABLE  macro  include/linux/ioport.h  40  #define IORESOURCE_CACHEABLE 0x00008000
IORESOURCE_RANGELENGTH  macro  include/linux/ioport.h  41  #define IORESOURCE_RANGELENGTH 0x00010000
IORESOURCE_SHADOWABLE  macro  include/linux/ioport.h  42  #define IORESOURCE_SHADOWABLE 0x00020000
IORESOURCE_SIZEALIGN  macro  include/linux/ioport.h  44  #define IORESOURCE_SIZEALIGN 0x00040000
IORESOURCE_STARTALIGN  macro  include/linux/ioport.h  45  #define IORESOURCE_STARTALIGN 0x00080000
IORESOURCE_MEM_64  macro  include/linux/ioport.h  47  #define IORESOURCE_MEM_64 0x00100000
IORESOURCE_WINDOW  macro  include/linux/ioport.h  48  #define IORESOURCE_WINDOW 0x00200000
IORESOURCE_MUXED  macro  include/linux/ioport.h  49  #define IORESOURCE_MUXED 0x00400000
IORESOURCE_EXCLUSIVE  macro  include/linux/ioport.h  51  #define IORESOURCE_EXCLUSIVE 0x08000000
IORESOURCE_DISABLED  macro  include/linux/ioport.h  52  #define IORESOURCE_DISABLED 0x10000000
IORESOURCE_UNSET  macro  include/linux/ioport.h  53  #define IORESOURCE_UNSET 0x20000000
IORESOURCE_AUTO  macro  include/linux/ioport.h  54  #define IORESOURCE_AUTO 0x40000000
IORESOURCE_BUSY  macro  include/linux/ioport.h  55  #define IORESOURCE_BUSY 0x80000000
IORESOURCE_IRQ_HIGHEDGE  macro  include/linux/ioport.h  58  #define IORESOURCE_IRQ_HIGHEDGE (1<<0)
IORESOURCE_IRQ_LOWEDGE  macro  include/linux/ioport.h  59  #define IORESOURCE_IRQ_LOWEDGE (1<<1)
IORESOURCE_IRQ_HIGHLEVEL  macro  include/linux/ioport.h  60  #define IORESOURCE_IRQ_HIGHLEVEL (1<<2)
IORESOURCE_IRQ_LOWLEVEL  macro  include/linux/ioport.h  61  #define IORESOURCE_IRQ_LOWLEVEL (1<<3)
IORESOURCE_IRQ_SHAREABLE  macro  include/linux/ioport.h  62  #define IORESOURCE_IRQ_SHAREABLE (1<<4)
IORESOURCE_IRQ_OPTIONAL  macro  include/linux/ioport.h  63  #define IORESOURCE_IRQ_OPTIONAL (1<<5)
IORESOURCE_DMA_TYPE_MASK  macro  include/linux/ioport.h  66  #define IORESOURCE_DMA_TYPE_MASK (3<<0)
IORESOURCE_DMA_8BIT  macro  include/linux/ioport.h  67  #define IORESOURCE_DMA_8BIT (0<<0)
IORESOURCE_DMA_8AND16BIT  macro  include/linux/ioport.h  68  #define IORESOURCE_DMA_8AND16BIT (1<<0)
IORESOURCE_DMA_16BIT  macro  include/linux/ioport.h  69  #define IORESOURCE_DMA_16BIT (2<<0)
IORESOURCE_DMA_MASTER  macro  include/linux/ioport.h  71  #define IORESOURCE_DMA_MASTER (1<<2)
IORESOURCE_DMA_BYTE  macro  include/linux/ioport.h  72  #define IORESOURCE_DMA_BYTE (1<<3)
IORESOURCE_DMA_WORD  macro  include/linux/ioport.h  73  #define IORESOURCE_DMA_WORD (1<<4)
IORESOURCE_DMA_SPEED_MASK  macro  include/linux/ioport.h  75  #define IORESOURCE_DMA_SPEED_MASK (3<<6)
IORESOURCE_DMA_COMPATIBLE  macro  include/linux/ioport.h  76  #define IORESOURCE_DMA_COMPATIBLE (0<<6)
IORESOURCE_DMA_TYPEA  macro  include/linux/ioport.h  77  #define IORESOURCE_DMA_TYPEA (1<<6)
IORESOURCE_DMA_TYPEB  macro  include/linux/ioport.h  78  #define IORESOURCE_DMA_TYPEB (2<<6)
IORESOURCE_DMA_TYPEF  macro  include/linux/ioport.h  79  #define IORESOURCE_DMA_TYPEF (3<<6)
IORESOURCE_MEM_WRITEABLE  macro  include/linux/ioport.h  82  #define IORESOURCE_MEM_WRITEABLE (1<<0)
IORESOURCE_MEM_CACHEABLE  macro  include/linux/ioport.h  83  #define IORESOURCE_MEM_CACHEABLE (1<<1)
IORESOURCE_MEM_RANGELENGTH  macro  include/linux/ioport.h  84  #define IORESOURCE_MEM_RANGELENGTH (1<<2)
IORESOURCE_MEM_TYPE_MASK  macro  include/linux/ioport.h  85  #define IORESOURCE_MEM_TYPE_MASK (3<<3)
IORESOURCE_MEM_8BIT  macro  include/linux/ioport.h  86  #define IORESOURCE_MEM_8BIT (0<<3)
IORESOURCE_MEM_16BIT  macro  include/linux/ioport.h  87  #define IORESOURCE_MEM_16BIT (1<<3)
IORESOURCE_MEM_8AND16BIT  macro  include/linux/ioport.h  88  #define IORESOURCE_MEM_8AND16BIT (2<<3)
IORESOURCE_MEM_32BIT  macro  include/linux/ioport.h  89  #define IORESOURCE_MEM_32BIT (3<<3)
IORESOURCE_MEM_SHADOWABLE  macro  include/linux/ioport.h  90  #define IORESOURCE_MEM_SHADOWABLE (1<<5)
IORESOURCE_MEM_EXPANSIONROM  macro  include/linux/ioport.h  91  #define IORESOURCE_MEM_EXPANSIONROM (1<<6)
IORESOURCE_IO_16BIT_ADDR  macro  include/linux/ioport.h  94  #define IORESOURCE_IO_16BIT_ADDR (1<<0)
IORESOURCE_IO_FIXED  macro  include/linux/ioport.h  95  #define IORESOURCE_IO_FIXED (1<<1)
IORESOURCE_ROM_ENABLE  macro  include/linux/ioport.h  98  #define IORESOURCE_ROM_ENABLE (1<<0)
IORESOURCE_ROM_SHADOW  macro  include/linux/ioport.h  99  #define IORESOURCE_ROM_SHADOW (1<<1)
IORESOURCE_ROM_COPY  macro  include/linux/ioport.h  100  #define IORESOURCE_ROM_COPY (1<<2)
IORESOURCE_ROM_BIOS_COPY  macro  include/linux/ioport.h  101  #define IORESOURCE_ROM_BIOS_COPY (1<<3)
IORESOURCE_PCI_FIXED  macro  include/linux/ioport.h  104  #define IORESOURCE_PCI_FIXED (1<<4)
DEFINE_RES_NAMED  macro  include/linux/ioport.h  108  #define DEFINE_RES_NAMED(_start,_size,_name,_flags) { .start = (_start), .end = (_start) + (_size) - 1, .name = (_name), .flags = (_flags), }
DEFINE_RES_IO_NAMED  macro  include/linux/ioport.h  116  #define DEFINE_RES_IO_NAMED(_start,_size,_name) DEFINE_RES_NAMED((_start), (_size), (_name), IORESOURCE_IO)
DEFINE_RES_IO  macro  include/linux/ioport.h  118  #define DEFINE_RES_IO(_start,_size) DEFINE_RES_IO_NAMED((_start), (_size), NULL)
DEFINE_RES_MEM_NAMED  macro  include/linux/ioport.h  121  #define DEFINE_RES_MEM_NAMED(_start,_size,_name) DEFINE_RES_NAMED((_start), (_size), (_name), IORESOURCE_MEM)
DEFINE_RES_MEM  macro  include/linux/ioport.h  123  #define DEFINE_RES_MEM(_start,_size) DEFINE_RES_MEM_NAMED((_start), (_size), NULL)
DEFINE_RES_IRQ_NAMED  macro  include/linux/ioport.h  126  #define DEFINE_RES_IRQ_NAMED(_irq,_name) DEFINE_RES_NAMED((_irq), 1, (_name), IORESOURCE_IRQ)
DEFINE_RES_IRQ  macro  include/linux/ioport.h  128  #define DEFINE_RES_IRQ(_irq) DEFINE_RES_IRQ_NAMED((_irq), NULL)
DEFINE_RES_DMA_NAMED  macro  include/linux/ioport.h  131  #define DEFINE_RES_DMA_NAMED(_dma,_name) DEFINE_RES_NAMED((_dma), 1, (_name), IORESOURCE_DMA)
DEFINE_RES_DMA  macro  include/linux/ioport.h  133  #define DEFINE_RES_DMA(_dma) DEFINE_RES_DMA_NAMED((_dma), NULL)
request_resource_conflict  prototype  include/linux/ioport.h  140  extern struct resource *request_resource_conflict(struct resource *root,struct resource *new);
request_resource  prototype  include/linux/ioport.h  141  extern int request_resource(struct resource *root,struct resource *new);
release_resource  prototype  include/linux/ioport.h  142  extern int release_resource(struct resource *new);
release_child_resources  prototype  include/linux/ioport.h  143  void release_child_resources(struct resource *new);
reserve_region_with_split  prototype  include/linux/ioport.h  144  extern void reserve_region_with_split(struct resource *root,resource_size_t start, resource_size_t end,const char *name);
insert_resource_conflict  prototype  include/linux/ioport.h  147  extern struct resource *insert_resource_conflict(struct resource *parent,struct resource *new);
insert_resource  prototype  include/linux/ioport.h  148  extern int insert_resource(struct resource *parent,struct resource *new);
insert_resource_expand_to_fit  prototype  include/linux/ioport.h  149  extern void insert_resource_expand_to_fit(struct resource *root,struct resource *new);
arch_remove_reservations  prototype  include/linux/ioport.h  150  extern void arch_remove_reservations(struct resource *avail);
allocate_resource  prototype  include/linux/ioport.h  151  extern int allocate_resource(struct resource *root,struct resource *new,resource_size_t size, resource_size_t min,resource_size_t max, resource_size_t align,resource_size_t (*alignf)(void *,const struct resource *,resource_size_t,resource_size_t),void *alignf_data);
lookup_resource  prototype  include/linux/ioport.h  159  struct resource *lookup_resource(struct resource *root,resource_size_t start);
adjust_resource  prototype  include/linux/ioport.h  160  int adjust_resource(struct resource *res,resource_size_t start,resource_size_t size);
resource_alignment  prototype  include/linux/ioport.h  162  resource_size_t resource_alignment(struct resource *res);
resource_size  function  include/linux/ioport.h  163  static inline resource_size_t resource_size(const struct resource *res)
resource_type  function  include/linux/ioport.h  167  static inline unsigned long resource_type(const struct resource *res)
request_region  macro  include/linux/ioport.h  173  #define request_region(start,n,name) __request_region(&ioport_resource,(start),(n),(name),0)
request_muxed_region  macro  include/linux/ioport.h  174  #define request_muxed_region(start,n,name) __request_region(&ioport_resource,(start),(n),(name),IORESOURCE_MUXED)
__request_mem_region  macro  include/linux/ioport.h  175  #define __request_mem_region(start,n,name,excl) __request_region(&iomem_resource,(start),(n),(name),excl)
request_mem_region  macro  include/linux/ioport.h  176  #define request_mem_region(start,n,name) __request_region(&iomem_resource,(start),(n),(name),0)
request_mem_region_exclusive  macro  include/linux/ioport.h  177  #define request_mem_region_exclusive(start,n,name) __request_region(&iomem_resource, (start), (n), (name), IORESOURCE_EXCLUSIVE)
rename_region  macro  include/linux/ioport.h  179  #define rename_region(region,newname) do { (region)->name = (newname); } while (0)
__request_region  prototype  include/linux/ioport.h  181  extern struct resource * __request_region(struct resource *,resource_size_t start,resource_size_t n,const char *name, int flags);
release_region  macro  include/linux/ioport.h  187  #define release_region(start,n) __release_region(&ioport_resource,(start),(n))
check_mem_region  macro  include/linux/ioport.h  188  #define check_mem_region(start,n) __check_region(&iomem_resource,(start),(n))
release_mem_region  macro  include/linux/ioport.h  189  #define release_mem_region(start,n) __release_region(&iomem_resource,(start),(n))
__check_region  prototype  include/linux/ioport.h  191  extern int __check_region(struct resource *,resource_size_t,resource_size_t);
__release_region  prototype  include/linux/ioport.h  192  extern void __release_region(struct resource *,resource_size_t,resource_size_t);
check_region  function  include/linux/ioport.h  195  static inline int __deprecated check_region(resource_size_t s,resource_size_t n)
devm_request_region  macro  include/linux/ioport.h  203  #define devm_request_region(dev,start,n,name) __devm_request_region(dev, &ioport_resource, (start), (n), (name))
devm_request_mem_region  macro  include/linux/ioport.h  205  #define devm_request_mem_region(dev,start,n,name) __devm_request_region(dev, &iomem_resource, (start), (n), (name))
__devm_request_region  prototype  include/linux/ioport.h  208  extern struct resource * __devm_request_region(struct device *dev,struct resource *parent, resource_size_t start,resource_size_t n, const char *name);
devm_release_region  macro  include/linux/ioport.h  212  #define devm_release_region(dev,start,n) __devm_release_region(dev, &ioport_resource, (start), (n))
devm_release_mem_region  macro  include/linux/ioport.h  214  #define devm_release_mem_region(dev,start,n) __devm_release_region(dev, &iomem_resource, (start), (n))
__devm_release_region  prototype  include/linux/ioport.h  217  extern void __devm_release_region(struct device *dev,struct resource *parent,resource_size_t start, resource_size_t n);
iomem_map_sanity_check  prototype  include/linux/ioport.h  219  extern int iomem_map_sanity_check(resource_size_t addr,unsigned long size);
iomem_is_exclusive  prototype  include/linux/ioport.h  220  extern int iomem_is_exclusive(u64 addr);
walk_system_ram_range  prototype  include/linux/ioport.h  223  walk_system_ram_range(unsigned long start_pfn,unsigned long nr_pages,void *arg, int (*func)(unsigned long, unsigned long, void *));
resource_overlaps  function  include/linux/ioport.h  227  static inline bool resource_overlaps(struct resource *r1,struct resource *r2)
_LINUX_KLIST_H  macro  include/linux/klist.h  13  #define _LINUX_KLIST_H
klist  struct  include/linux/klist.h  20  struct klist { spinlock_t k_lock; struct list_head k_list; void (*get)(struct klist_node *); void (*put)(struct klist_node *); } __attribute__ ((aligned (sizeof(void *))));
KLIST_INIT  macro  include/linux/klist.h  27  #define KLIST_INIT(_name,_get,_put) { .k_lock	= __SPIN_LOCK_UNLOCKED(_name.k_lock), .k_list	= LIST_HEAD_INIT(_name.k_list), .get		= _get, .put		= _put, }
DEFINE_KLIST  macro  include/linux/klist.h  33  #define DEFINE_KLIST(_name,_get,_put) struct klist _name = KLIST_INIT(_name, _get, _put)
klist_init  prototype  include/linux/klist.h  36  extern void klist_init(struct klist *k,void (*get)(struct klist_node *),void (*put)(struct klist_node *));
klist_node  struct  include/linux/klist.h  39  struct klist_node { void *n_klist; struct list_head n_node; struct kref n_ref; };
klist_add_tail  prototype  include/linux/klist.h  45  extern void klist_add_tail(struct klist_node *n,struct klist *k);
klist_add_head  prototype  include/linux/klist.h  46  extern void klist_add_head(struct klist_node *n,struct klist *k);
klist_add_after  prototype  include/linux/klist.h  47  extern void klist_add_after(struct klist_node *n,struct klist_node *pos);
klist_add_before  prototype  include/linux/klist.h  48  extern void klist_add_before(struct klist_node *n,struct klist_node *pos);
klist_del  prototype  include/linux/klist.h  50  extern void klist_del(struct klist_node *n);
klist_remove  prototype  include/linux/klist.h  51  extern void klist_remove(struct klist_node *n);
klist_node_attached  prototype  include/linux/klist.h  53  extern int klist_node_attached(struct klist_node *n);
klist_iter  struct  include/linux/klist.h  56  struct klist_iter { struct klist *i_klist; struct klist_node *i_cur; };
klist_iter_init  prototype  include/linux/klist.h  62  extern void klist_iter_init(struct klist *k,struct klist_iter *i);
klist_iter_init_node  prototype  include/linux/klist.h  63  extern void klist_iter_init_node(struct klist *k,struct klist_iter *i,struct klist_node *n);
klist_iter_exit  prototype  include/linux/klist.h  65  extern void klist_iter_exit(struct klist_iter *i);
klist_next  prototype  include/linux/klist.h  66  extern struct klist_node *klist_next(struct klist_iter *i);
__LINUX_LOCKDEP_H  macro  include/linux/lockdep.h  10  #define __LINUX_LOCKDEP_H
XXX_LOCK_USAGE_STATES  macro  include/linux/lockdep.h  30  #define XXX_LOCK_USAGE_STATES (1+3*4)
MAX_LOCKDEP_SUBCLASSES  macro  include/linux/lockdep.h  32  #define MAX_LOCKDEP_SUBCLASSES 8UL
NR_LOCKDEP_CACHING_CLASSES  macro  include/linux/lockdep.h  43  #define NR_LOCKDEP_CACHING_CLASSES 2
lockdep_subclass_key  struct  include/linux/lockdep.h  50  struct lockdep_subclass_key { char __one_byte; } __attribute__ ((__packed__));
lock_class_key  struct  include/linux/lockdep.h  409  struct lock_class_key { };
LOCKSTAT_POINTS  macro  include/linux/lockdep.h  60  #define LOCKSTAT_POINTS 4
lock_class  struct  include/linux/lockdep.h  65  struct lock_class { struct list_head hash_entry; struct list_head lock_entry; struct lockdep_subclass_key *key; unsigned int subclass; unsigned int dep_gen_id; unsigned long usage_mask; struct stack_trace usage_traces[XXX_LOCK_USAGE_STATES]; struct list_head locks_after, locks_before; unsigned int version; unsigned long ops; const char *name; int name_version; unsigned long contention_point[LOCKSTAT_POINTS]; unsigned long contending_point[LOCKSTAT_POINTS]; };
lock_time  struct  include/linux/lockdep.h  114  struct lock_time { s64 min; s64 max; s64 total; unsigned long nr; };
bounce_type  enum  include/linux/lockdep.h  121  enum bounce_type { bounce_acquired_write, bounce_acquired_read, bounce_contended_write, bounce_contended_read, nr_bounce_types, bounce_acquired = bounce_acquired_write, bounce_contended = bounce_contended_write, };
lock_class_stats  struct  include/linux/lockdep.h  132  struct lock_class_stats { unsigned long contention_point[4]; unsigned long contending_point[4]; struct lock_time read_waittime; struct lock_time write_waittime; struct lock_time read_holdtime; struct lock_time write_holdtime; unsigned long bounces[nr_bounce_types]; };
lock_stats  prototype  include/linux/lockdep.h  142  struct lock_class_stats lock_stats(struct lock_class *class);
clear_lock_stats  prototype  include/linux/lockdep.h  143  void clear_lock_stats(struct lock_class *class);
lockdep_map  struct  include/linux/lockdep.h  150  struct lockdep_map { struct lock_class_key *key; struct lock_class *class_cache[NR_LOCKDEP_CACHING_CLASSES]; const char *name; int cpu; unsigned long ip; };
lockdep_copy_map  function  include/linux/lockdep.h  160  static inline void lockdep_copy_map(struct lockdep_map *to,struct lockdep_map *from)
lock_list  struct  include/linux/lockdep.h  182  struct lock_list { struct list_head entry; struct stack_trace trace; int distance; struct lock_list *parent; };
lock_chain  struct  include/linux/lockdep.h  198  struct lock_chain { u8 irq_context; u8 depth; u16 base; struct list_head entry; u64 chain_key; };
MAX_LOCKDEP_KEYS_BITS  macro  include/linux/lockdep.h  206  #define MAX_LOCKDEP_KEYS_BITS 13
MAX_LOCKDEP_KEYS  macro  include/linux/lockdep.h  212  #define MAX_LOCKDEP_KEYS ((1UL << MAX_LOCKDEP_KEYS_BITS) - 1)
held_lock  struct  include/linux/lockdep.h  214  struct held_lock { u64 prev_chain_key; unsigned long acquire_ip; struct lockdep_map *instance; struct lockdep_map *nest_lock; u64 waittime_stamp; u64 holdtime_stamp; unsigned int class_idx:MAX_LOCKDEP_KEYS_BITS; unsigned int irq_context:2; unsigned int trylock:1; unsigned int read:2; unsigned int check:2; unsigned int hardirqs_off:1; unsigned int references:11; };
lockdep_init  macro  include/linux/lockdep.h  383  # define lockdep_init() do { } while (0)
lockdep_info  macro  include/linux/lockdep.h  384  # define lockdep_info() do { } while (0)
lockdep_reset  macro  include/linux/lockdep.h  403  # define lockdep_reset() do { debug_locks = 1; } while (0)
lockdep_reset_lock  prototype  include/linux/lockdep.h  266  extern void lockdep_reset_lock(struct lockdep_map *lock);
lockdep_free_key_range  macro  include/linux/lockdep.h  404  # define lockdep_free_key_range(start,size) do { } while (0)
lockdep_sys_exit  macro  include/linux/lockdep.h  405  # define lockdep_sys_exit() do { } while (0)
lockdep_off  function  include/linux/lockdep.h  368  static inline void lockdep_off(void)
lockdep_on  function  include/linux/lockdep.h  372  static inline void lockdep_on(void)
lockdep_init_map  macro  include/linux/lockdep.h  385  # define lockdep_init_map(lock,name,key,sub) do { (void)(name); (void)(key); } while (0)
STATIC_LOCKDEP_MAP_INIT  macro  include/linux/lockdep.h  286  #define STATIC_LOCKDEP_MAP_INIT(_name,_key) { .name = (_name), .key = (void *)(_key), }
lockdep_set_class  macro  include/linux/lockdep.h  387  # define lockdep_set_class(lock,key) do { (void)(key); } while (0)
lockdep_set_class_and_name  macro  include/linux/lockdep.h  388  # define lockdep_set_class_and_name(lock,key,name) do { (void)(key); (void)(name); } while (0)
lockdep_set_class_and_subclass  macro  include/linux/lockdep.h  390  #define lockdep_set_class_and_subclass(lock,key,sub) do { (void)(key); } while (0)
lockdep_set_subclass  macro  include/linux/lockdep.h  392  #define lockdep_set_subclass(lock,sub) do { } while (0)
lockdep_set_novalidate_class  macro  include/linux/lockdep.h  394  #define lockdep_set_novalidate_class(lock) do { } while (0)
lockdep_match_class  macro  include/linux/lockdep.h  310  #define lockdep_match_class(lock,key) lockdep_match_key(&(lock)->dep_map,key)
lockdep_match_key  function  include/linux/lockdep.h  312  static inline int lockdep_match_key(struct lockdep_map *lock,struct lock_class_key *key)
lock_acquire  macro  include/linux/lockdep.h  376  # define lock_acquire(l,s,t,r,c,n,i) do { } while (0)
lock_release  macro  include/linux/lockdep.h  377  # define lock_release(l,n,i) do { } while (0)
lockdep_is_held  macro  include/linux/lockdep.h  340  #define lockdep_is_held(lock) lock_is_held(&(lock)->dep_map)
lock_is_held  prototype  include/linux/lockdep.h  342  extern int lock_is_held(struct lockdep_map *lock);
lock_set_class  macro  include/linux/lockdep.h  378  # define lock_set_class(l,n,k,s,i) do { } while (0)
lock_set_subclass  macro  include/linux/lockdep.h  379  # define lock_set_subclass(l,s,i) do { } while (0)
lockdep_set_current_reclaim_state  macro  include/linux/lockdep.h  380  # define lockdep_set_current_reclaim_state(g) do { } while (0)
lockdep_clear_current_reclaim_state  macro  include/linux/lockdep.h  381  # define lockdep_clear_current_reclaim_state() do { } while (0)
lockdep_trace_alloc  macro  include/linux/lockdep.h  382  # define lockdep_trace_alloc(g) do { } while (0)
INIT_LOCKDEP  macro  include/linux/lockdep.h  402  # define INIT_LOCKDEP
lockdep_depth  macro  include/linux/lockdep.h  411  #define lockdep_depth(tsk) (0)
lockdep_assert_held  macro  include/linux/lockdep.h  413  #define lockdep_assert_held(l) do { } while (0)
lockdep_recursing  macro  include/linux/lockdep.h  415  #define lockdep_recursing(tsk) (0)
lock_contended  macro  include/linux/lockdep.h  435  #define lock_contended(lockdep_map,ip) do {} while (0)
lock_acquired  macro  include/linux/lockdep.h  436  #define lock_acquired(lockdep_map,ip) do {} while (0)
LOCK_CONTENDED  macro  include/linux/lockdep.h  438  #define LOCK_CONTENDED(_lock,try,lock) lock(_lock)
LOCK_CONTENDED_FLAGS  macro  include/linux/lockdep.h  455  #define LOCK_CONTENDED_FLAGS(_lock,try,lock,lockfl,flags) lockfl((_lock), (flags))
print_irqtrace_events  function  include/linux/lockdep.h  463  static inline void print_irqtrace_events(struct task_struct *curr)
SINGLE_DEPTH_NESTING  macro  include/linux/lockdep.h  473  #define SINGLE_DEPTH_NESTING 1
spin_acquire  macro  include/linux/lockdep.h  490  # define spin_acquire(l,s,t,i) do { } while (0)
spin_acquire_nest  macro  include/linux/lockdep.h  486  # define spin_acquire_nest(l,s,t,n,i) lock_acquire(l,s,t,0,1,NULL,i)
spin_release  macro  include/linux/lockdep.h  491  # define spin_release(l,n,i) do { } while (0)
rwlock_acquire  macro  include/linux/lockdep.h  504  # define rwlock_acquire(l,s,t,i) do { } while (0)
rwlock_acquire_read  macro  include/linux/lockdep.h  505  # define rwlock_acquire_read(l,s,t,i) do { } while (0)
rwlock_release  macro  include/linux/lockdep.h  506  # define rwlock_release(l,n,i) do { } while (0)
mutex_acquire  macro  include/linux/lockdep.h  519  # define mutex_acquire(l,s,t,i) do { } while (0)
mutex_acquire_nest  macro  include/linux/lockdep.h  520  # define mutex_acquire_nest(l,s,t,n,i) do { } while (0)
mutex_release  macro  include/linux/lockdep.h  521  # define mutex_release(l,n,i) do { } while (0)
rwsem_acquire  macro  include/linux/lockdep.h  534  # define rwsem_acquire(l,s,t,i) do { } while (0)
rwsem_acquire_read  macro  include/linux/lockdep.h  535  # define rwsem_acquire_read(l,s,t,i) do { } while (0)
rwsem_release  macro  include/linux/lockdep.h  536  # define rwsem_release(l,n,i) do { } while (0)
lock_map_acquire  macro  include/linux/lockdep.h  549  # define lock_map_acquire(l) do { } while (0)
lock_map_acquire_read  macro  include/linux/lockdep.h  550  # define lock_map_acquire_read(l) do { } while (0)
lock_map_release  macro  include/linux/lockdep.h  551  # define lock_map_release(l) do { } while (0)
might_lock  macro  include/linux/lockdep.h  568  # define might_lock(lock) do { } while (0)
might_lock_read  macro  include/linux/lockdep.h  569  # define might_lock_read(lock) do { } while (0)
lockdep_rcu_suspicious  prototype  include/linux/lockdep.h  573  void lockdep_rcu_suspicious(const char *file,const int line,const char *s);
__LINUX_MUTEX_H  macro  include/linux/mutex.h  11  #define __LINUX_MUTEX_H
mutex  struct  include/linux/mutex.h  48  struct mutex { atomic_t count; spinlock_t wait_lock; struct list_head wait_list; struct task_struct *owner; const char *name; void *magic; struct lockdep_map dep_map; };
mutex_waiter  struct  include/linux/mutex.h  69  struct mutex_waiter { struct list_head list; struct task_struct *task; void *magic; };
__DEBUG_MUTEX_INITIALIZER  macro  include/linux/mutex.h  80  # define __DEBUG_MUTEX_INITIALIZER(lockname)
mutex_init  macro  include/linux/mutex.h  89  # define mutex_init(mutex) do { static struct lock_class_key __key; __mutex_init((mutex), #mutex, &__key); } while (0)
mutex_destroy  function  include/linux/mutex.h  95  static inline void mutex_destroy(struct mutex *lock) {}
__DEP_MAP_MUTEX_INITIALIZER  macro  include/linux/mutex.h  102  # define __DEP_MAP_MUTEX_INITIALIZER(lockname)
__MUTEX_INITIALIZER  macro  include/linux/mutex.h  105  #define __MUTEX_INITIALIZER(lockname) { .count = ATOMIC_INIT(1) , .wait_lock = __SPIN_LOCK_UNLOCKED(lockname.wait_lock) , .wait_list = LIST_HEAD_INIT(lockname.wait_list) __DEBUG_MUTEX_INITIALIZER(lockname) __DEP_MAP_MUTEX_INITIALIZER(lockname) }
DEFINE_MUTEX  macro  include/linux/mutex.h  112  #define DEFINE_MUTEX(mutexname) struct mutex mutexname = __MUTEX_INITIALIZER(mutexname)
__mutex_init  prototype  include/linux/mutex.h  115  extern void __mutex_init(struct mutex *lock,const char *name,struct lock_class_key *key);
mutex_is_locked  function  include/linux/mutex.h  124  static inline int mutex_is_locked(struct mutex *lock)
mutex_lock_nested  macro  include/linux/mutex.h  156  # define mutex_lock_nested(lock,subclass) mutex_lock(lock)
_mutex_lock_nest_lock  prototype  include/linux/mutex.h  135  extern void _mutex_lock_nest_lock(struct mutex *lock,struct lockdep_map *nest_lock);
mutex_lock_interruptible_nested  macro  include/linux/mutex.h  157  # define mutex_lock_interruptible_nested(lock,subclass) mutex_lock_interruptible(lock)
mutex_lock_killable_nested  macro  include/linux/mutex.h  158  # define mutex_lock_killable_nested(lock,subclass) mutex_lock_killable(lock)
mutex_lock  prototype  include/linux/mutex.h  152  extern void mutex_lock(struct mutex *lock);
mutex_lock_interruptible  prototype  include/linux/mutex.h  153  extern int __must_check mutex_lock_interruptible(struct mutex *lock);
mutex_lock_killable  prototype  include/linux/mutex.h  154  extern int __must_check mutex_lock_killable(struct mutex *lock);
mutex_lock_nest_lock  macro  include/linux/mutex.h  159  # define mutex_lock_nest_lock(lock,nest_lock) mutex_lock(lock)
mutex_trylock  prototype  include/linux/mutex.h  168  extern int mutex_trylock(struct mutex *lock);
mutex_unlock  prototype  include/linux/mutex.h  169  extern void mutex_unlock(struct mutex *lock);
atomic_dec_and_mutex_lock  prototype  include/linux/mutex.h  170  extern int atomic_dec_and_mutex_lock(atomic_t *cnt,struct mutex *lock);
arch_mutex_cpu_relax  macro  include/linux/mutex.h  173  #define arch_mutex_cpu_relax() cpu_relax()
_LINUX_PM_H  macro  include/linux/pm.h  22  #define _LINUX_PM_H
power_group_name  macro  include/linux/pm.h  47  #define power_group_name NULL
pm_message  struct  include/linux/pm.h  50  typedef struct pm_message { int event; } pm_message_t;
pm_message_t  struct  include/linux/pm.h  50  typedef struct pm_message { int event; } pm_message_t;
dev_pm_ops  struct  include/linux/pm.h  264  struct dev_pm_ops { int (*prepare)(struct device *dev); void (*complete)(struct device *dev); int (*suspend)(struct device *dev); int (*resume)(struct device *dev); int (*freeze)(struct device *dev); int (*thaw)(struct device *dev); int (*poweroff)(struct device *dev); int (*restore)(struct device *dev); int (*suspend_late)(struct device *dev); int (*resume_early)(struct device *dev); int (*freeze_late)(struct device *dev); int (*thaw_early)(struct device *dev); int (*poweroff_late)(struct device *dev); int (*restore_early)(struct device *dev); int (*suspend_noirq)(struct device *dev); int (*resume_noirq)(struct device *dev); int (*freeze_noirq)(struct device *dev); int (*thaw_noirq)(struct device *dev); int (*poweroff_noirq)(struct device *dev); int (*restore_noirq)(struct device *dev); int (*runtime_suspend)(struct device *dev); int (*runtime_resume)(struct device *dev); int (*runtime_idle)(struct device *dev); };
SET_SYSTEM_SLEEP_PM_OPS  macro  include/linux/pm.h  299  #define SET_SYSTEM_SLEEP_PM_OPS(suspend_fn,resume_fn)
SET_RUNTIME_PM_OPS  macro  include/linux/pm.h  308  #define SET_RUNTIME_PM_OPS(suspend_fn,resume_fn,idle_fn)
SIMPLE_DEV_PM_OPS  macro  include/linux/pm.h  315  #define SIMPLE_DEV_PM_OPS(name,suspend_fn,resume_fn) const struct dev_pm_ops name = { SET_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) }
UNIVERSAL_DEV_PM_OPS  macro  include/linux/pm.h  333  #define UNIVERSAL_DEV_PM_OPS(name,suspend_fn,resume_fn,idle_fn) const struct dev_pm_ops name = { SET_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) SET_RUNTIME_PM_OPS(suspend_fn, resume_fn, idle_fn) }
PM_EVENT_INVALID  macro  include/linux/pm.h  391  #define PM_EVENT_INVALID (-1)
PM_EVENT_ON  macro  include/linux/pm.h  392  #define PM_EVENT_ON 0x0000
PM_EVENT_FREEZE  macro  include/linux/pm.h  393  #define PM_EVENT_FREEZE 0x0001
PM_EVENT_SUSPEND  macro  include/linux/pm.h  394  #define PM_EVENT_SUSPEND 0x0002
PM_EVENT_HIBERNATE  macro  include/linux/pm.h  395  #define PM_EVENT_HIBERNATE 0x0004
PM_EVENT_QUIESCE  macro  include/linux/pm.h  396  #define PM_EVENT_QUIESCE 0x0008
PM_EVENT_RESUME  macro  include/linux/pm.h  397  #define PM_EVENT_RESUME 0x0010
PM_EVENT_THAW  macro  include/linux/pm.h  398  #define PM_EVENT_THAW 0x0020
PM_EVENT_RESTORE  macro  include/linux/pm.h  399  #define PM_EVENT_RESTORE 0x0040
PM_EVENT_RECOVER  macro  include/linux/pm.h  400  #define PM_EVENT_RECOVER 0x0080
PM_EVENT_USER  macro  include/linux/pm.h  401  #define PM_EVENT_USER 0x0100
PM_EVENT_REMOTE  macro  include/linux/pm.h  402  #define PM_EVENT_REMOTE 0x0200
PM_EVENT_AUTO  macro  include/linux/pm.h  403  #define PM_EVENT_AUTO 0x0400
PM_EVENT_SLEEP  macro  include/linux/pm.h  405  #define PM_EVENT_SLEEP (PM_EVENT_SUSPEND | PM_EVENT_HIBERNATE)
PM_EVENT_USER_SUSPEND  macro  include/linux/pm.h  406  #define PM_EVENT_USER_SUSPEND (PM_EVENT_USER | PM_EVENT_SUSPEND)
PM_EVENT_USER_RESUME  macro  include/linux/pm.h  407  #define PM_EVENT_USER_RESUME (PM_EVENT_USER | PM_EVENT_RESUME)
PM_EVENT_REMOTE_RESUME  macro  include/linux/pm.h  408  #define PM_EVENT_REMOTE_RESUME (PM_EVENT_REMOTE | PM_EVENT_RESUME)
PM_EVENT_AUTO_SUSPEND  macro  include/linux/pm.h  409  #define PM_EVENT_AUTO_SUSPEND (PM_EVENT_AUTO | PM_EVENT_SUSPEND)
PM_EVENT_AUTO_RESUME  macro  include/linux/pm.h  410  #define PM_EVENT_AUTO_RESUME (PM_EVENT_AUTO | PM_EVENT_RESUME)
PMSG_INVALID  macro  include/linux/pm.h  412  #define PMSG_INVALID ((struct pm_message){ .event = PM_EVENT_INVALID,})
PMSG_ON  macro  include/linux/pm.h  413  #define PMSG_ON ((struct pm_message){ .event = PM_EVENT_ON,})
PMSG_FREEZE  macro  include/linux/pm.h  414  #define PMSG_FREEZE ((struct pm_message){ .event = PM_EVENT_FREEZE,})
PMSG_QUIESCE  macro  include/linux/pm.h  415  #define PMSG_QUIESCE ((struct pm_message){ .event = PM_EVENT_QUIESCE,})
PMSG_SUSPEND  macro  include/linux/pm.h  416  #define PMSG_SUSPEND ((struct pm_message){ .event = PM_EVENT_SUSPEND,})
PMSG_HIBERNATE  macro  include/linux/pm.h  417  #define PMSG_HIBERNATE ((struct pm_message){ .event = PM_EVENT_HIBERNATE,})
PMSG_RESUME  macro  include/linux/pm.h  418  #define PMSG_RESUME ((struct pm_message){ .event = PM_EVENT_RESUME,})
PMSG_THAW  macro  include/linux/pm.h  419  #define PMSG_THAW ((struct pm_message){ .event = PM_EVENT_THAW,})
PMSG_RESTORE  macro  include/linux/pm.h  420  #define PMSG_RESTORE ((struct pm_message){ .event = PM_EVENT_RESTORE,})
PMSG_RECOVER  macro  include/linux/pm.h  421  #define PMSG_RECOVER ((struct pm_message){ .event = PM_EVENT_RECOVER,})
PMSG_USER_SUSPEND  macro  include/linux/pm.h  422  #define PMSG_USER_SUSPEND ((struct pm_message) { .event = PM_EVENT_USER_SUSPEND, })
PMSG_USER_RESUME  macro  include/linux/pm.h  424  #define PMSG_USER_RESUME ((struct pm_message) { .event = PM_EVENT_USER_RESUME, })
PMSG_REMOTE_RESUME  macro  include/linux/pm.h  426  #define PMSG_REMOTE_RESUME ((struct pm_message) { .event = PM_EVENT_REMOTE_RESUME, })
PMSG_AUTO_SUSPEND  macro  include/linux/pm.h  428  #define PMSG_AUTO_SUSPEND ((struct pm_message) { .event = PM_EVENT_AUTO_SUSPEND, })
PMSG_AUTO_RESUME  macro  include/linux/pm.h  430  #define PMSG_AUTO_RESUME ((struct pm_message) { .event = PM_EVENT_AUTO_RESUME, })
PMSG_IS_AUTO  macro  include/linux/pm.h  433  #define PMSG_IS_AUTO(msg) (((msg).event & PM_EVENT_AUTO) != 0)
rpm_status  enum  include/linux/pm.h  458  enum rpm_status { RPM_ACTIVE = 0, RPM_RESUMING, RPM_SUSPENDED, RPM_SUSPENDING, };
rpm_request  enum  include/linux/pm.h  480  enum rpm_request { RPM_REQ_NONE = 0, RPM_REQ_IDLE, RPM_REQ_SUSPEND, RPM_REQ_AUTOSUSPEND, RPM_REQ_RESUME, };
pm_domain_data  struct  include/linux/pm.h  490  struct pm_domain_data { struct list_head list_node; struct device *dev; };
pm_subsys_data  struct  include/linux/pm.h  495  struct pm_subsys_data { spinlock_t lock; unsigned int refcount; struct list_head clock_list; struct pm_domain_data *domain_data; };
dev_pm_info  struct  include/linux/pm.h  506  struct dev_pm_info { pm_message_t power_state; unsigned int can_wakeup:1; unsigned int async_suspend:1; bool is_prepared:1; bool is_suspended:1; bool ignore_children:1; spinlock_t lock; struct list_head entry; struct completion completion; struct wakeup_source *wakeup; bool wakeup_path:1; unsigned int should_wakeup:1; struct timer_list suspend_timer; unsigned long timer_expires; struct work_struct work; wait_queue_head_t wait_queue; atomic_t usage_count; atomic_t child_count; unsigned int disable_depth:3; unsigned int idle_notification:1; unsigned int request_pending:1; unsigned int deferred_resume:1; unsigned int run_wake:1; unsigned int runtime_auto:1; unsigned int no_callbacks:1; unsigned int irq_safe:1; unsigned int use_autosuspend:1; unsigned int timer_autosuspends:1; enum rpm_request request; enum rpm_status runtime_status; int runtime_error; int autosuspend_delay; unsigned long last_busy; unsigned long active_jiffies; unsigned long suspended_jiffies; unsigned long accounting_timestamp; struct dev_pm_qos_request *pq_req; struct pm_subsys_data *subsys_data; struct pm_qos_constraints *constraints; };
update_pm_runtime_accounting  prototype  include/linux/pm.h  553  extern void update_pm_runtime_accounting(struct device *dev);
dev_pm_get_subsys_data  prototype  include/linux/pm.h  554  extern int dev_pm_get_subsys_data(struct device *dev);
dev_pm_put_subsys_data  prototype  include/linux/pm.h  555  extern int dev_pm_put_subsys_data(struct device *dev);
dev_pm_domain  struct  include/linux/pm.h  562  struct dev_pm_domain { struct dev_pm_ops ops; };
PM_EVENT_PRETHAW  macro  include/linux/pm.h  573  #define PM_EVENT_PRETHAW PM_EVENT_QUIESCE
device_pm_lock  macro  include/linux/pm.h  665  #define device_pm_lock() do {} while (0)
dpm_resume_start  prototype  include/linux/pm.h  622  extern void dpm_resume_start(pm_message_t state);
dpm_resume_end  prototype  include/linux/pm.h  623  extern void dpm_resume_end(pm_message_t state);
dpm_resume  prototype  include/linux/pm.h  624  extern void dpm_resume(pm_message_t state);
dpm_complete  prototype  include/linux/pm.h  625  extern void dpm_complete(pm_message_t state);
device_pm_unlock  macro  include/linux/pm.h  666  #define device_pm_unlock() do {} while (0)
dpm_suspend_end  prototype  include/linux/pm.h  628  extern int dpm_suspend_end(pm_message_t state);
dpm_suspend_start  function  include/linux/pm.h  668  static inline int dpm_suspend_start(pm_message_t state)
dpm_suspend  prototype  include/linux/pm.h  630  extern int dpm_suspend(pm_message_t state);
dpm_prepare  prototype  include/linux/pm.h  631  extern int dpm_prepare(pm_message_t state);
__suspend_report_result  prototype  include/linux/pm.h  633  extern void __suspend_report_result(const char *function,void *fn,int ret);
suspend_report_result  macro  include/linux/pm.h  673  #define suspend_report_result(fn,ret) do {} while (0)
device_pm_wait_for_dev  function  include/linux/pm.h  675  static inline int device_pm_wait_for_dev(struct device *a,struct device *b)
pm_generic_prepare  macro  include/linux/pm.h  680  #define pm_generic_prepare NULL
pm_generic_suspend_late  prototype  include/linux/pm.h  643  extern int pm_generic_suspend_late(struct device *dev);
pm_generic_suspend_noirq  prototype  include/linux/pm.h  644  extern int pm_generic_suspend_noirq(struct device *dev);
pm_generic_suspend  macro  include/linux/pm.h  681  #define pm_generic_suspend NULL
pm_generic_resume_early  prototype  include/linux/pm.h  646  extern int pm_generic_resume_early(struct device *dev);
pm_generic_resume_noirq  prototype  include/linux/pm.h  647  extern int pm_generic_resume_noirq(struct device *dev);
pm_generic_resume  macro  include/linux/pm.h  682  #define pm_generic_resume NULL
pm_generic_freeze_noirq  prototype  include/linux/pm.h  649  extern int pm_generic_freeze_noirq(struct device *dev);
pm_generic_freeze_late  prototype  include/linux/pm.h  650  extern int pm_generic_freeze_late(struct device *dev);
pm_generic_freeze  macro  include/linux/pm.h  683  #define pm_generic_freeze NULL
pm_generic_thaw_noirq  prototype  include/linux/pm.h  652  extern int pm_generic_thaw_noirq(struct device *dev);
pm_generic_thaw_early  prototype  include/linux/pm.h  653  extern int pm_generic_thaw_early(struct device *dev);
pm_generic_thaw  macro  include/linux/pm.h  684  #define pm_generic_thaw NULL
pm_generic_restore_noirq  prototype  include/linux/pm.h  655  extern int pm_generic_restore_noirq(struct device *dev);
pm_generic_restore_early  prototype  include/linux/pm.h  656  extern int pm_generic_restore_early(struct device *dev);
pm_generic_restore  macro  include/linux/pm.h  685  #define pm_generic_restore NULL
pm_generic_poweroff_noirq  prototype  include/linux/pm.h  658  extern int pm_generic_poweroff_noirq(struct device *dev);
pm_generic_poweroff_late  prototype  include/linux/pm.h  659  extern int pm_generic_poweroff_late(struct device *dev);
pm_generic_poweroff  macro  include/linux/pm.h  686  #define pm_generic_poweroff NULL
pm_generic_complete  macro  include/linux/pm.h  687  #define pm_generic_complete NULL
dpm_order  enum  include/linux/pm.h  691  enum dpm_order { DPM_ORDER_NONE, DPM_ORDER_DEV_AFTER_PARENT, DPM_ORDER_PARENT_BEFORE_DEV, DPM_ORDER_DEV_LAST, };
_LINUX_RATELIMIT_H  macro  include/linux/ratelimit.h  2  #define _LINUX_RATELIMIT_H
DEFAULT_RATELIMIT_INTERVAL  macro  include/linux/ratelimit.h  7  #define DEFAULT_RATELIMIT_INTERVAL (5 * HZ)
DEFAULT_RATELIMIT_BURST  macro  include/linux/ratelimit.h  8  #define DEFAULT_RATELIMIT_BURST 10
ratelimit_state  struct  include/linux/ratelimit.h  10  struct ratelimit_state { raw_spinlock_t lock; int interval; int burst; int printed; int missed; unsigned long begin; };
DEFINE_RATELIMIT_STATE  macro  include/linux/ratelimit.h  20  #define DEFINE_RATELIMIT_STATE(name,interval_init,burst_init) struct ratelimit_state name = { .lock		= __RAW_SPIN_LOCK_UNLOCKED(name.lock), .interval	= interval_init, .burst		= burst_init, }
ratelimit_state_init  function  include/linux/ratelimit.h  28  static inline void ratelimit_state_init(struct ratelimit_state *rs,int interval, int burst)
___ratelimit  prototype  include/linux/ratelimit.h  41  extern int ___ratelimit(struct ratelimit_state *rs,const char *func);
__ratelimit  macro  include/linux/ratelimit.h  42  #define __ratelimit(state) ___ratelimit(state,__func__)
WARN_ON_RATELIMIT  macro  include/linux/ratelimit.h  67  #define WARN_ON_RATELIMIT(condition,state) WARN_ON(condition)
__WARN_RATELIMIT  macro  include/linux/ratelimit.h  70  #define __WARN_RATELIMIT(condition,state,format...) ({ int rtn = WARN(condition, format); rtn; })
WARN_RATELIMIT  macro  include/linux/ratelimit.h  76  #define WARN_RATELIMIT(condition,format...) ({ int rtn = WARN(condition, format); rtn; })
_ASM_X86_DEVICE_H  macro  arch/x86/include/asm/device.h  2  #define _ASM_X86_DEVICE_H
dev_archdata  struct  arch/x86/include/asm/device.h  4  struct dev_archdata { void *acpi_handle; struct dma_map_ops *dma_ops; void *iommu; };
pdev_archdata  struct  arch/x86/include/asm/device.h  16  struct pdev_archdata { };
_LINUX_PM_WAKEUP_H  macro  include/linux/pm_wakeup.h  23  #define _LINUX_PM_WAKEUP_H
wakeup_source  struct  include/linux/pm_wakeup.h  46  struct wakeup_source { const char *name; struct list_head entry; spinlock_t lock; struct timer_list timer; unsigned long timer_expires; ktime_t total_time; ktime_t max_time; ktime_t last_time; ktime_t start_prevent_time; ktime_t prevent_sleep_time; unsigned long event_count; unsigned long active_count; unsigned long relax_count; unsigned long expire_count; unsigned long wakeup_count; bool active:1; bool autosleep_enabled:1; };
device_can_wakeup  function  include/linux/pm_wakeup.h  110  static inline bool device_can_wakeup(struct device *dev)
device_may_wakeup  function  include/linux/pm_wakeup.h  163  static inline bool device_may_wakeup(struct device *dev)
wakeup_source_prepare  function  include/linux/pm_wakeup.h  115  static inline void wakeup_source_prepare(struct wakeup_source *ws,const char *name) {}
wakeup_source_create  function  include/linux/pm_wakeup.h  118  static inline struct wakeup_source *wakeup_source_create(const char *name)
wakeup_source_drop  function  include/linux/pm_wakeup.h  123  static inline void wakeup_source_drop(struct wakeup_source *ws) {}
wakeup_source_destroy  function  include/linux/pm_wakeup.h  125  static inline void wakeup_source_destroy(struct wakeup_source *ws) {}
wakeup_source_add  function  include/linux/pm_wakeup.h  127  static inline void wakeup_source_add(struct wakeup_source *ws) {}
wakeup_source_remove  function  include/linux/pm_wakeup.h  129  static inline void wakeup_source_remove(struct wakeup_source *ws) {}
wakeup_source_register  function  include/linux/pm_wakeup.h  131  static inline struct wakeup_source *wakeup_source_register(const char *name)
wakeup_source_unregister  function  include/linux/pm_wakeup.h  136  static inline void wakeup_source_unregister(struct wakeup_source *ws) {}
device_wakeup_enable  function  include/linux/pm_wakeup.h  138  static inline int device_wakeup_enable(struct device *dev)
device_wakeup_disable  function  include/linux/pm_wakeup.h  144  static inline int device_wakeup_disable(struct device *dev)
device_set_wakeup_capable  function  include/linux/pm_wakeup.h  105  static inline void device_set_wakeup_capable(struct device *dev,bool capable)
device_init_wakeup  function  include/linux/pm_wakeup.h  156  static inline int device_init_wakeup(struct device *dev,bool val)
device_set_wakeup_enable  function  include/linux/pm_wakeup.h  150  static inline int device_set_wakeup_enable(struct device *dev,bool enable)
__pm_stay_awake  function  include/linux/pm_wakeup.h  168  static inline void __pm_stay_awake(struct wakeup_source *ws) {}
pm_stay_awake  function  include/linux/pm_wakeup.h  170  static inline void pm_stay_awake(struct device *dev) {}
__pm_relax  function  include/linux/pm_wakeup.h  172  static inline void __pm_relax(struct wakeup_source *ws) {}
pm_relax  function  include/linux/pm_wakeup.h  174  static inline void pm_relax(struct device *dev) {}
__pm_wakeup_event  function  include/linux/pm_wakeup.h  176  static inline void __pm_wakeup_event(struct wakeup_source *ws,unsigned int msec) {}
pm_wakeup_event  function  include/linux/pm_wakeup.h  178  static inline void pm_wakeup_event(struct device *dev,unsigned int msec) {}
wakeup_source_init  function  include/linux/pm_wakeup.h  182  static inline void wakeup_source_init(struct wakeup_source *ws,const char *name)
wakeup_source_trash  function  include/linux/pm_wakeup.h  189  static inline void wakeup_source_trash(struct wakeup_source *ws)
_LINUX_STDDEF_H  macro  include/linux/stddef.h  2  #define _LINUX_STDDEF_H
NULL  macro  include/linux/stddef.h  9  #define NULL ((void *)0)
offsetof  macro  include/linux/stddef.h  20  #define offsetof(TYPE,MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
_LINUX_TOPOLOGY_H  macro  include/linux/topology.h  28  #define _LINUX_TOPOLOGY_H
node_has_online_mem  macro  include/linux/topology.h  38  #define node_has_online_mem(nid) (1)
nr_cpus_node  macro  include/linux/topology.h  42  #define nr_cpus_node(node) cpumask_weight(cpumask_of_node(node))
for_each_node_with_cpus  macro  include/linux/topology.h  45  #define for_each_node_with_cpus(node) for_each_online_node(node) if (nr_cpus_node(node))
arch_update_cpu_topology  prototype  include/linux/topology.h  49  int arch_update_cpu_topology(void);
LOCAL_DISTANCE  macro  include/linux/topology.h  52  #define LOCAL_DISTANCE 10
REMOTE_DISTANCE  macro  include/linux/topology.h  53  #define REMOTE_DISTANCE 20
node_distance  macro  include/linux/topology.h  55  #define node_distance(from,to) ((from) == (to) ? LOCAL_DISTANCE : REMOTE_DISTANCE)
RECLAIM_DISTANCE  macro  include/linux/topology.h  63  #define RECLAIM_DISTANCE 30
PENALTY_FOR_NODE_WITH_CPUS  macro  include/linux/topology.h  66  #define PENALTY_FOR_NODE_WITH_CPUS (1)
ARCH_HAS_SCHED_WAKE_IDLE  macro  include/linux/topology.h  85  #define ARCH_HAS_SCHED_WAKE_IDLE
SD_SIBLING_INIT  macro  include/linux/topology.h  88  #define SD_SIBLING_INIT (struct sched_domain) { .min_interval		= 1, .max_interval		= 2, .busy_factor		= 64, .imbalance_pct		= 110, .flags			= 1*SD_LOAD_BALANCE | 1*SD_BALANCE_NEWIDLE | 1*SD_BALANCE_EXEC | 1*SD_BALANCE_FORK | 0*SD_BALANCE_WAKE | 1*SD_WAKE_AFFINE | 1*SD_SHARE_CPUPOWER | 1*SD_SHARE_PKG_RESOURCES | 0*SD_SERIALIZE | 0*SD_PREFER_SIBLING | arch_sd_sibling_asym_packing() , .last_balance		= jiffies, .balance_interval	= 1, .smt_gain		= 1178,	/* 15% */ }
SD_MC_INIT  macro  include/linux/topology.h  116  #define SD_MC_INIT (struct sched_domain) { .min_interval		= 1, .max_interval		= 4, .busy_factor		= 64, .imbalance_pct		= 125, .cache_nice_tries	= 1, .busy_idx		= 2, .wake_idx		= 0, .forkexec_idx		= 0, .flags			= 1*SD_LOAD_BALANCE | 1*SD_BALANCE_NEWIDLE | 1*SD_BALANCE_EXEC | 1*SD_BALANCE_FORK | 0*SD_BALANCE_WAKE | 1*SD_WAKE_AFFINE | 0*SD_PREFER_LOCAL | 0*SD_SHARE_CPUPOWER | 1*SD_SHARE_PKG_RESOURCES | 0*SD_SERIALIZE , .last_balance		= jiffies, .balance_interval	= 1, }
SD_CPU_INIT  macro  include/linux/topology.h  145  #define SD_CPU_INIT (struct sched_domain) { .min_interval		= 1, .max_interval		= 4, .busy_factor		= 64, .imbalance_pct		= 125, .cache_nice_tries	= 1, .busy_idx		= 2, .idle_idx		= 1, .newidle_idx		= 0, .wake_idx		= 0, .forkexec_idx		= 0, .flags			= 1*SD_LOAD_BALANCE | 1*SD_BALANCE_NEWIDLE | 1*SD_BALANCE_EXEC | 1*SD_BALANCE_FORK | 0*SD_BALANCE_WAKE | 1*SD_WAKE_AFFINE | 0*SD_PREFER_LOCAL | 0*SD_SHARE_CPUPOWER | 0*SD_SHARE_PKG_RESOURCES | 0*SD_SERIALIZE , .last_balance		= jiffies, .balance_interval	= 1, }
numa_node_id  function  include/linux/topology.h  215  static inline int numa_node_id(void)
cpu_to_node  function  include/linux/topology.h  191  static inline int cpu_to_node(int cpu)
set_numa_node  function  include/linux/topology.h  198  static inline void set_numa_node(int node)
set_cpu_numa_node  function  include/linux/topology.h  205  static inline void set_cpu_numa_node(int cpu,int node)
set_numa_mem  function  include/linux/topology.h  233  static inline void set_numa_mem(int node)
numa_mem_id  function  include/linux/topology.h  265  static inline int numa_mem_id(void)
cpu_to_mem  function  include/linux/topology.h  272  static inline int cpu_to_mem(int cpu)
set_cpu_numa_mem  function  include/linux/topology.h  255  static inline void set_cpu_numa_mem(int cpu,int node)
topology_physical_package_id  macro  include/linux/topology.h  281  #define topology_physical_package_id(cpu) ((void)(cpu),-1)
topology_core_id  macro  include/linux/topology.h  284  #define topology_core_id(cpu) ((void)(cpu),0)
topology_thread_cpumask  macro  include/linux/topology.h  287  #define topology_thread_cpumask(cpu) cpumask_of(cpu)
topology_core_cpumask  macro  include/linux/topology.h  290  #define topology_core_cpumask(cpu) cpumask_of(cpu)
LINUX_MM_DEBUG_H  macro  include/linux/mmdebug.h  2  #define LINUX_MM_DEBUG_H 1
VM_BUG_ON  macro  include/linux/mmdebug.h  7  #define VM_BUG_ON(cond) BUILD_BUG_ON_INVALID(cond)
VIRTUAL_BUG_ON  macro  include/linux/mmdebug.h  13  #define VIRTUAL_BUG_ON(cond) do { } while (0)
_ASM_X86_LINKAGE_H  macro  arch/x86/include/asm/linkage.h  2  #define _ASM_X86_LINKAGE_H
__asmlinkage_protect_n  macro  arch/x86/include/asm/linkage.h  25  #define __asmlinkage_protect_n(ret,args...) __asm__ __volatile__ ("" : "=r" (ret) : "0" (ret), ##args)
__asmlinkage_protect0  macro  arch/x86/include/asm/linkage.h  27  #define __asmlinkage_protect0(ret) __asmlinkage_protect_n(ret)
__asmlinkage_protect1  macro  arch/x86/include/asm/linkage.h  29  #define __asmlinkage_protect1(ret,arg1) __asmlinkage_protect_n(ret, "g" (arg1))
__asmlinkage_protect2  macro  arch/x86/include/asm/linkage.h  31  #define __asmlinkage_protect2(ret,arg1,arg2) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2))
__asmlinkage_protect3  macro  arch/x86/include/asm/linkage.h  33  #define __asmlinkage_protect3(ret,arg1,arg2,arg3) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3))
__asmlinkage_protect4  macro  arch/x86/include/asm/linkage.h  35  #define __asmlinkage_protect4(ret,arg1,arg2,arg3,arg4) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3), "g" (arg4))
__asmlinkage_protect5  macro  arch/x86/include/asm/linkage.h  38  #define __asmlinkage_protect5(ret,arg1,arg2,arg3,arg4,arg5) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3), "g" (arg4), "g" (arg5))
__asmlinkage_protect6  macro  arch/x86/include/asm/linkage.h  41  #define __asmlinkage_protect6(ret,arg1,arg2,arg3,arg4,arg5,arg6) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3), "g" (arg4), "g" (arg5), "g" (arg6))
GLOBAL  macro  arch/x86/include/asm/linkage.h  49  #define GLOBAL(name) .globl name; name:
_LINUX_BITOPS_H  macro  include/linux/bitops.h  2  #define _LINUX_BITOPS_H
BIT  macro  include/linux/bitops.h  6  #define BIT(nr) (1UL << (nr))
BIT_MASK  macro  include/linux/bitops.h  7  #define BIT_MASK(nr) (1UL << ((nr) % BITS_PER_LONG))
BIT_WORD  macro  include/linux/bitops.h  8  #define BIT_WORD(nr) ((nr) / BITS_PER_LONG)
BITS_PER_BYTE  macro  include/linux/bitops.h  9  #define BITS_PER_BYTE 8
BITS_TO_LONGS  macro  include/linux/bitops.h  10  #define BITS_TO_LONGS(nr) DIV_ROUND_UP(nr,BITS_PER_BYTE * sizeof(long))
__sw_hweight8  prototype  include/linux/bitops.h  13  extern unsigned int __sw_hweight8(unsigned int w);
__sw_hweight16  prototype  include/linux/bitops.h  14  extern unsigned int __sw_hweight16(unsigned int w);
__sw_hweight32  prototype  include/linux/bitops.h  15  extern unsigned int __sw_hweight32(unsigned int w);
__sw_hweight64  prototype  include/linux/bitops.h  16  extern unsigned long __sw_hweight64(__u64 w);
for_each_set_bit  macro  include/linux/bitops.h  24  #define for_each_set_bit(bit,addr,size) for ((bit) = find_first_bit((addr), (size)); (bit) < (size); (bit) = find_next_bit((addr), (size), (bit) + 1))
for_each_set_bit_from  macro  include/linux/bitops.h  30  #define for_each_set_bit_from(bit,addr,size) for ((bit) = find_next_bit((addr), (size), (bit)); (bit) < (size); (bit) = find_next_bit((addr), (size), (bit) + 1))
for_each_clear_bit  macro  include/linux/bitops.h  35  #define for_each_clear_bit(bit,addr,size) for ((bit) = find_first_zero_bit((addr), (size)); (bit) < (size); (bit) = find_next_zero_bit((addr), (size), (bit) + 1))
for_each_clear_bit_from  macro  include/linux/bitops.h  41  #define for_each_clear_bit_from(bit,addr,size) for ((bit) = find_next_zero_bit((addr), (size), (bit)); (bit) < (size); (bit) = find_next_zero_bit((addr), (size), (bit) + 1))
get_bitmask_order  function  include/linux/bitops.h  46  static __inline__ int get_bitmask_order(unsigned int count)
get_count_order  function  include/linux/bitops.h  54  static __inline__ int get_count_order(unsigned int count)
hweight_long  function  include/linux/bitops.h  64  static inline unsigned long hweight_long(unsigned long w)
rol64  function  include/linux/bitops.h  74  static inline __u64 rol64(__u64 word,unsigned int shift)
ror64  function  include/linux/bitops.h  84  static inline __u64 ror64(__u64 word,unsigned int shift)
rol32  function  include/linux/bitops.h  94  static inline __u32 rol32(__u32 word,unsigned int shift)
ror32  function  include/linux/bitops.h  104  static inline __u32 ror32(__u32 word,unsigned int shift)
rol16  function  include/linux/bitops.h  114  static inline __u16 rol16(__u16 word,unsigned int shift)
ror16  function  include/linux/bitops.h  124  static inline __u16 ror16(__u16 word,unsigned int shift)
rol8  function  include/linux/bitops.h  134  static inline __u8 rol8(__u8 word,unsigned int shift)
ror8  function  include/linux/bitops.h  144  static inline __u8 ror8(__u8 word,unsigned int shift)
sign_extend32  function  include/linux/bitops.h  154  static inline __s32 sign_extend32(__u32 value,int index)
fls_long  function  include/linux/bitops.h  160  static inline unsigned fls_long(unsigned long l)
__ffs64  function  include/linux/bitops.h  175  static inline unsigned long __ffs64(u64 word)
find_last_bit  prototype  include/linux/bitops.h  196  extern unsigned long find_last_bit(const unsigned long *addr,unsigned long size);
_LINUX_THREADS_H  macro  include/linux/threads.h  2  #define _LINUX_THREADS_H
CONFIG_NR_CPUS  macro  include/linux/threads.h  16  #define CONFIG_NR_CPUS 1
NR_CPUS  macro  include/linux/threads.h  20  #define NR_CPUS CONFIG_NR_CPUS
MIN_THREADS_LEFT_FOR_ROOT  macro  include/linux/threads.h  22  #define MIN_THREADS_LEFT_FOR_ROOT 4
PID_MAX_DEFAULT  macro  include/linux/threads.h  27  #define PID_MAX_DEFAULT (CONFIG_BASE_SMALL ? 0x1000 : 0x8000)
PID_MAX_LIMIT  macro  include/linux/threads.h  33  #define PID_MAX_LIMIT (CONFIG_BASE_SMALL ? PAGE_SIZE * 8 : (sizeof(long) > 4 ? 4 * 1024 * 1024 : PID_MAX_DEFAULT))
PIDS_PER_CPU_DEFAULT  macro  include/linux/threads.h  42  #define PIDS_PER_CPU_DEFAULT 1024
PIDS_PER_CPU_MIN  macro  include/linux/threads.h  43  #define PIDS_PER_CPU_MIN 8
_LINUX_NUMA_H  macro  include/linux/numa.h  2  #define _LINUX_NUMA_H
NODES_SHIFT  macro  include/linux/numa.h  8  #define NODES_SHIFT 0
MAX_NUMNODES  macro  include/linux/numa.h  11  #define MAX_NUMNODES (1 << NODES_SHIFT)
NUMA_NO_NODE  macro  include/linux/numa.h  13  #define NUMA_NO_NODE (-1)
_LINUX_INIT_H  macro  include/linux/init.h  2  #define _LINUX_INIT_H
__init  macro  include/linux/init.h  44  #define __init __section(.init.text) __cold notrace
__initdata  macro  include/linux/init.h  45  #define __initdata __section(.init.data)
__initconst  macro  include/linux/init.h  46  #define __initconst __section(.init.rodata)
__exitdata  macro  include/linux/init.h  47  #define __exitdata __section(.exit.data)
__exit_call  macro  include/linux/init.h  48  #define __exit_call __used __section(.exitcall.exit)
__ref  macro  include/linux/init.h  67  #define __ref __section(.ref.text) noinline
__refdata  macro  include/linux/init.h  68  #define __refdata __section(.ref.data)
__refconst  macro  include/linux/init.h  69  #define __refconst __section(.ref.rodata)
__init_refok  macro  include/linux/init.h  72  #define __init_refok __ref
__initdata_refok  macro  include/linux/init.h  73  #define __initdata_refok __refdata
__exit_refok  macro  include/linux/init.h  74  #define __exit_refok __ref
__exitused  macro  include/linux/init.h  80  #define __exitused __used
__exit  macro  include/linux/init.h  83  #define __exit __section(.exit.text) __exitused __cold notrace
__devinit  macro  include/linux/init.h  86  #define __devinit __section(.devinit.text) __cold notrace
__devinitdata  macro  include/linux/init.h  87  #define __devinitdata __section(.devinit.data)
__devinitconst  macro  include/linux/init.h  88  #define __devinitconst __section(.devinit.rodata)
__devexit  macro  include/linux/init.h  89  #define __devexit __section(.devexit.text) __exitused __cold notrace
__devexitdata  macro  include/linux/init.h  90  #define __devexitdata __section(.devexit.data)
__devexitconst  macro  include/linux/init.h  91  #define __devexitconst __section(.devexit.rodata)
__cpuinit  macro  include/linux/init.h  94  #define __cpuinit __section(.cpuinit.text) __cold notrace
__cpuinitdata  macro  include/linux/init.h  95  #define __cpuinitdata __section(.cpuinit.data)
__cpuinitconst  macro  include/linux/init.h  96  #define __cpuinitconst __section(.cpuinit.rodata)
__cpuexit  macro  include/linux/init.h  97  #define __cpuexit __section(.cpuexit.text) __exitused __cold notrace
__cpuexitdata  macro  include/linux/init.h  98  #define __cpuexitdata __section(.cpuexit.data)
__cpuexitconst  macro  include/linux/init.h  99  #define __cpuexitconst __section(.cpuexit.rodata)
__meminit  macro  include/linux/init.h  102  #define __meminit __section(.meminit.text) __cold notrace
__meminitdata  macro  include/linux/init.h  103  #define __meminitdata __section(.meminit.data)
__meminitconst  macro  include/linux/init.h  104  #define __meminitconst __section(.meminit.rodata)
__memexit  macro  include/linux/init.h  105  #define __memexit __section(.memexit.text) __exitused __cold notrace
__memexitdata  macro  include/linux/init.h  106  #define __memexitdata __section(.memexit.data)
__memexitconst  macro  include/linux/init.h  107  #define __memexitconst __section(.memexit.rodata)
__HEAD  macro  include/linux/init.h  110  #define __HEAD .section ".head.text","ax"
__INIT  macro  include/linux/init.h  111  #define __INIT .section ".init.text","ax"
__FINIT  macro  include/linux/init.h  112  #define __FINIT .previous
__INITDATA  macro  include/linux/init.h  114  #define __INITDATA .section ".init.data","aw",%progbits
__INITRODATA  macro  include/linux/init.h  115  #define __INITRODATA .section ".init.rodata","a",%progbits
__FINITDATA  macro  include/linux/init.h  116  #define __FINITDATA .previous
__DEVINIT  macro  include/linux/init.h  118  #define __DEVINIT .section ".devinit.text","ax"
__DEVINITDATA  macro  include/linux/init.h  119  #define __DEVINITDATA .section ".devinit.data","aw"
__DEVINITRODATA  macro  include/linux/init.h  120  #define __DEVINITRODATA .section ".devinit.rodata","a"
__CPUINIT  macro  include/linux/init.h  122  #define __CPUINIT .section ".cpuinit.text","ax"
__CPUINITDATA  macro  include/linux/init.h  123  #define __CPUINITDATA .section ".cpuinit.data","aw"
__CPUINITRODATA  macro  include/linux/init.h  124  #define __CPUINITRODATA .section ".cpuinit.rodata","a"
__MEMINIT  macro  include/linux/init.h  126  #define __MEMINIT .section ".meminit.text","ax"
__MEMINITDATA  macro  include/linux/init.h  127  #define __MEMINITDATA .section ".meminit.data","aw"
__MEMINITRODATA  macro  include/linux/init.h  128  #define __MEMINITRODATA .section ".meminit.rodata","a"
__REF  macro  include/linux/init.h  131  #define __REF .section ".ref.text","ax"
__REFDATA  macro  include/linux/init.h  132  #define __REFDATA .section ".ref.data","aw"
__REFCONST  macro  include/linux/init.h  133  #define __REFCONST .section ".ref.rodata","a"
do_one_initcall  prototype  include/linux/init.h  149  extern int do_one_initcall(initcall_t fn);
setup_arch  prototype  include/linux/init.h  155  void setup_arch(char **);
prepare_namespace  prototype  include/linux/init.h  156  void prepare_namespace(void);
__define_initcall  macro  include/linux/init.h  178  #define __define_initcall(level,fn,id) static initcall_t __initcall_##fn##id __used __attribute__((__section__(".initcall" level ".init"))) = fn
early_initcall  macro  include/linux/init.h  284  #define early_initcall(fn) module_init(fn)
pure_initcall  macro  include/linux/init.h  195  #define pure_initcall(fn) __define_initcall("0",fn,0)
core_initcall  macro  include/linux/init.h  285  #define core_initcall(fn) module_init(fn)
core_initcall_sync  macro  include/linux/init.h  198  #define core_initcall_sync(fn) __define_initcall("1s",fn,1s)
postcore_initcall  macro  include/linux/init.h  286  #define postcore_initcall(fn) module_init(fn)
postcore_initcall_sync  macro  include/linux/init.h  200  #define postcore_initcall_sync(fn) __define_initcall("2s",fn,2s)
arch_initcall  macro  include/linux/init.h  287  #define arch_initcall(fn) module_init(fn)
arch_initcall_sync  macro  include/linux/init.h  202  #define arch_initcall_sync(fn) __define_initcall("3s",fn,3s)
subsys_initcall  macro  include/linux/init.h  288  #define subsys_initcall(fn) module_init(fn)
subsys_initcall_sync  macro  include/linux/init.h  204  #define subsys_initcall_sync(fn) __define_initcall("4s",fn,4s)
fs_initcall  macro  include/linux/init.h  289  #define fs_initcall(fn) module_init(fn)
fs_initcall_sync  macro  include/linux/init.h  206  #define fs_initcall_sync(fn) __define_initcall("5s",fn,5s)
rootfs_initcall  macro  include/linux/init.h  207  #define rootfs_initcall(fn) __define_initcall("rootfs",fn,rootfs)
device_initcall  macro  include/linux/init.h  290  #define device_initcall(fn) module_init(fn)
device_initcall_sync  macro  include/linux/init.h  209  #define device_initcall_sync(fn) __define_initcall("6s",fn,6s)
late_initcall  macro  include/linux/init.h  291  #define late_initcall(fn) module_init(fn)
late_initcall_sync  macro  include/linux/init.h  211  #define late_initcall_sync(fn) __define_initcall("7s",fn,7s)
__initcall  macro  include/linux/init.h  213  #define __initcall(fn) device_initcall(fn)
__exitcall  macro  include/linux/init.h  215  #define __exitcall(fn) static exitcall_t __exitcall_##fn __exit_call = fn
console_initcall  macro  include/linux/init.h  218  #define console_initcall(fn) static initcall_t __initcall_##fn __used __section(.con_initcall.init) = fn
security_initcall  macro  include/linux/init.h  293  #define security_initcall(fn) module_init(fn)
obs_kernel_param  struct  include/linux/init.h  226  struct obs_kernel_param { const char *str; int (*setup_func)(char *); int early; };
__setup_param  macro  include/linux/init.h  307  #define __setup_param(str,unique_id,fn)
__setup  macro  include/linux/init.h  308  #define __setup(str,func)
early_param  macro  include/linux/init.h  251  #define early_param(str,fn) __setup_param(str, fn, fn, 1)
parse_early_param  prototype  include/linux/init.h  255  void __init parse_early_param(void);
parse_early_options  prototype  include/linux/init.h  256  void __init parse_early_options(char *cmdline);
module_init  macro  include/linux/init.h  296  #define module_init(initfn) static inline initcall_t __inittest(void) { return initfn; } int init_module(void) __attribute__((alias(#initfn)));
module_exit  macro  include/linux/init.h  302  #define module_exit(exitfn) static inline exitcall_t __exittest(void) { return exitfn; } void cleanup_module(void) __attribute__((alias(#exitfn)));
__nosavedata  macro  include/linux/init.h  312  #define __nosavedata __section(.data..nosave)
__init_or_module  macro  include/linux/init.h  324  #define __init_or_module __init
__initdata_or_module  macro  include/linux/init.h  325  #define __initdata_or_module __initdata
__initconst_or_module  macro  include/linux/init.h  326  #define __initconst_or_module __initconst
__INIT_OR_MODULE  macro  include/linux/init.h  327  #define __INIT_OR_MODULE __INIT
__INITDATA_OR_MODULE  macro  include/linux/init.h  328  #define __INITDATA_OR_MODULE __INITDATA
__INITRODATA_OR_MODULE  macro  include/linux/init.h  329  #define __INITRODATA_OR_MODULE __INITRODATA
__devexit_p  macro  include/linux/init.h  341  #define __devexit_p(x) NULL
__exit_p  macro  include/linux/init.h  347  #define __exit_p(x) NULL
__LINUX_SEQLOCK_H  macro  include/linux/seqlock.h  2  #define __LINUX_SEQLOCK_H
seqlock_t  struct  include/linux/seqlock.h  33  typedef struct { unsigned sequence; spinlock_t lock; } seqlock_t;
__SEQLOCK_UNLOCKED  macro  include/linux/seqlock.h  42  #define __SEQLOCK_UNLOCKED(lockname) { 0, __SPIN_LOCK_UNLOCKED(lockname) }
seqlock_init  macro  include/linux/seqlock.h  45  #define seqlock_init(x) do { (x)->sequence = 0; spin_lock_init(&(x)->lock); } while (0)
DEFINE_SEQLOCK  macro  include/linux/seqlock.h  51  #define DEFINE_SEQLOCK(x) seqlock_t x = __SEQLOCK_UNLOCKED(x)
write_seqlock  function  include/linux/seqlock.h  58  static inline void write_seqlock(seqlock_t *sl)
write_sequnlock  function  include/linux/seqlock.h  65  static inline void write_sequnlock(seqlock_t *sl)
write_tryseqlock  function  include/linux/seqlock.h  72  static inline int write_tryseqlock(seqlock_t *sl)
read_seqbegin  function  include/linux/seqlock.h  84  static __always_inline unsigned read_seqbegin(const seqlock_t *sl)
read_seqretry  function  include/linux/seqlock.h  104  static __always_inline int read_seqretry(const seqlock_t *sl,unsigned start)
seqcount  struct  include/linux/seqlock.h  119  typedef struct seqcount { unsigned sequence; } seqcount_t;
seqcount_t  struct  include/linux/seqlock.h  119  typedef struct seqcount { unsigned sequence; } seqcount_t;
SEQCNT_ZERO  macro  include/linux/seqlock.h  123  #define SEQCNT_ZERO { 0 }
seqcount_init  macro  include/linux/seqlock.h  124  #define seqcount_init(x) do { *(x) = (seqcount_t) SEQCNT_ZERO; } while (0)
__read_seqcount_begin  function  include/linux/seqlock.h  139  static inline unsigned __read_seqcount_begin(const seqcount_t *s)
read_seqcount_begin  function  include/linux/seqlock.h  161  static inline unsigned read_seqcount_begin(const seqcount_t *s)
raw_seqcount_begin  function  include/linux/seqlock.h  182  static inline unsigned raw_seqcount_begin(const seqcount_t *s)
__read_seqcount_retry  function  include/linux/seqlock.h  203  static inline int __read_seqcount_retry(const seqcount_t *s,unsigned start)
read_seqcount_retry  function  include/linux/seqlock.h  218  static inline int read_seqcount_retry(const seqcount_t *s,unsigned start)
write_seqcount_begin  function  include/linux/seqlock.h  230  static inline void write_seqcount_begin(seqcount_t *s)
write_seqcount_end  function  include/linux/seqlock.h  236  static inline void write_seqcount_end(seqcount_t *s)
write_seqcount_barrier  function  include/linux/seqlock.h  249  static inline void write_seqcount_barrier(seqcount_t *s)
write_seqlock_irqsave  macro  include/linux/seqlock.h  258  #define write_seqlock_irqsave(lock,flags) do { local_irq_save(flags); write_seqlock(lock); } while (0)
write_seqlock_irq  macro  include/linux/seqlock.h  260  #define write_seqlock_irq(lock) do { local_irq_disable();   write_seqlock(lock); } while (0)
write_seqlock_bh  macro  include/linux/seqlock.h  262  #define write_seqlock_bh(lock) do { local_bh_disable();    write_seqlock(lock); } while (0)
write_sequnlock_irqrestore  macro  include/linux/seqlock.h  265  #define write_sequnlock_irqrestore(lock,flags) do { write_sequnlock(lock); local_irq_restore(flags); } while(0)
write_sequnlock_irq  macro  include/linux/seqlock.h  267  #define write_sequnlock_irq(lock) do { write_sequnlock(lock); local_irq_enable(); } while(0)
write_sequnlock_bh  macro  include/linux/seqlock.h  269  #define write_sequnlock_bh(lock) do { write_sequnlock(lock); local_bh_enable(); } while(0)
read_seqbegin_irqsave  macro  include/linux/seqlock.h  272  #define read_seqbegin_irqsave(lock,flags) ({ local_irq_save(flags);   read_seqbegin(lock); })
read_seqretry_irqrestore  macro  include/linux/seqlock.h  275  #define read_seqretry_irqrestore(lock,iv,flags) ({ int ret = read_seqretry(lock, iv); local_irq_restore(flags); ret; })
__LINUX_NODEMASK_H  macro  include/linux/nodemask.h  2  #define __LINUX_NODEMASK_H
node_set  macro  include/linux/nodemask.h  101  #define node_set(node,dst) __node_set((node),&(dst))
__node_set  function  include/linux/nodemask.h  102  static inline void __node_set(int node,volatile nodemask_t *dstp)
node_clear  macro  include/linux/nodemask.h  107  #define node_clear(node,dst) __node_clear((node),&(dst))
__node_clear  function  include/linux/nodemask.h  108  static inline void __node_clear(int node,volatile nodemask_t *dstp)
nodes_setall  macro  include/linux/nodemask.h  113  #define nodes_setall(dst) __nodes_setall(&(dst),MAX_NUMNODES)
__nodes_setall  function  include/linux/nodemask.h  114  static inline void __nodes_setall(nodemask_t *dstp,int nbits)
nodes_clear  macro  include/linux/nodemask.h  119  #define nodes_clear(dst) __nodes_clear(&(dst),MAX_NUMNODES)
__nodes_clear  function  include/linux/nodemask.h  120  static inline void __nodes_clear(nodemask_t *dstp,int nbits)
node_isset  macro  include/linux/nodemask.h  126  #define node_isset(node,nodemask) test_bit((node),(nodemask).bits)
node_test_and_set  macro  include/linux/nodemask.h  128  #define node_test_and_set(node,nodemask) __node_test_and_set((node), &(nodemask))
__node_test_and_set  function  include/linux/nodemask.h  130  static inline int __node_test_and_set(int node,nodemask_t *addr)
nodes_and  macro  include/linux/nodemask.h  135  #define nodes_and(dst,src1,src2) __nodes_and(&(dst), &(src1), &(src2), MAX_NUMNODES)
__nodes_and  function  include/linux/nodemask.h  137  static inline void __nodes_and(nodemask_t *dstp,const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_or  macro  include/linux/nodemask.h  143  #define nodes_or(dst,src1,src2) __nodes_or(&(dst), &(src1), &(src2), MAX_NUMNODES)
__nodes_or  function  include/linux/nodemask.h  145  static inline void __nodes_or(nodemask_t *dstp,const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_xor  macro  include/linux/nodemask.h  151  #define nodes_xor(dst,src1,src2) __nodes_xor(&(dst), &(src1), &(src2), MAX_NUMNODES)
__nodes_xor  function  include/linux/nodemask.h  153  static inline void __nodes_xor(nodemask_t *dstp,const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_andnot  macro  include/linux/nodemask.h  159  #define nodes_andnot(dst,src1,src2) __nodes_andnot(&(dst), &(src1), &(src2), MAX_NUMNODES)
__nodes_andnot  function  include/linux/nodemask.h  161  static inline void __nodes_andnot(nodemask_t *dstp,const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_complement  macro  include/linux/nodemask.h  167  #define nodes_complement(dst,src) __nodes_complement(&(dst), &(src), MAX_NUMNODES)
__nodes_complement  function  include/linux/nodemask.h  169  static inline void __nodes_complement(nodemask_t *dstp,const nodemask_t *srcp, int nbits)
nodes_equal  macro  include/linux/nodemask.h  175  #define nodes_equal(src1,src2) __nodes_equal(&(src1), &(src2), MAX_NUMNODES)
__nodes_equal  function  include/linux/nodemask.h  177  static inline int __nodes_equal(const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_intersects  macro  include/linux/nodemask.h  183  #define nodes_intersects(src1,src2) __nodes_intersects(&(src1), &(src2), MAX_NUMNODES)
__nodes_intersects  function  include/linux/nodemask.h  185  static inline int __nodes_intersects(const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_subset  macro  include/linux/nodemask.h  191  #define nodes_subset(src1,src2) __nodes_subset(&(src1), &(src2), MAX_NUMNODES)
__nodes_subset  function  include/linux/nodemask.h  193  static inline int __nodes_subset(const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_empty  macro  include/linux/nodemask.h  199  #define nodes_empty(src) __nodes_empty(&(src),MAX_NUMNODES)
__nodes_empty  function  include/linux/nodemask.h  200  static inline int __nodes_empty(const nodemask_t *srcp,int nbits)
nodes_full  macro  include/linux/nodemask.h  205  #define nodes_full(nodemask) __nodes_full(&(nodemask),MAX_NUMNODES)
__nodes_full  function  include/linux/nodemask.h  206  static inline int __nodes_full(const nodemask_t *srcp,int nbits)
nodes_weight  macro  include/linux/nodemask.h  211  #define nodes_weight(nodemask) __nodes_weight(&(nodemask),MAX_NUMNODES)
__nodes_weight  function  include/linux/nodemask.h  212  static inline int __nodes_weight(const nodemask_t *srcp,int nbits)
nodes_shift_right  macro  include/linux/nodemask.h  217  #define nodes_shift_right(dst,src,n) __nodes_shift_right(&(dst), &(src), (n), MAX_NUMNODES)
__nodes_shift_right  function  include/linux/nodemask.h  219  static inline void __nodes_shift_right(nodemask_t *dstp,const nodemask_t *srcp, int n, int nbits)
nodes_shift_left  macro  include/linux/nodemask.h  225  #define nodes_shift_left(dst,src,n) __nodes_shift_left(&(dst), &(src), (n), MAX_NUMNODES)
__nodes_shift_left  function  include/linux/nodemask.h  227  static inline void __nodes_shift_left(nodemask_t *dstp,const nodemask_t *srcp, int n, int nbits)
first_node  macro  include/linux/nodemask.h  236  #define first_node(src) __first_node(&(src))
__first_node  function  include/linux/nodemask.h  237  static inline int __first_node(const nodemask_t *srcp)
next_node  macro  include/linux/nodemask.h  242  #define next_node(n,src) __next_node((n),&(src))
__next_node  function  include/linux/nodemask.h  243  static inline int __next_node(int n,const nodemask_t *srcp)
init_nodemask_of_node  function  include/linux/nodemask.h  248  static inline void init_nodemask_of_node(nodemask_t *mask,int node)
nodemask_of_node  macro  include/linux/nodemask.h  254  #define nodemask_of_node(node) ({ typeof(_unused_nodemask_arg_) m; if (sizeof(m) == sizeof(unsigned long)) { m.bits[0] = 1UL << (node); } else { init_nodemask_of_node(&m, (node)); } m; })
first_unset_node  macro  include/linux/nodemask.h  265  #define first_unset_node(mask) __first_unset_node(&(mask))
__first_unset_node  function  include/linux/nodemask.h  266  static inline int __first_unset_node(const nodemask_t *maskp)
NODE_MASK_LAST_WORD  macro  include/linux/nodemask.h  272  #define NODE_MASK_LAST_WORD BITMAP_LAST_WORD_MASK(MAX_NUMNODES)
NODE_MASK_ALL  macro  include/linux/nodemask.h  283  #define NODE_MASK_ALL ((nodemask_t) { { [0 ... BITS_TO_LONGS(MAX_NUMNODES)-2] = ~0UL, [BITS_TO_LONGS(MAX_NUMNODES)-1] = NODE_MASK_LAST_WORD } })
NODE_MASK_NONE  macro  include/linux/nodemask.h  291  #define NODE_MASK_NONE ((nodemask_t) { { [0 ... BITS_TO_LONGS(MAX_NUMNODES)-1] =  0UL } })
nodes_addr  macro  include/linux/nodemask.h  296  #define nodes_addr(src) ((src).bits)
nodemask_scnprintf  macro  include/linux/nodemask.h  298  #define nodemask_scnprintf(buf,len,src) __nodemask_scnprintf((buf), (len), &(src), MAX_NUMNODES)
__nodemask_scnprintf  function  include/linux/nodemask.h  300  static inline int __nodemask_scnprintf(char *buf,int len,const nodemask_t *srcp, int nbits)
nodemask_parse_user  macro  include/linux/nodemask.h  306  #define nodemask_parse_user(ubuf,ulen,dst) __nodemask_parse_user((ubuf), (ulen), &(dst), MAX_NUMNODES)
__nodemask_parse_user  function  include/linux/nodemask.h  308  static inline int __nodemask_parse_user(const char __user *buf,int len,nodemask_t *dstp, int nbits)
nodelist_scnprintf  macro  include/linux/nodemask.h  314  #define nodelist_scnprintf(buf,len,src) __nodelist_scnprintf((buf), (len), &(src), MAX_NUMNODES)
__nodelist_scnprintf  function  include/linux/nodemask.h  316  static inline int __nodelist_scnprintf(char *buf,int len,const nodemask_t *srcp, int nbits)
nodelist_parse  macro  include/linux/nodemask.h  322  #define nodelist_parse(buf,dst) __nodelist_parse((buf),&(dst),MAX_NUMNODES)
__nodelist_parse  function  include/linux/nodemask.h  323  static inline int __nodelist_parse(const char *buf,nodemask_t *dstp,int nbits)
node_remap  macro  include/linux/nodemask.h  328  #define node_remap(oldbit,old,new) __node_remap((oldbit), &(old), &(new), MAX_NUMNODES)
__node_remap  function  include/linux/nodemask.h  330  static inline int __node_remap(int oldbit,const nodemask_t *oldp, const nodemask_t *newp, int nbits)
nodes_remap  macro  include/linux/nodemask.h  336  #define nodes_remap(dst,src,old,new) __nodes_remap(&(dst), &(src), &(old), &(new), MAX_NUMNODES)
__nodes_remap  function  include/linux/nodemask.h  338  static inline void __nodes_remap(nodemask_t *dstp,const nodemask_t *srcp,const nodemask_t *oldp, const nodemask_t *newp, int nbits)
nodes_onto  macro  include/linux/nodemask.h  344  #define nodes_onto(dst,orig,relmap) __nodes_onto(&(dst), &(orig), &(relmap), MAX_NUMNODES)
__nodes_onto  function  include/linux/nodemask.h  346  static inline void __nodes_onto(nodemask_t *dstp,const nodemask_t *origp,const nodemask_t *relmapp, int nbits)
nodes_fold  macro  include/linux/nodemask.h  352  #define nodes_fold(dst,orig,sz) __nodes_fold(&(dst), &(orig), sz, MAX_NUMNODES)
__nodes_fold  function  include/linux/nodemask.h  354  static inline void __nodes_fold(nodemask_t *dstp,const nodemask_t *origp,int sz, int nbits)
for_each_node_mask  macro  include/linux/nodemask.h  366  #define for_each_node_mask(node,mask) if (!nodes_empty(mask)) for ((node) = 0; (node) < 1; (node)++)
node_states  enum  include/linux/nodemask.h  374  enum node_states { N_POSSIBLE, N_ONLINE, N_NORMAL_MEMORY, N_HIGH_MEMORY, N_CPU, NR_NODE_STATES };
node_state  function  include/linux/nodemask.h  438  static inline int node_state(int node,enum node_states state)
node_set_state  function  include/linux/nodemask.h  443  static inline void node_set_state(int node,enum node_states state)
node_clear_state  function  include/linux/nodemask.h  447  static inline void node_clear_state(int node,enum node_states state)
num_node_state  function  include/linux/nodemask.h  451  static inline int num_node_state(enum node_states state)
for_each_node_state  macro  include/linux/nodemask.h  456  #define for_each_node_state(node,__state) for ( (node) = 0; (node) == 0; (node) = 1)
first_online_node  macro  include/linux/nodemask.h  459  #define first_online_node 0
next_online_node  macro  include/linux/nodemask.h  460  #define next_online_node(nid) (MAX_NUMNODES)
node_set_online  macro  include/linux/nodemask.h  464  #define node_set_online(node) node_set_state((node),N_ONLINE)
node_set_offline  macro  include/linux/nodemask.h  465  #define node_set_offline(node) node_clear_state((node),N_ONLINE)
nr_node_ids  macro  include/linux/nodemask.h  461  #define nr_node_ids 1
nr_online_nodes  macro  include/linux/nodemask.h  462  #define nr_online_nodes 1
node_random  function  include/linux/nodemask.h  472  static inline int node_random(const nodemask_t *mask)
node_online_map  macro  include/linux/nodemask.h  478  #define node_online_map node_states[N_ONLINE]
node_possible_map  macro  include/linux/nodemask.h  479  #define node_possible_map node_states[N_POSSIBLE]
num_online_nodes  macro  include/linux/nodemask.h  481  #define num_online_nodes() num_node_state(N_ONLINE)
num_possible_nodes  macro  include/linux/nodemask.h  482  #define num_possible_nodes() num_node_state(N_POSSIBLE)
node_online  macro  include/linux/nodemask.h  483  #define node_online(node) node_state((node),N_ONLINE)
node_possible  macro  include/linux/nodemask.h  484  #define node_possible(node) node_state((node),N_POSSIBLE)
for_each_node  macro  include/linux/nodemask.h  486  #define for_each_node(node) for_each_node_state(node,N_POSSIBLE)
for_each_online_node  macro  include/linux/nodemask.h  487  #define for_each_online_node(node) for_each_node_state(node,N_ONLINE)
NODEMASK_ALLOC  macro  include/linux/nodemask.h  499  #define NODEMASK_ALLOC(type,name,gfp_flags) type _##name,*name = &_##name
NODEMASK_FREE  macro  include/linux/nodemask.h  500  #define NODEMASK_FREE(m) do {} while (0)
nodemask_scratch  struct  include/linux/nodemask.h  504  struct nodemask_scratch { nodemask_t mask1; nodemask_t mask2; };
NODEMASK_SCRATCH  macro  include/linux/nodemask.h  509  #define NODEMASK_SCRATCH(x) NODEMASK_ALLOC(struct nodemask_scratch, x, GFP_KERNEL | __GFP_NORETRY)
NODEMASK_SCRATCH_FREE  macro  include/linux/nodemask.h  512  #define NODEMASK_SCRATCH_FREE(x) NODEMASK_FREE(x)
PAGEBLOCK_FLAGS_H  macro  include/linux/pageblock-flags.h  24  #define PAGEBLOCK_FLAGS_H
pageblock_bits  enum  include/linux/pageblock-flags.h  29  enum pageblock_bits { PB_migrate, PB_migrate_end = PB_migrate + 3 - 1, NR_PAGEBLOCK_BITS };
pageblock_order  macro  include/linux/pageblock-flags.h  53  #define pageblock_order (MAX_ORDER-1)
pageblock_nr_pages  macro  include/linux/pageblock-flags.h  57  #define pageblock_nr_pages (1UL << pageblock_order)
get_pageblock_flags_group  prototype  include/linux/pageblock-flags.h  63  unsigned long get_pageblock_flags_group(struct page *page,int start_bitidx, int end_bitidx);
set_pageblock_flags_group  prototype  include/linux/pageblock-flags.h  65  void set_pageblock_flags_group(struct page *page,unsigned long flags,int start_bitidx, int end_bitidx);
get_pageblock_flags  macro  include/linux/pageblock-flags.h  68  #define get_pageblock_flags(page) get_pageblock_flags_group(page, 0, NR_PAGEBLOCK_BITS-1)
set_pageblock_flags  macro  include/linux/pageblock-flags.h  70  #define set_pageblock_flags(page,flags) set_pageblock_flags_group(page, flags, 0, NR_PAGEBLOCK_BITS-1)
__LINUX_MEMORY_HOTPLUG_H  macro  include/linux/memory_hotplug.h  2  #define __LINUX_MEMORY_HOTPLUG_H
pgdat_resize_lock  function  include/linux/memory_hotplug.h  189  static inline void pgdat_resize_lock(struct pglist_data *p,unsigned long *f) {}
pgdat_resize_unlock  function  include/linux/memory_hotplug.h  190  static inline void pgdat_resize_unlock(struct pglist_data *p,unsigned long *f) {}
pgdat_resize_init  function  include/linux/memory_hotplug.h  191  static inline void pgdat_resize_init(struct pglist_data *pgdat) {}
zone_span_seqbegin  function  include/linux/memory_hotplug.h  193  static inline unsigned zone_span_seqbegin(struct zone *zone)
zone_span_seqretry  function  include/linux/memory_hotplug.h  197  static inline int zone_span_seqretry(struct zone *zone,unsigned iv)
zone_span_writelock  function  include/linux/memory_hotplug.h  201  static inline void zone_span_writelock(struct zone *zone) {}
zone_span_writeunlock  function  include/linux/memory_hotplug.h  202  static inline void zone_span_writeunlock(struct zone *zone) {}
zone_seqlock_init  function  include/linux/memory_hotplug.h  203  static inline void zone_seqlock_init(struct zone *zone) {}
zone_grow_free_lists  prototype  include/linux/memory_hotplug.h  69  extern int zone_grow_free_lists(struct zone *zone,unsigned long new_nr_pages);
zone_grow_waitqueues  prototype  include/linux/memory_hotplug.h  70  extern int zone_grow_waitqueues(struct zone *zone,unsigned long nr_pages);
add_one_highpage  prototype  include/linux/memory_hotplug.h  71  extern int add_one_highpage(struct page *page,int pfn,int bad_ppro);
online_pages  prototype  include/linux/memory_hotplug.h  73  extern int online_pages(unsigned long,unsigned long);
__offline_isolated_pages  prototype  include/linux/memory_hotplug.h  74  extern void __offline_isolated_pages(unsigned long,unsigned long);
set_online_page_callback  prototype  include/linux/memory_hotplug.h  78  extern int set_online_page_callback(online_page_callback_t callback);
restore_online_page_callback  prototype  include/linux/memory_hotplug.h  79  extern int restore_online_page_callback(online_page_callback_t callback);
__online_page_set_limits  prototype  include/linux/memory_hotplug.h  81  extern void __online_page_set_limits(struct page *page);
__online_page_increment_counters  prototype  include/linux/memory_hotplug.h  82  extern void __online_page_increment_counters(struct page *page);
__online_page_free  prototype  include/linux/memory_hotplug.h  83  extern void __online_page_free(struct page *page);
is_pageblock_removable_nolock  prototype  include/linux/memory_hotplug.h  86  extern bool is_pageblock_removable_nolock(struct page *page);
__add_pages  prototype  include/linux/memory_hotplug.h  90  extern int __add_pages(int nid,struct zone *zone,unsigned long start_pfn,unsigned long nr_pages);
__remove_pages  prototype  include/linux/memory_hotplug.h  92  extern int __remove_pages(struct zone *zone,unsigned long start_pfn,unsigned long nr_pages);
memory_add_physaddr_to_nid  function  include/linux/memory_hotplug.h  98  static inline int memory_add_physaddr_to_nid(u64 start)
arch_alloc_nodedata  macro  include/linux/memory_hotplug.h  121  #define arch_alloc_nodedata(nid) generic_alloc_nodedata(nid)
arch_free_nodedata  macro  include/linux/memory_hotplug.h  122  #define arch_free_nodedata(pgdat) generic_free_nodedata(pgdat)
arch_refresh_nodedata  function  include/linux/memory_hotplug.h  158  static inline void arch_refresh_nodedata(int nid,pg_data_t *pgdat)
generic_alloc_nodedata  function  include/linux/memory_hotplug.h  150  static inline pg_data_t *generic_alloc_nodedata(int nid)
generic_free_nodedata  function  include/linux/memory_hotplug.h  155  static inline void generic_free_nodedata(pg_data_t *pgdat)
register_page_bootmem_info_node  function  include/linux/memory_hotplug.h  212  static inline void register_page_bootmem_info_node(struct pglist_data *pgdat)
put_page_bootmem  prototype  include/linux/memory_hotplug.h  173  extern void put_page_bootmem(struct page *page);
lock_memory_hotplug  function  include/linux/memory_hotplug.h  216  static inline void lock_memory_hotplug(void) {}
unlock_memory_hotplug  function  include/linux/memory_hotplug.h  217  static inline void unlock_memory_hotplug(void) {}
mhp_notimplemented  function  include/linux/memory_hotplug.h  205  static inline int mhp_notimplemented(const char *func)
is_mem_section_removable  function  include/linux/memory_hotplug.h  226  static inline int is_mem_section_removable(unsigned long pfn,unsigned long nr_pages)
mem_online_node  prototype  include/linux/memory_hotplug.h  233  extern int mem_online_node(int nid);
add_memory  prototype  include/linux/memory_hotplug.h  234  extern int add_memory(int nid,u64 start,u64 size);
arch_add_memory  prototype  include/linux/memory_hotplug.h  235  extern int arch_add_memory(int nid,u64 start,u64 size);
remove_memory  prototype  include/linux/memory_hotplug.h  236  extern int remove_memory(u64 start,u64 size);
sparse_add_one_section  prototype  include/linux/memory_hotplug.h  237  extern int sparse_add_one_section(struct zone *zone,unsigned long start_pfn,int nr_pages);
sparse_remove_one_section  prototype  include/linux/memory_hotplug.h  239  extern void sparse_remove_one_section(struct zone *zone,struct mem_section *ms);
sparse_decode_mem_map  prototype  include/linux/memory_hotplug.h  240  extern struct page *sparse_decode_mem_map(unsigned long coded_mem_map,unsigned long pnum);
_ASM_X86_SPARSEMEM_H  macro  arch/x86/include/asm/sparsemem.h  2  #define _ASM_X86_SPARSEMEM_H
SECTION_SIZE_BITS  macro  arch/x86/include/asm/sparsemem.h  28  # define SECTION_SIZE_BITS 27
MAX_PHYSADDR_BITS  macro  arch/x86/include/asm/sparsemem.h  29  # define MAX_PHYSADDR_BITS 44
MAX_PHYSMEM_BITS  macro  arch/x86/include/asm/sparsemem.h  30  # define MAX_PHYSMEM_BITS 46
_LINUX_POISON_H  macro  include/linux/poison.h  2  #define _LINUX_POISON_H
POISON_POINTER_DELTA  macro  include/linux/poison.h  14  # define POISON_POINTER_DELTA 0
LIST_POISON1  macro  include/linux/poison.h  22  #define LIST_POISON1 ((void *) 0x00100100 + POISON_POINTER_DELTA)
LIST_POISON2  macro  include/linux/poison.h  23  #define LIST_POISON2 ((void *) 0x00200200 + POISON_POINTER_DELTA)
TIMER_ENTRY_STATIC  macro  include/linux/poison.h  30  #define TIMER_ENTRY_STATIC ((void *) 0x74737461)
PAGE_POISON  macro  include/linux/poison.h  33  #define PAGE_POISON 0xaa
RED_INACTIVE  macro  include/linux/poison.h  40  #define RED_INACTIVE 0x09F911029D74E35BULL
RED_ACTIVE  macro  include/linux/poison.h  41  #define RED_ACTIVE 0xD84156C5635688C0ULL
SLUB_RED_INACTIVE  macro  include/linux/poison.h  43  #define SLUB_RED_INACTIVE 0xbb
SLUB_RED_ACTIVE  macro  include/linux/poison.h  44  #define SLUB_RED_ACTIVE 0xcc
POISON_INUSE  macro  include/linux/poison.h  47  #define POISON_INUSE 0x5a
POISON_FREE  macro  include/linux/poison.h  48  #define POISON_FREE 0x6b
POISON_END  macro  include/linux/poison.h  49  #define POISON_END 0xa5
POISON_FREE_INITMEM  macro  include/linux/poison.h  52  #define POISON_FREE_INITMEM 0xcc
JBD_POISON_FREE  macro  include/linux/poison.h  61  #define JBD_POISON_FREE 0x5b
JBD2_POISON_FREE  macro  include/linux/poison.h  62  #define JBD2_POISON_FREE 0x5c
POOL_POISON_FREED  macro  include/linux/poison.h  65  #define POOL_POISON_FREED 0xa7
POOL_POISON_ALLOCATED  macro  include/linux/poison.h  66  #define POOL_POISON_ALLOCATED 0xa9
ATM_POISON_FREE  macro  include/linux/poison.h  69  #define ATM_POISON_FREE 0x12
ATM_POISON  macro  include/linux/poison.h  70  #define ATM_POISON 0xdeadbeef
NEIGHBOR_DEAD  macro  include/linux/poison.h  73  #define NEIGHBOR_DEAD 0xdeadbeef
NETFILTER_LINK_POISON  macro  include/linux/poison.h  74  #define NETFILTER_LINK_POISON 0xdead57ac
MUTEX_DEBUG_INIT  macro  include/linux/poison.h  77  #define MUTEX_DEBUG_INIT 0x11
MUTEX_DEBUG_FREE  macro  include/linux/poison.h  78  #define MUTEX_DEBUG_FREE 0x22
FLEX_ARRAY_FREE  macro  include/linux/poison.h  81  #define FLEX_ARRAY_FREE 0x6c
KEY_DESTROY  macro  include/linux/poison.h  84  #define KEY_DESTROY 0xbd
OSS_POISON_FREE  macro  include/linux/poison.h  87  #define OSS_POISON_FREE 0xAB
_LINUX_CONST_H  macro  include/linux/const.h  4  #define _LINUX_CONST_H
_AC  macro  include/linux/const.h  20  #define _AC(X,Y) __AC(X,Y)
_AT  macro  include/linux/const.h  21  #define _AT(T,X) ((T)(X))
__AC  macro  include/linux/const.h  19  #define __AC(X,Y) (X##Y)
_LINUX_CGROUP_H  macro  include/linux/cgroup.h  2  #define _LINUX_CGROUP_H
cgroup_init_early  function  include/linux/cgroup.h  638  static inline int cgroup_init_early(void) { return 0; }
cgroup_init  function  include/linux/cgroup.h  639  static inline int cgroup_init(void) { return 0; }
cgroup_lock  function  include/linux/cgroup.h  645  static inline void cgroup_lock(void) {}
cgroup_lock_is_held  prototype  include/linux/cgroup.h  32  extern int cgroup_lock_is_held(void);
cgroup_lock_live_group  prototype  include/linux/cgroup.h  33  extern bool cgroup_lock_live_group(struct cgroup *cgrp);
cgroup_unlock  function  include/linux/cgroup.h  646  static inline void cgroup_unlock(void) {}
cgroup_fork  function  include/linux/cgroup.h  640  static inline void cgroup_fork(struct task_struct *p) {}
cgroup_fork_callbacks  function  include/linux/cgroup.h  641  static inline void cgroup_fork_callbacks(struct task_struct *p) {}
cgroup_post_fork  function  include/linux/cgroup.h  642  static inline void cgroup_post_fork(struct task_struct *p) {}
cgroup_exit  function  include/linux/cgroup.h  643  static inline void cgroup_exit(struct task_struct *p,int callbacks) {}
cgroupstats_build  function  include/linux/cgroup.h  647  static inline int cgroupstats_build(struct cgroupstats *stats,struct dentry *dentry)
cgroup_load_subsys  prototype  include/linux/cgroup.h  41  extern int cgroup_load_subsys(struct cgroup_subsys *ss);
cgroup_unload_subsys  prototype  include/linux/cgroup.h  42  extern void cgroup_unload_subsys(struct cgroup_subsys *ss);
SUBSYS  macro  include/linux/cgroup.h  538  #undef SUBSYS
cgroup_subsys_id  enum  include/linux/cgroup.h  48  enum cgroup_subsys_id { CGROUP_BUILTIN_SUBSYS_COUNT };
CGROUP_SUBSYS_COUNT  macro  include/linux/cgroup.h  58  #define CGROUP_SUBSYS_COUNT (BITS_PER_BYTE*sizeof(unsigned long))
cgroup_subsys_state  function  include/linux/cgroup.h  540  static inline struct cgroup_subsys_state *cgroup_subsys_state(
__css_get  function  include/linux/cgroup.h  93  static inline void __css_get(struct cgroup_subsys_state *css,int count)
css_get  function  include/linux/cgroup.h  105  static inline void css_get(struct cgroup_subsys_state *css)
css_is_removed  function  include/linux/cgroup.h  112  static inline bool css_is_removed(struct cgroup_subsys_state *css)
__css_tryget  prototype  include/linux/cgroup.h  123  extern bool __css_tryget(struct cgroup_subsys_state *css);
css_tryget  function  include/linux/cgroup.h  124  static inline bool css_tryget(struct cgroup_subsys_state *css)
__css_put  prototype  include/linux/cgroup.h  136  extern void __css_put(struct cgroup_subsys_state *css);
css_put  function  include/linux/cgroup.h  137  static inline void css_put(struct cgroup_subsys_state *css)
cgroup  struct  include/linux/cgroup.h  164  struct cgroup { unsigned long flags; atomic_t count; struct list_head sibling; struct list_head children; struct list_head files; struct cgroup *parent; struct dentry __rcu *dentry; struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT]; struct cgroupfs_root *root; struct cgroup *top_cgroup; struct list_head css_sets; struct list_head allcg_node; struct list_head cft_q_node; struct list_head release_list; struct list_head pidlists; struct mutex pidlist_mutex; struct rcu_head rcu_head; struct list_head event_list; spinlock_t event_list_lock; };
css_set  struct  include/linux/cgroup.h  229  struct css_set { atomic_t refcount; struct hlist_node hlist; struct list_head tasks; struct list_head cg_links; struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT]; struct rcu_head rcu_head; };
cgroup_map_cb  struct  include/linux/cgroup.h  270  struct cgroup_map_cb { int (*fill)(struct cgroup_map_cb *cb, const char *key, u64 value); void *state; };
CFTYPE_ONLY_ON_ROOT  macro  include/linux/cgroup.h  284  #define CFTYPE_ONLY_ON_ROOT (1U << 0)
CFTYPE_NOT_ON_ROOT  macro  include/linux/cgroup.h  285  #define CFTYPE_NOT_ON_ROOT (1U << 1)
MAX_CFTYPE_NAME  macro  include/linux/cgroup.h  287  #define MAX_CFTYPE_NAME 64
cftype  struct  include/linux/cgroup.h  289  struct cftype { char name[MAX_CFTYPE_NAME]; umode_t mode; size_t max_write_len; unsigned int flags; int (*open)(struct inode *inode, struct file *file); ssize_t (*read)(struct cgroup *cgrp, struct cftype *cft,struct file *file,char __user *buf, size_t nbytes, loff_t *ppos); u64 (*read_u64)(struct cgroup *cgrp, struct cftype *cft); s64 (*read_s64)(struct cgroup *cgrp, struct cftype *cft); int (*read_map)(struct cgroup *cont, struct cftype *cft,struct cgroup_map_cb *cb); int (*read_seq_string)(struct cgroup *cont, struct cftype *cft,struct seq_file *m); ssize_t (*write)(struct cgroup *cgrp, struct cftype *cft,struct file *file,const char __user *buf, size_t nbytes, loff_t *ppos); int (*write_u64)(struct cgroup *cgrp, struct cftype *cft, u64 val); int (*write_s64)(struct cgroup *cgrp, struct cftype *cft, s64 val); int (*write_string)(struct cgroup *cgrp, struct cftype *cft,const char *buffer); int (*trigger)(struct cgroup *cgrp, unsigned int event); int (*release)(struct inode *inode, struct file *file); int (*register_event)(struct cgroup *cgrp, struct cftype *cft,struct eventfd_ctx *eventfd, const char *args); void (*unregister_event)(struct cgroup *cgrp, struct cftype *cft,struct eventfd_ctx *eventfd); };
cftype_set  struct  include/linux/cgroup.h  395  struct cftype_set { struct list_head node; const struct cftype *cfts; };
cgroup_scanner  struct  include/linux/cgroup.h  400  struct cgroup_scanner { struct cgroup *cg; int (*test_task)(struct task_struct *p, struct cgroup_scanner *scan); void (*process_task)(struct task_struct *p,struct cgroup_scanner *scan); struct ptr_heap *heap; void *data; };
cgroup_add_cftypes  prototype  include/linux/cgroup.h  409  int cgroup_add_cftypes(struct cgroup_subsys *ss,const struct cftype *cfts);
cgroup_rm_cftypes  prototype  include/linux/cgroup.h  410  int cgroup_rm_cftypes(struct cgroup_subsys *ss,const struct cftype *cfts);
cgroup_is_removed  prototype  include/linux/cgroup.h  412  int cgroup_is_removed(const struct cgroup *cgrp);
cgroup_path  prototype  include/linux/cgroup.h  414  int cgroup_path(const struct cgroup *cgrp,char *buf,int buflen);
cgroup_task_count  prototype  include/linux/cgroup.h  416  int cgroup_task_count(const struct cgroup *cgrp);
cgroup_is_descendant  prototype  include/linux/cgroup.h  419  int cgroup_is_descendant(const struct cgroup *cgrp,struct task_struct *task);
cgroup_exclude_rmdir  prototype  include/linux/cgroup.h  435  void cgroup_exclude_rmdir(struct cgroup_subsys_state *css);
cgroup_release_and_wakeup_rmdir  prototype  include/linux/cgroup.h  436  void cgroup_release_and_wakeup_rmdir(struct cgroup_subsys_state *css);
cgroup_taskset_first  prototype  include/linux/cgroup.h  443  struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset);
cgroup_taskset_next  prototype  include/linux/cgroup.h  444  struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset);
cgroup_taskset_cur_cgroup  prototype  include/linux/cgroup.h  445  struct cgroup *cgroup_taskset_cur_cgroup(struct cgroup_taskset *tset);
cgroup_taskset_size  prototype  include/linux/cgroup.h  446  int cgroup_taskset_size(struct cgroup_taskset *tset);
cgroup_taskset_for_each  macro  include/linux/cgroup.h  454  #define cgroup_taskset_for_each(task,skip_cgrp,tset) for ((task) = cgroup_taskset_first((tset)); (task); (task) = cgroup_taskset_next((tset))) if (!(skip_cgrp) || cgroup_taskset_cur_cgroup((tset)) != (skip_cgrp))
cgroup_subsys  struct  include/linux/cgroup.h  465  struct cgroup_subsys { struct cgroup_subsys_state *(*create)(struct cgroup *cgrp); int (*pre_destroy)(struct cgroup *cgrp); void (*destroy)(struct cgroup *cgrp); int (*can_attach)(struct cgroup *cgrp, struct cgroup_taskset *tset); void (*cancel_attach)(struct cgroup *cgrp, struct cgroup_taskset *tset); void (*attach)(struct cgroup *cgrp, struct cgroup_taskset *tset); void (*fork)(struct task_struct *task); void (*exit)(struct cgroup *cgrp, struct cgroup *old_cgrp,struct task_struct *task); void (*post_clone)(struct cgroup *cgrp); void (*bind)(struct cgroup *root); int subsys_id; int active; int disabled; int early_init; bool use_id; bool __DEPRECATED_clear_css_refs; #define MAX_CGROUP_TYPE_NAMELEN 32 const char *name; struct mutex hierarchy_mutex; struct lock_class_key subsys_key; struct cgroupfs_root *root; struct list_head sibling; struct idr idr; spinlock_t id_lock; struct list_head cftsets; struct cftype *base_cftypes; struct cftype_set base_cftset; struct module *module; };
task_subsys_state_check  macro  include/linux/cgroup.h  551  #define task_subsys_state_check(task,subsys_id,__c) rcu_dereference_check(task->cgroups->subsys[subsys_id], lockdep_is_held(&task->alloc_lock) || cgroup_lock_is_held() || (__c))
task_subsys_state  function  include/linux/cgroup.h  557  task_subsys_state(struct task_struct *task,int subsys_id)
task_cgroup  function  include/linux/cgroup.h  562  static inline struct cgroup* task_cgroup(struct task_struct *task,int subsys_id)
cgroup_iter  struct  include/linux/cgroup.h  569  struct cgroup_iter { struct list_head *cg_link; struct list_head *task; };
cgroup_iter_start  prototype  include/linux/cgroup.h  589  void cgroup_iter_start(struct cgroup *cgrp,struct cgroup_iter *it);
cgroup_iter_next  prototype  include/linux/cgroup.h  590  struct task_struct *cgroup_iter_next(struct cgroup *cgrp,struct cgroup_iter *it);
cgroup_iter_end  prototype  include/linux/cgroup.h  592  void cgroup_iter_end(struct cgroup *cgrp,struct cgroup_iter *it);
cgroup_scan_tasks  prototype  include/linux/cgroup.h  593  int cgroup_scan_tasks(struct cgroup_scanner *scan);
cgroup_attach_task  prototype  include/linux/cgroup.h  594  int cgroup_attach_task(struct cgroup *,struct task_struct *);
cgroup_attach_task_all  function  include/linux/cgroup.h  654  static inline int cgroup_attach_task_all(struct task_struct *from,struct task_struct *t)
free_css_id  prototype  include/linux/cgroup.h  614  void free_css_id(struct cgroup_subsys *ss,struct cgroup_subsys_state *css);
css_lookup  prototype  include/linux/cgroup.h  618  struct cgroup_subsys_state *css_lookup(struct cgroup_subsys *ss,int id);
css_get_next  prototype  include/linux/cgroup.h  624  struct cgroup_subsys_state *css_get_next(struct cgroup_subsys *ss,int id,struct cgroup_subsys_state *root, int *foundid);
css_is_ancestor  prototype  include/linux/cgroup.h  628  bool css_is_ancestor(struct cgroup_subsys_state *cg,const struct cgroup_subsys_state *root);
css_id  prototype  include/linux/cgroup.h  632  unsigned short css_id(struct cgroup_subsys_state *css);
css_depth  prototype  include/linux/cgroup.h  633  unsigned short css_depth(struct cgroup_subsys_state *css);
cgroup_css_from_dir  prototype  include/linux/cgroup.h  634  struct cgroup_subsys_state *cgroup_css_from_dir(struct file *f,int id);
VM_EVENT_ITEM_H_INCLUDED  macro  include/linux/vm_event_item.h  2  #define VM_EVENT_ITEM_H_INCLUDED
DMA_ZONE  macro  include/linux/vm_event_item.h  7  #define DMA_ZONE(xx)
DMA32_ZONE  macro  include/linux/vm_event_item.h  13  #define DMA32_ZONE(xx)
HIGHMEM_ZONE  macro  include/linux/vm_event_item.h  19  #define HIGHMEM_ZONE(xx)
FOR_ALL_ZONES  macro  include/linux/vm_event_item.h  22  #define FOR_ALL_ZONES(xx) DMA_ZONE(xx) DMA32_ZONE(xx) xx##_NORMAL HIGHMEM_ZONE(xx) ,xx##_MOVABLE
vm_event_item  enum  include/linux/vm_event_item.h  24  enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT, FOR_ALL_ZONES(PGALLOC), PGFREE, PGACTIVATE, PGDEACTIVATE, PGFAULT, PGMAJFAULT, FOR_ALL_ZONES(PGREFILL), FOR_ALL_ZONES(PGSTEAL_KSWAPD), FOR_ALL_ZONES(PGSTEAL_DIRECT), FOR_ALL_ZONES(PGSCAN_KSWAPD), FOR_ALL_ZONES(PGSCAN_DIRECT), PGSCAN_ZONE_RECLAIM_FAILED, PGINODESTEAL, SLABS_SCANNED, KSWAPD_INODESTEAL, KSWAPD_LOW_WMARK_HIT_QUICKLY, KSWAPD_HIGH_WMARK_HIT_QUICKLY, KSWAPD_SKIP_CONGESTION_WAIT, PAGEOUTRUN, ALLOCSTALL, PGROTATED, COMPACTBLOCKS, COMPACTPAGES, COMPACTPAGEFAILED, COMPACTSTALL, COMPACTFAIL, COMPACTSUCCESS, HTLB_BUDDY_PGALLOC, HTLB_BUDDY_PGALLOC_FAIL, UNEVICTABLE_PGCULLED, UNEVICTABLE_PGSCANNED, UNEVICTABLE_PGRESCUED, UNEVICTABLE_PGMLOCKED, UNEVICTABLE_PGMUNLOCKED, UNEVICTABLE_PGCLEARED, UNEVICTABLE_PGSTRANDED, UNEVICTABLE_MLOCKFREED, THP_FAULT_ALLOC, THP_FAULT_FALLBACK, THP_COLLAPSE_ALLOC, THP_COLLAPSE_ALLOC_FAILED, THP_SPLIT, NR_VM_EVENT_ITEMS };
_LINUX_CAPABILITY_H  macro  include/linux/capability.h  14  #define _LINUX_CAPABILITY_H
_LINUX_CAPABILITY_VERSION_1  macro  include/linux/capability.h  31  #define _LINUX_CAPABILITY_VERSION_1 0x19980330
_LINUX_CAPABILITY_U32S_1  macro  include/linux/capability.h  32  #define _LINUX_CAPABILITY_U32S_1 1
_LINUX_CAPABILITY_VERSION_2  macro  include/linux/capability.h  34  #define _LINUX_CAPABILITY_VERSION_2 0x20071026
_LINUX_CAPABILITY_U32S_2  macro  include/linux/capability.h  35  #define _LINUX_CAPABILITY_U32S_2 2
_LINUX_CAPABILITY_VERSION_3  macro  include/linux/capability.h  37  #define _LINUX_CAPABILITY_VERSION_3 0x20080522
_LINUX_CAPABILITY_U32S_3  macro  include/linux/capability.h  38  #define _LINUX_CAPABILITY_U32S_3 2
__user_cap_header_struct  struct  include/linux/capability.h  40  typedef struct __user_cap_header_struct { __u32 version; int pid; } __user *cap_user_header_t;
*cap_user_header_t  struct  include/linux/capability.h  40  typedef struct __user_cap_header_struct { __u32 version; int pid; } __user *cap_user_header_t;
__user_cap_data_struct  struct  include/linux/capability.h  45  typedef struct __user_cap_data_struct { __u32 effective; __u32 permitted; __u32 inheritable; } __user *cap_user_data_t;
*cap_user_data_t  struct  include/linux/capability.h  45  typedef struct __user_cap_data_struct { __u32 effective; __u32 permitted; __u32 inheritable; } __user *cap_user_data_t;
VFS_CAP_REVISION_MASK  macro  include/linux/capability.h  52  #define VFS_CAP_REVISION_MASK 0xFF000000
VFS_CAP_REVISION_SHIFT  macro  include/linux/capability.h  53  #define VFS_CAP_REVISION_SHIFT 24
VFS_CAP_FLAGS_MASK  macro  include/linux/capability.h  54  #define VFS_CAP_FLAGS_MASK ~VFS_CAP_REVISION_MASK
VFS_CAP_FLAGS_EFFECTIVE  macro  include/linux/capability.h  55  #define VFS_CAP_FLAGS_EFFECTIVE 0x000001
VFS_CAP_REVISION_1  macro  include/linux/capability.h  57  #define VFS_CAP_REVISION_1 0x01000000
VFS_CAP_U32_1  macro  include/linux/capability.h  58  #define VFS_CAP_U32_1 1
XATTR_CAPS_SZ_1  macro  include/linux/capability.h  59  #define XATTR_CAPS_SZ_1 (sizeof(__le32)*(1 + 2*VFS_CAP_U32_1))
VFS_CAP_REVISION_2  macro  include/linux/capability.h  61  #define VFS_CAP_REVISION_2 0x02000000
VFS_CAP_U32_2  macro  include/linux/capability.h  62  #define VFS_CAP_U32_2 2
XATTR_CAPS_SZ_2  macro  include/linux/capability.h  63  #define XATTR_CAPS_SZ_2 (sizeof(__le32)*(1 + 2*VFS_CAP_U32_2))
XATTR_CAPS_SZ  macro  include/linux/capability.h  65  #define XATTR_CAPS_SZ XATTR_CAPS_SZ_2
VFS_CAP_U32  macro  include/linux/capability.h  66  #define VFS_CAP_U32 VFS_CAP_U32_2
VFS_CAP_REVISION  macro  include/linux/capability.h  67  #define VFS_CAP_REVISION VFS_CAP_REVISION_2
vfs_cap_data  struct  include/linux/capability.h  69  struct vfs_cap_data { __le32 magic_etc; struct { __le32 permitted; __le32 inheritable; } data[VFS_CAP_U32]; };
_LINUX_CAPABILITY_VERSION  macro  include/linux/capability.h  84  #define _LINUX_CAPABILITY_VERSION _LINUX_CAPABILITY_VERSION_1
_LINUX_CAPABILITY_U32S  macro  include/linux/capability.h  85  #define _LINUX_CAPABILITY_U32S _LINUX_CAPABILITY_U32S_1
_KERNEL_CAPABILITY_VERSION  macro  include/linux/capability.h  89  #define _KERNEL_CAPABILITY_VERSION _LINUX_CAPABILITY_VERSION_3
_KERNEL_CAPABILITY_U32S  macro  include/linux/capability.h  90  #define _KERNEL_CAPABILITY_U32S _LINUX_CAPABILITY_U32S_3
kernel_cap_struct  struct  include/linux/capability.h  94  typedef struct kernel_cap_struct { __u32 cap[_KERNEL_CAPABILITY_U32S]; } kernel_cap_t;
kernel_cap_t  struct  include/linux/capability.h  94  typedef struct kernel_cap_struct { __u32 cap[_KERNEL_CAPABILITY_U32S]; } kernel_cap_t;
cpu_vfs_cap_data  struct  include/linux/capability.h  99  struct cpu_vfs_cap_data { __u32 magic_etc; kernel_cap_t permitted; kernel_cap_t inheritable; };
_USER_CAP_HEADER_SIZE  macro  include/linux/capability.h  105  #define _USER_CAP_HEADER_SIZE (sizeof(struct __user_cap_header_struct))
_KERNEL_CAP_T_SIZE  macro  include/linux/capability.h  106  #define _KERNEL_CAP_T_SIZE (sizeof(kernel_cap_t))
CAP_CHOWN  macro  include/linux/capability.h  119  #define CAP_CHOWN 0
CAP_DAC_OVERRIDE  macro  include/linux/capability.h  125  #define CAP_DAC_OVERRIDE 1
CAP_DAC_READ_SEARCH  macro  include/linux/capability.h  131  #define CAP_DAC_READ_SEARCH 2
CAP_FOWNER  macro  include/linux/capability.h  137  #define CAP_FOWNER 3
CAP_FSETID  macro  include/linux/capability.h  146  #define CAP_FSETID 4
CAP_KILL  macro  include/linux/capability.h  152  #define CAP_KILL 5
CAP_SETGID  macro  include/linux/capability.h  158  #define CAP_SETGID 6
CAP_SETUID  macro  include/linux/capability.h  163  #define CAP_SETUID 7
CAP_SETPCAP  macro  include/linux/capability.h  180  #define CAP_SETPCAP 8
CAP_LINUX_IMMUTABLE  macro  include/linux/capability.h  184  #define CAP_LINUX_IMMUTABLE 9
CAP_NET_BIND_SERVICE  macro  include/linux/capability.h  189  #define CAP_NET_BIND_SERVICE 10
CAP_NET_BROADCAST  macro  include/linux/capability.h  193  #define CAP_NET_BROADCAST 11
CAP_NET_ADMIN  macro  include/linux/capability.h  209  #define CAP_NET_ADMIN 12
CAP_NET_RAW  macro  include/linux/capability.h  215  #define CAP_NET_RAW 13
CAP_IPC_LOCK  macro  include/linux/capability.h  221  #define CAP_IPC_LOCK 14
CAP_IPC_OWNER  macro  include/linux/capability.h  225  #define CAP_IPC_OWNER 15
CAP_SYS_MODULE  macro  include/linux/capability.h  228  #define CAP_SYS_MODULE 16
CAP_SYS_RAWIO  macro  include/linux/capability.h  233  #define CAP_SYS_RAWIO 17
CAP_SYS_CHROOT  macro  include/linux/capability.h  237  #define CAP_SYS_CHROOT 18
CAP_SYS_PTRACE  macro  include/linux/capability.h  241  #define CAP_SYS_PTRACE 19
CAP_SYS_PACCT  macro  include/linux/capability.h  245  #define CAP_SYS_PACCT 20
CAP_SYS_ADMIN  macro  include/linux/capability.h  284  #define CAP_SYS_ADMIN 21
CAP_SYS_BOOT  macro  include/linux/capability.h  288  #define CAP_SYS_BOOT 22
CAP_SYS_NICE  macro  include/linux/capability.h  297  #define CAP_SYS_NICE 23
CAP_SYS_RESOURCE  macro  include/linux/capability.h  311  #define CAP_SYS_RESOURCE 24
CAP_SYS_TIME  macro  include/linux/capability.h  317  #define CAP_SYS_TIME 25
CAP_SYS_TTY_CONFIG  macro  include/linux/capability.h  322  #define CAP_SYS_TTY_CONFIG 26
CAP_MKNOD  macro  include/linux/capability.h  326  #define CAP_MKNOD 27
CAP_LEASE  macro  include/linux/capability.h  330  #define CAP_LEASE 28
CAP_AUDIT_WRITE  macro  include/linux/capability.h  332  #define CAP_AUDIT_WRITE 29
CAP_AUDIT_CONTROL  macro  include/linux/capability.h  334  #define CAP_AUDIT_CONTROL 30
CAP_SETFCAP  macro  include/linux/capability.h  336  #define CAP_SETFCAP 31
CAP_MAC_OVERRIDE  macro  include/linux/capability.h  344  #define CAP_MAC_OVERRIDE 32
CAP_MAC_ADMIN  macro  include/linux/capability.h  353  #define CAP_MAC_ADMIN 33
CAP_SYSLOG  macro  include/linux/capability.h  357  #define CAP_SYSLOG 34
CAP_WAKE_ALARM  macro  include/linux/capability.h  361  #define CAP_WAKE_ALARM 35
CAP_BLOCK_SUSPEND  macro  include/linux/capability.h  365  #define CAP_BLOCK_SUSPEND 36
CAP_LAST_CAP  macro  include/linux/capability.h  367  #define CAP_LAST_CAP CAP_BLOCK_SUSPEND
cap_valid  macro  include/linux/capability.h  369  #define cap_valid(x) ((x) >= 0 && (x) <= CAP_LAST_CAP)
CAP_TO_INDEX  macro  include/linux/capability.h  375  #define CAP_TO_INDEX(x) ((x) >> 5)
CAP_TO_MASK  macro  include/linux/capability.h  376  #define CAP_TO_MASK(x) (1 << ((x) & 31))
current_user_ns  macro  include/linux/cred.h  362  #define current_user_ns() (&init_user_ns)
CAP_FOR_EACH_U32  macro  include/linux/capability.h  393  #define CAP_FOR_EACH_U32(__capi) for (__capi = 0; __capi < _KERNEL_CAPABILITY_U32S; ++__capi)
CAP_FS_MASK_B0  macro  include/linux/capability.h  409  # define CAP_FS_MASK_B0 (CAP_TO_MASK(CAP_CHOWN) | CAP_TO_MASK(CAP_MKNOD) | CAP_TO_MASK(CAP_DAC_OVERRIDE) | CAP_TO_MASK(CAP_DAC_READ_SEARCH) | CAP_TO_MASK(CAP_FOWNER) | CAP_TO_MASK(CAP_FSETID))
CAP_FS_MASK_B1  macro  include/linux/capability.h  416  # define CAP_FS_MASK_B1 (CAP_TO_MASK(CAP_MAC_OVERRIDE))
CAP_EMPTY_SET  macro  include/linux/capability.h  422  # define CAP_EMPTY_SET ((kernel_cap_t){{ 0,0 }})
CAP_FULL_SET  macro  include/linux/capability.h  423  # define CAP_FULL_SET ((kernel_cap_t){{ ~0,~0 }})
CAP_FS_SET  macro  include/linux/capability.h  424  # define CAP_FS_SET ((kernel_cap_t){{ CAP_FS_MASK_B0 | CAP_TO_MASK(CAP_LINUX_IMMUTABLE), CAP_FS_MASK_B1 } })
CAP_NFSD_SET  macro  include/linux/capability.h  427  # define CAP_NFSD_SET ((kernel_cap_t){{ CAP_FS_MASK_B0 | CAP_TO_MASK(CAP_SYS_RESOURCE), CAP_FS_MASK_B1 } })
cap_clear  macro  include/linux/capability.h  433  # define cap_clear(c) do { (c) = __cap_empty_set; } while (0)
cap_raise  macro  include/linux/capability.h  435  #define cap_raise(c,flag) ((c).cap[CAP_TO_INDEX(flag)] |= CAP_TO_MASK(flag))
cap_lower  macro  include/linux/capability.h  436  #define cap_lower(c,flag) ((c).cap[CAP_TO_INDEX(flag)] &= ~CAP_TO_MASK(flag))
cap_raised  macro  include/linux/capability.h  437  #define cap_raised(c,flag) ((c).cap[CAP_TO_INDEX(flag)] & CAP_TO_MASK(flag))
CAP_BOP_ALL  macro  include/linux/capability.h  439  #define CAP_BOP_ALL(c,a,b,OP) do { unsigned __capi; CAP_FOR_EACH_U32(__capi) { c.cap[__capi] = a.cap[__capi] OP b.cap[__capi]; } } while (0)
CAP_UOP_ALL  macro  include/linux/capability.h  447  #define CAP_UOP_ALL(c,a,OP) do { unsigned __capi; CAP_FOR_EACH_U32(__capi) { c.cap[__capi] = OP a.cap[__capi]; } } while (0)
cap_combine  function  include/linux/capability.h  455  static inline kernel_cap_t cap_combine(const kernel_cap_t a,const kernel_cap_t b)
cap_intersect  function  include/linux/capability.h  463  static inline kernel_cap_t cap_intersect(const kernel_cap_t a,const kernel_cap_t b)
cap_drop  function  include/linux/capability.h  471  static inline kernel_cap_t cap_drop(const kernel_cap_t a,const kernel_cap_t drop)
cap_invert  function  include/linux/capability.h  479  static inline kernel_cap_t cap_invert(const kernel_cap_t c)
cap_isclear  function  include/linux/capability.h  486  static inline int cap_isclear(const kernel_cap_t a)
cap_issubset  function  include/linux/capability.h  503  static inline int cap_issubset(const kernel_cap_t a,const kernel_cap_t set)
cap_is_fs_cap  function  include/linux/capability.h  512  static inline int cap_is_fs_cap(int cap)
cap_drop_fs_set  function  include/linux/capability.h  518  static inline kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
cap_raise_fs_set  function  include/linux/capability.h  524  static inline kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,const kernel_cap_t permitted)
cap_drop_nfsd_set  function  include/linux/capability.h  532  static inline kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
cap_raise_nfsd_set  function  include/linux/capability.h  538  static inline kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,const kernel_cap_t permitted)
has_capability  prototype  include/linux/capability.h  546  extern bool has_capability(struct task_struct *t,int cap);
has_ns_capability  prototype  include/linux/capability.h  547  extern bool has_ns_capability(struct task_struct *t,struct user_namespace *ns, int cap);
has_capability_noaudit  prototype  include/linux/capability.h  549  extern bool has_capability_noaudit(struct task_struct *t,int cap);
has_ns_capability_noaudit  prototype  include/linux/capability.h  550  extern bool has_ns_capability_noaudit(struct task_struct *t,struct user_namespace *ns, int cap);
capable  prototype  include/linux/capability.h  552  extern bool capable(int cap);
ns_capable  prototype  include/linux/capability.h  553  extern bool ns_capable(struct user_namespace *ns,int cap);
nsown_capable  prototype  include/linux/capability.h  554  extern bool nsown_capable(int cap);
inode_capable  prototype  include/linux/capability.h  555  extern bool inode_capable(const struct inode *inode,int cap);
get_vfs_caps_from_disk  prototype  include/linux/capability.h  558  extern int get_vfs_caps_from_disk(const struct dentry *dentry,struct cpu_vfs_cap_data *cpu_caps);
_LINUX_TIMEX_H  macro  include/linux/timex.h  54  #define _LINUX_TIMEX_H
NTP_API  macro  include/linux/timex.h  58  #define NTP_API 4
timex  struct  include/linux/timex.h  64  struct timex { unsigned int modes; long offset; long freq; long maxerror; long esterror; int status; long constant; long precision; long tolerance; struct timeval time; long tick; long ppsfreq; long jitter; int shift; long stabil; long jitcnt; long calcnt; long errcnt; long stbcnt; int tai; };
ADJ_OFFSET  macro  include/linux/timex.h  98  #define ADJ_OFFSET 0x0001
ADJ_FREQUENCY  macro  include/linux/timex.h  99  #define ADJ_FREQUENCY 0x0002
ADJ_MAXERROR  macro  include/linux/timex.h  100  #define ADJ_MAXERROR 0x0004
ADJ_ESTERROR  macro  include/linux/timex.h  101  #define ADJ_ESTERROR 0x0008
ADJ_STATUS  macro  include/linux/timex.h  102  #define ADJ_STATUS 0x0010
ADJ_TIMECONST  macro  include/linux/timex.h  103  #define ADJ_TIMECONST 0x0020
ADJ_TAI  macro  include/linux/timex.h  104  #define ADJ_TAI 0x0080
ADJ_SETOFFSET  macro  include/linux/timex.h  105  #define ADJ_SETOFFSET 0x0100
ADJ_MICRO  macro  include/linux/timex.h  106  #define ADJ_MICRO 0x1000
ADJ_NANO  macro  include/linux/timex.h  107  #define ADJ_NANO 0x2000
ADJ_TICK  macro  include/linux/timex.h  108  #define ADJ_TICK 0x4000
ADJ_ADJTIME  macro  include/linux/timex.h  111  #define ADJ_ADJTIME 0x8000
ADJ_OFFSET_SINGLESHOT  macro  include/linux/timex.h  115  #define ADJ_OFFSET_SINGLESHOT 0x8001
ADJ_OFFSET_READONLY  macro  include/linux/timex.h  113  #define ADJ_OFFSET_READONLY 0x2000
ADJ_OFFSET_SS_READ  macro  include/linux/timex.h  116  #define ADJ_OFFSET_SS_READ 0xa001
MOD_OFFSET  macro  include/linux/timex.h  120  #define MOD_OFFSET ADJ_OFFSET
MOD_FREQUENCY  macro  include/linux/timex.h  121  #define MOD_FREQUENCY ADJ_FREQUENCY
MOD_MAXERROR  macro  include/linux/timex.h  122  #define MOD_MAXERROR ADJ_MAXERROR
MOD_ESTERROR  macro  include/linux/timex.h  123  #define MOD_ESTERROR ADJ_ESTERROR
MOD_STATUS  macro  include/linux/timex.h  124  #define MOD_STATUS ADJ_STATUS
MOD_TIMECONST  macro  include/linux/timex.h  125  #define MOD_TIMECONST ADJ_TIMECONST
MOD_TAI  macro  include/linux/timex.h  126  #define MOD_TAI ADJ_TAI
MOD_MICRO  macro  include/linux/timex.h  127  #define MOD_MICRO ADJ_MICRO
MOD_NANO  macro  include/linux/timex.h  128  #define MOD_NANO ADJ_NANO
STA_PLL  macro  include/linux/timex.h  134  #define STA_PLL 0x0001
STA_PPSFREQ  macro  include/linux/timex.h  135  #define STA_PPSFREQ 0x0002
STA_PPSTIME  macro  include/linux/timex.h  136  #define STA_PPSTIME 0x0004
STA_FLL  macro  include/linux/timex.h  137  #define STA_FLL 0x0008
STA_INS  macro  include/linux/timex.h  139  #define STA_INS 0x0010
STA_DEL  macro  include/linux/timex.h  140  #define STA_DEL 0x0020
STA_UNSYNC  macro  include/linux/timex.h  141  #define STA_UNSYNC 0x0040
STA_FREQHOLD  macro  include/linux/timex.h  142  #define STA_FREQHOLD 0x0080
STA_PPSSIGNAL  macro  include/linux/timex.h  144  #define STA_PPSSIGNAL 0x0100
STA_PPSJITTER  macro  include/linux/timex.h  145  #define STA_PPSJITTER 0x0200
STA_PPSWANDER  macro  include/linux/timex.h  146  #define STA_PPSWANDER 0x0400
STA_PPSERROR  macro  include/linux/timex.h  147  #define STA_PPSERROR 0x0800
STA_CLOCKERR  macro  include/linux/timex.h  149  #define STA_CLOCKERR 0x1000
STA_NANO  macro  include/linux/timex.h  150  #define STA_NANO 0x2000
STA_MODE  macro  include/linux/timex.h  151  #define STA_MODE 0x4000
STA_CLK  macro  include/linux/timex.h  152  #define STA_CLK 0x8000
STA_RONLY  macro  include/linux/timex.h  155  #define STA_RONLY (STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER | STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK)
TIME_OK  macro  include/linux/timex.h  161  #define TIME_OK 0
TIME_INS  macro  include/linux/timex.h  162  #define TIME_INS 1
TIME_DEL  macro  include/linux/timex.h  163  #define TIME_DEL 2
TIME_OOP  macro  include/linux/timex.h  164  #define TIME_OOP 3
TIME_WAIT  macro  include/linux/timex.h  165  #define TIME_WAIT 4
TIME_ERROR  macro  include/linux/timex.h  166  #define TIME_ERROR 5
TIME_BAD  macro  include/linux/timex.h  167  #define TIME_BAD TIME_ERROR
SHIFT_PLL  macro  include/linux/timex.h  207  #define SHIFT_PLL 2
SHIFT_FLL  macro  include/linux/timex.h  208  #define SHIFT_FLL 2
MAXTC  macro  include/linux/timex.h  209  #define MAXTC 10
SHIFT_USEC  macro  include/linux/timex.h  216  #define SHIFT_USEC 16
PPM_SCALE  macro  include/linux/timex.h  217  #define PPM_SCALE ((s64)NSEC_PER_USEC << (NTP_SCALE_SHIFT - SHIFT_USEC))
PPM_SCALE_INV_SHIFT  macro  include/linux/timex.h  218  #define PPM_SCALE_INV_SHIFT 19
PPM_SCALE_INV  macro  include/linux/timex.h  219  #define PPM_SCALE_INV ((1LL << (PPM_SCALE_INV_SHIFT + NTP_SCALE_SHIFT)) / PPM_SCALE + 1)
MAXPHASE  macro  include/linux/timex.h  222  #define MAXPHASE 500000000L
MAXFREQ  macro  include/linux/timex.h  223  #define MAXFREQ 500000
MAXFREQ_SCALED  macro  include/linux/timex.h  224  #define MAXFREQ_SCALED ((s64)MAXFREQ << NTP_SCALE_SHIFT)
MINSEC  macro  include/linux/timex.h  225  #define MINSEC 256
MAXSEC  macro  include/linux/timex.h  226  #define MAXSEC 2048
NTP_PHASE_LIMIT  macro  include/linux/timex.h  227  #define NTP_PHASE_LIMIT ((MAXPHASE / NSEC_PER_USEC) << 5)
ntp_init  prototype  include/linux/timex.h  237  extern void ntp_init(void);
ntp_clear  prototype  include/linux/timex.h  238  extern void ntp_clear(void);
shift_right  macro  include/linux/timex.h  241  #define shift_right(x,s) ({ __typeof__(x) __x = (x); __typeof__(s) __s = (s); __x < 0 ? -(-__x >> __s) : __x >> __s; })
NTP_SCALE_SHIFT  macro  include/linux/timex.h  247  #define NTP_SCALE_SHIFT 32
NTP_INTERVAL_FREQ  macro  include/linux/timex.h  249  #define NTP_INTERVAL_FREQ (HZ)
NTP_INTERVAL_LENGTH  macro  include/linux/timex.h  250  #define NTP_INTERVAL_LENGTH (NSEC_PER_SEC/NTP_INTERVAL_FREQ)
ntp_tick_length  prototype  include/linux/timex.h  253  extern u64 ntp_tick_length(void);
second_overflow  prototype  include/linux/timex.h  255  extern int second_overflow(unsigned long secs);
do_adjtimex  prototype  include/linux/timex.h  256  extern int do_adjtimex(struct timex *);
hardpps  prototype  include/linux/timex.h  257  extern void hardpps(const struct timespec *,const struct timespec *);
read_current_timer  prototype  include/linux/timex.h  259  int read_current_timer(unsigned long *timer_val);
PIT_TICK_RATE  macro  include/linux/timex.h  262  #define PIT_TICK_RATE 1193182ul
_LINUX_JIFFIES_H  macro  include/linux/jiffies.h  2  #define _LINUX_JIFFIES_H
SHIFT_HZ  macro  include/linux/jiffies.h  37  # define SHIFT_HZ 13
LATCH  macro  include/linux/jiffies.h  43  #define LATCH ((CLOCK_TICK_RATE + HZ/2) / HZ)
SH_DIV  macro  include/linux/jiffies.h  54  #define SH_DIV(NOM,DEN,LSH) ( (((NOM) / (DEN)) << (LSH)) + ((((NOM) % (DEN)) << (LSH)) + (DEN) / 2) / (DEN))
ACTHZ  macro  include/linux/jiffies.h  58  #define ACTHZ (SH_DIV (CLOCK_TICK_RATE,LATCH,8))
TICK_NSEC  macro  include/linux/jiffies.h  61  #define TICK_NSEC (SH_DIV (1000000UL * 1000,ACTHZ,8))
TICK_USEC  macro  include/linux/jiffies.h  64  #define TICK_USEC ((1000000UL + USER_HZ/2) / USER_HZ)
TICK_USEC_TO_NSEC  macro  include/linux/jiffies.h  68  #define TICK_USEC_TO_NSEC(TUSEC) (SH_DIV (TUSEC * USER_HZ * 1000,ACTHZ,8))
__jiffy_data  macro  include/linux/jiffies.h  74  #define __jiffy_data __attribute__((section(".data")))
get_jiffies_64  function  include/linux/jiffies.h  87  static inline u64 get_jiffies_64(void)
time_after  macro  include/linux/jiffies.h  106  #define time_after(a,b) (typecheck(unsigned long, a) && typecheck(unsigned long, b) && ((long)(b) - (long)(a) < 0))
time_before  macro  include/linux/jiffies.h  110  #define time_before(a,b) time_after(b,a)
time_after_eq  macro  include/linux/jiffies.h  112  #define time_after_eq(a,b) (typecheck(unsigned long, a) && typecheck(unsigned long, b) && ((long)(a) - (long)(b) >= 0))
time_before_eq  macro  include/linux/jiffies.h  116  #define time_before_eq(a,b) time_after_eq(b,a)
time_in_range  macro  include/linux/jiffies.h  121  #define time_in_range(a,b,c) (time_after_eq(a,b) && time_before_eq(a,c))
time_in_range_open  macro  include/linux/jiffies.h  128  #define time_in_range_open(a,b,c) (time_after_eq(a,b) && time_before(a,c))
time_after64  macro  include/linux/jiffies.h  135  #define time_after64(a,b) (typecheck(__u64, a) && typecheck(__u64, b) && ((__s64)(b) - (__s64)(a) < 0))
time_before64  macro  include/linux/jiffies.h  139  #define time_before64(a,b) time_after64(b,a)
time_after_eq64  macro  include/linux/jiffies.h  141  #define time_after_eq64(a,b) (typecheck(__u64, a) && typecheck(__u64, b) && ((__s64)(a) - (__s64)(b) >= 0))
time_before_eq64  macro  include/linux/jiffies.h  145  #define time_before_eq64(a,b) time_after_eq64(b,a)
time_is_before_jiffies  macro  include/linux/jiffies.h  152  #define time_is_before_jiffies(a) time_after(jiffies,a)
time_is_after_jiffies  macro  include/linux/jiffies.h  155  #define time_is_after_jiffies(a) time_before(jiffies,a)
time_is_before_eq_jiffies  macro  include/linux/jiffies.h  158  #define time_is_before_eq_jiffies(a) time_after_eq(jiffies,a)
time_is_after_eq_jiffies  macro  include/linux/jiffies.h  161  #define time_is_after_eq_jiffies(a) time_before_eq(jiffies,a)
INITIAL_JIFFIES  macro  include/linux/jiffies.h  167  #define INITIAL_JIFFIES ((unsigned long)(unsigned int) (-300*HZ))
MAX_JIFFY_OFFSET  macro  include/linux/jiffies.h  181  #define MAX_JIFFY_OFFSET ((LONG_MAX >> 1)-1)
SEC_JIFFIE_SC  macro  include/linux/jiffies.h  259  #define SEC_JIFFIE_SC (32 - SHIFT_HZ)
NSEC_JIFFIE_SC  macro  include/linux/jiffies.h  261  #define NSEC_JIFFIE_SC (SEC_JIFFIE_SC + 29)
USEC_JIFFIE_SC  macro  include/linux/jiffies.h  262  #define USEC_JIFFIE_SC (SEC_JIFFIE_SC + 19)
SEC_CONVERSION  macro  include/linux/jiffies.h  263  #define SEC_CONVERSION ((unsigned long)((((u64)NSEC_PER_SEC << SEC_JIFFIE_SC) + TICK_NSEC -1) / (u64)TICK_NSEC))
NSEC_CONVERSION  macro  include/linux/jiffies.h  266  #define NSEC_CONVERSION ((unsigned long)((((u64)1 << NSEC_JIFFIE_SC) + TICK_NSEC -1) / (u64)TICK_NSEC))
USEC_CONVERSION  macro  include/linux/jiffies.h  268  #define USEC_CONVERSION ((unsigned long)((((u64)NSEC_PER_USEC << USEC_JIFFIE_SC) + TICK_NSEC -1) / (u64)TICK_NSEC))
USEC_ROUND  macro  include/linux/jiffies.h  278  #define USEC_ROUND (u64)(((u64)1 << USEC_JIFFIE_SC) - 1)
MAX_SEC_IN_JIFFIES  macro  include/linux/jiffies.h  288  # define MAX_SEC_IN_JIFFIES (SH_DIV((MAX_JIFFY_OFFSET >> SEC_JIFFIE_SC) * TICK_NSEC, NSEC_PER_SEC, 1) - 1)
jiffies_to_msecs  prototype  include/linux/jiffies.h  296  extern unsigned int jiffies_to_msecs(const unsigned long j);
jiffies_to_usecs  prototype  include/linux/jiffies.h  297  extern unsigned int jiffies_to_usecs(const unsigned long j);
msecs_to_jiffies  prototype  include/linux/jiffies.h  298  extern unsigned long msecs_to_jiffies(const unsigned int m);
usecs_to_jiffies  prototype  include/linux/jiffies.h  299  extern unsigned long usecs_to_jiffies(const unsigned int u);
timespec_to_jiffies  prototype  include/linux/jiffies.h  300  extern unsigned long timespec_to_jiffies(const struct timespec *value);
jiffies_to_timespec  prototype  include/linux/jiffies.h  301  extern void jiffies_to_timespec(const unsigned long jiffies,struct timespec *value);
timeval_to_jiffies  prototype  include/linux/jiffies.h  303  extern unsigned long timeval_to_jiffies(const struct timeval *value);
jiffies_to_timeval  prototype  include/linux/jiffies.h  304  extern void jiffies_to_timeval(const unsigned long jiffies,struct timeval *value);
jiffies_to_clock_t  prototype  include/linux/jiffies.h  306  extern clock_t jiffies_to_clock_t(unsigned long x);
clock_t_to_jiffies  prototype  include/linux/jiffies.h  307  extern unsigned long clock_t_to_jiffies(unsigned long x);
jiffies_64_to_clock_t  prototype  include/linux/jiffies.h  308  extern u64 jiffies_64_to_clock_t(u64 x);
nsec_to_clock_t  prototype  include/linux/jiffies.h  309  extern u64 nsec_to_clock_t(u64 x);
nsecs_to_jiffies64  prototype  include/linux/jiffies.h  310  extern u64 nsecs_to_jiffies64(u64 n);
nsecs_to_jiffies  prototype  include/linux/jiffies.h  311  extern unsigned long nsecs_to_jiffies(u64 n);
TIMESTAMP_SIZE  macro  include/linux/jiffies.h  313  #define TIMESTAMP_SIZE 30
_LINUX_RBTREE_H  macro  include/linux/rbtree.h  95  #define _LINUX_RBTREE_H
rb_node  struct  include/linux/rbtree.h  100  struct rb_node { unsigned long rb_parent_color; #define RB_RED 0 #define RB_BLACK 1 struct rb_node *rb_right; struct rb_node *rb_left; } __attribute__((aligned(sizeof(long))));
rb_root  struct  include/linux/rbtree.h  110  struct rb_root { struct rb_node *rb_node; };
rb_parent  macro  include/linux/rbtree.h  116  #define rb_parent(r) ((struct rb_node *)((r)->rb_parent_color & ~3))
rb_color  macro  include/linux/rbtree.h  117  #define rb_color(r) ((r)->rb_parent_color & 1)
rb_is_red  macro  include/linux/rbtree.h  118  #define rb_is_red(r) (!rb_color(r))
rb_is_black  macro  include/linux/rbtree.h  119  #define rb_is_black(r) rb_color(r)
rb_set_red  macro  include/linux/rbtree.h  120  #define rb_set_red(r) do { (r)->rb_parent_color &= ~1; } while (0)
rb_set_black  macro  include/linux/rbtree.h  121  #define rb_set_black(r) do { (r)->rb_parent_color |= 1; } while (0)
rb_set_parent  function  include/linux/rbtree.h  123  static inline void rb_set_parent(struct rb_node *rb,struct rb_node *p)
rb_set_color  function  include/linux/rbtree.h  127  static inline void rb_set_color(struct rb_node *rb,int color)
RB_ROOT  macro  include/linux/rbtree.h  132  #define RB_ROOT (struct rb_root) { NULL,}
rb_entry  macro  include/linux/rbtree.h  133  #define rb_entry(ptr,type,member) container_of(ptr,type,member)
RB_EMPTY_ROOT  macro  include/linux/rbtree.h  135  #define RB_EMPTY_ROOT(root) ((root)->rb_node == NULL)
RB_EMPTY_NODE  macro  include/linux/rbtree.h  136  #define RB_EMPTY_NODE(node) (rb_parent(node) == node)
RB_CLEAR_NODE  macro  include/linux/rbtree.h  137  #define RB_CLEAR_NODE(node) (rb_set_parent(node,node))
rb_init_node  function  include/linux/rbtree.h  139  static inline void rb_init_node(struct rb_node *rb)
rb_insert_color  prototype  include/linux/rbtree.h  147  extern void rb_insert_color(struct rb_node *,struct rb_root *);
rb_erase  prototype  include/linux/rbtree.h  148  extern void rb_erase(struct rb_node *,struct rb_root *);
rb_augment_insert  prototype  include/linux/rbtree.h  152  extern void rb_augment_insert(struct rb_node *node,rb_augment_f func, void *data);
rb_augment_erase_begin  prototype  include/linux/rbtree.h  154  extern struct rb_node *rb_augment_erase_begin(struct rb_node *node);
rb_augment_erase_end  prototype  include/linux/rbtree.h  155  extern void rb_augment_erase_end(struct rb_node *node,rb_augment_f func, void *data);
rb_next  prototype  include/linux/rbtree.h  159  extern struct rb_node *rb_next(const struct rb_node *);
rb_prev  prototype  include/linux/rbtree.h  160  extern struct rb_node *rb_prev(const struct rb_node *);
rb_first  prototype  include/linux/rbtree.h  161  extern struct rb_node *rb_first(const struct rb_root *);
rb_last  prototype  include/linux/rbtree.h  162  extern struct rb_node *rb_last(const struct rb_root *);
rb_replace_node  prototype  include/linux/rbtree.h  165  extern void rb_replace_node(struct rb_node *victim,struct rb_node *new,struct rb_root *root);
rb_link_node  function  include/linux/rbtree.h  168  static inline void rb_link_node(struct rb_node * node,struct rb_node * parent,struct rb_node ** rb_link)
__LINUX_CPUMASK_H  macro  include/linux/cpumask.h  2  #define __LINUX_CPUMASK_H
cpumask  struct  include/linux/cpumask.h  14  typedef struct cpumask { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;
cpumask_t  struct  include/linux/cpumask.h  14  typedef struct cpumask { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;
cpumask_bits  macro  include/linux/cpumask.h  23  #define cpumask_bits(maskp) ((maskp)->bits)
nr_cpu_ids  macro  include/linux/cpumask.h  26  #define nr_cpu_ids 1
nr_cpumask_bits  macro  include/linux/cpumask.h  36  #define nr_cpumask_bits NR_CPUS
num_online_cpus  macro  include/linux/cpumask.h  94  #define num_online_cpus() 1U
num_possible_cpus  macro  include/linux/cpumask.h  95  #define num_possible_cpus() 1U
num_present_cpus  macro  include/linux/cpumask.h  96  #define num_present_cpus() 1U
num_active_cpus  macro  include/linux/cpumask.h  97  #define num_active_cpus() 1U
cpu_online  macro  include/linux/cpumask.h  98  #define cpu_online(cpu) ((cpu) == 0)
cpu_possible  macro  include/linux/cpumask.h  99  #define cpu_possible(cpu) ((cpu) == 0)
cpu_present  macro  include/linux/cpumask.h  100  #define cpu_present(cpu) ((cpu) == 0)
cpu_active  macro  include/linux/cpumask.h  101  #define cpu_active(cpu) ((cpu) == 0)
cpumask_check  function  include/linux/cpumask.h  105  static inline unsigned int cpumask_check(unsigned int cpu)
cpumask_first  function  include/linux/cpumask.h  158  static inline unsigned int cpumask_first(const struct cpumask *srcp)
cpumask_next  function  include/linux/cpumask.h  170  static inline unsigned int cpumask_next(int n,const struct cpumask *srcp)
cpumask_next_zero  function  include/linux/cpumask.h  185  static inline unsigned int cpumask_next_zero(int n,const struct cpumask *srcp)
cpumask_next_and  prototype  include/linux/cpumask.h  193  int cpumask_next_and(int n,const struct cpumask *,const struct cpumask *);
cpumask_any_but  prototype  include/linux/cpumask.h  194  int cpumask_any_but(const struct cpumask *mask,unsigned int cpu);
for_each_cpu  macro  include/linux/cpumask.h  203  #define for_each_cpu(cpu,mask) for ((cpu) = -1; (cpu) = cpumask_next((cpu), (mask)), (cpu) < nr_cpu_ids;)
for_each_cpu_not  macro  include/linux/cpumask.h  215  #define for_each_cpu_not(cpu,mask) for ((cpu) = -1; (cpu) = cpumask_next_zero((cpu), (mask)), (cpu) < nr_cpu_ids;)
for_each_cpu_and  macro  include/linux/cpumask.h  234  #define for_each_cpu_and(cpu,mask,and) for ((cpu) = -1; (cpu) = cpumask_next_and((cpu), (mask), (and)), (cpu) < nr_cpu_ids;)
CPU_BITS_NONE  macro  include/linux/cpumask.h  240  #define CPU_BITS_NONE { [0 ... BITS_TO_LONGS(NR_CPUS)-1] = 0UL }
CPU_BITS_CPU0  macro  include/linux/cpumask.h  245  #define CPU_BITS_CPU0 { [0] =  1UL }
cpumask_set_cpu  function  include/linux/cpumask.h  255  static inline void cpumask_set_cpu(unsigned int cpu,struct cpumask *dstp)
cpumask_clear_cpu  function  include/linux/cpumask.h  265  static inline void cpumask_clear_cpu(int cpu,struct cpumask *dstp)
cpumask_test_cpu  macro  include/linux/cpumask.h  277  #define cpumask_test_cpu(cpu,cpumask) test_bit(cpumask_check(cpu), cpumask_bits((cpumask)))
cpumask_test_and_set_cpu  function  include/linux/cpumask.h  287  static inline int cpumask_test_and_set_cpu(int cpu,struct cpumask *cpumask)
cpumask_test_and_clear_cpu  function  include/linux/cpumask.h  299  static inline int cpumask_test_and_clear_cpu(int cpu,struct cpumask *cpumask)
cpumask_setall  function  include/linux/cpumask.h  308  static inline void cpumask_setall(struct cpumask *dstp)
cpumask_clear  function  include/linux/cpumask.h  317  static inline void cpumask_clear(struct cpumask *dstp)
cpumask_and  function  include/linux/cpumask.h  328  static inline int cpumask_and(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_or  function  include/linux/cpumask.h  342  static inline void cpumask_or(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_xor  function  include/linux/cpumask.h  355  static inline void cpumask_xor(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_andnot  function  include/linux/cpumask.h  369  static inline int cpumask_andnot(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_complement  function  include/linux/cpumask.h  382  static inline void cpumask_complement(struct cpumask *dstp,const struct cpumask *srcp)
cpumask_equal  function  include/linux/cpumask.h  394  static inline bool cpumask_equal(const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_intersects  function  include/linux/cpumask.h  406  static inline bool cpumask_intersects(const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_subset  function  include/linux/cpumask.h  418  static inline int cpumask_subset(const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_empty  function  include/linux/cpumask.h  429  static inline bool cpumask_empty(const struct cpumask *srcp)
cpumask_full  function  include/linux/cpumask.h  438  static inline bool cpumask_full(const struct cpumask *srcp)
cpumask_weight  function  include/linux/cpumask.h  447  static inline unsigned int cpumask_weight(const struct cpumask *srcp)
cpumask_shift_right  function  include/linux/cpumask.h  458  static inline void cpumask_shift_right(struct cpumask *dstp,const struct cpumask *srcp, int n)
cpumask_shift_left  function  include/linux/cpumask.h  471  static inline void cpumask_shift_left(struct cpumask *dstp,const struct cpumask *srcp, int n)
cpumask_copy  function  include/linux/cpumask.h  483  static inline void cpumask_copy(struct cpumask *dstp,const struct cpumask *srcp)
cpumask_any  macro  include/linux/cpumask.h  495  #define cpumask_any(srcp) cpumask_first(srcp)
cpumask_first_and  macro  include/linux/cpumask.h  504  #define cpumask_first_and(src1p,src2p) cpumask_next_and(-1,(src1p),(src2p))
cpumask_any_and  macro  include/linux/cpumask.h  513  #define cpumask_any_and(mask1,mask2) cpumask_first_and((mask1),(mask2))
cpumask_of  macro  include/linux/cpumask.h  519  #define cpumask_of(cpu) (get_cpu_mask(cpu))
cpumask_scnprintf  function  include/linux/cpumask.h  530  static inline int cpumask_scnprintf(char *buf,int len,const struct cpumask *srcp)
cpumask_parse_user  function  include/linux/cpumask.h  544  static inline int cpumask_parse_user(const char __user *buf,int len,struct cpumask *dstp)
cpumask_parselist_user  function  include/linux/cpumask.h  558  static inline int cpumask_parselist_user(const char __user *buf,int len,struct cpumask *dstp)
cpulist_scnprintf  function  include/linux/cpumask.h  574  static inline int cpulist_scnprintf(char *buf,int len,const struct cpumask *srcp)
cpulist_parse  function  include/linux/cpumask.h  589  static inline int cpulist_parse(const char *buf,struct cpumask *dstp)
cpumask_size  function  include/linux/cpumask.h  599  static inline size_t cpumask_size(void)
alloc_cpumask_var_node  function  include/linux/cpumask.h  655  static inline bool alloc_cpumask_var_node(cpumask_var_t *mask,gfp_t flags,int node)
alloc_cpumask_var  function  include/linux/cpumask.h  650  static inline bool alloc_cpumask_var(cpumask_var_t *mask,gfp_t flags)
zalloc_cpumask_var_node  function  include/linux/cpumask.h  667  static inline bool zalloc_cpumask_var_node(cpumask_var_t *mask,gfp_t flags,int node)
zalloc_cpumask_var  function  include/linux/cpumask.h  661  static inline bool zalloc_cpumask_var(cpumask_var_t *mask,gfp_t flags)
alloc_bootmem_cpumask_var  function  include/linux/cpumask.h  674  static inline void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
free_cpumask_var  function  include/linux/cpumask.h  678  static inline void free_cpumask_var(cpumask_var_t mask)
free_bootmem_cpumask_var  function  include/linux/cpumask.h  682  static inline void free_bootmem_cpumask_var(cpumask_var_t mask)
cpu_all_mask  macro  include/linux/cpumask.h  690  #define cpu_all_mask to_cpumask(cpu_all_bits)
cpu_none_mask  macro  include/linux/cpumask.h  693  #define cpu_none_mask to_cpumask(cpu_bit_bitmap[0])
for_each_possible_cpu  macro  include/linux/cpumask.h  695  #define for_each_possible_cpu(cpu) for_each_cpu((cpu),cpu_possible_mask)
for_each_online_cpu  macro  include/linux/cpumask.h  696  #define for_each_online_cpu(cpu) for_each_cpu((cpu),cpu_online_mask)
for_each_present_cpu  macro  include/linux/cpumask.h  697  #define for_each_present_cpu(cpu) for_each_cpu((cpu),cpu_present_mask)
set_cpu_possible  prototype  include/linux/cpumask.h  700  void set_cpu_possible(unsigned int cpu,bool possible);
set_cpu_present  prototype  include/linux/cpumask.h  701  void set_cpu_present(unsigned int cpu,bool present);
set_cpu_online  prototype  include/linux/cpumask.h  702  void set_cpu_online(unsigned int cpu,bool online);
set_cpu_active  prototype  include/linux/cpumask.h  703  void set_cpu_active(unsigned int cpu,bool active);
init_cpu_present  prototype  include/linux/cpumask.h  704  void init_cpu_present(const struct cpumask *src);
init_cpu_possible  prototype  include/linux/cpumask.h  705  void init_cpu_possible(const struct cpumask *src);
init_cpu_online  prototype  include/linux/cpumask.h  706  void init_cpu_online(const struct cpumask *src);
to_cpumask  macro  include/linux/cpumask.h  718  #define to_cpumask(bitmap) ((struct cpumask *)(1 ? (bitmap) : (void *)sizeof(__check_is_bitmap(bitmap))))
__check_is_bitmap  function  include/linux/cpumask.h  722  static inline int __check_is_bitmap(const unsigned long *bitmap)
get_cpu_mask  function  include/linux/cpumask.h  737  static inline const struct cpumask *get_cpu_mask(unsigned int cpu)
cpu_is_offline  macro  include/linux/cpumask.h  744  #define cpu_is_offline(cpu) unlikely(!cpu_online(cpu))
CPU_BITS_ALL  macro  include/linux/cpumask.h  754  #define CPU_BITS_ALL { [0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL, [BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD }
cpumask_of_cpu  macro  include/linux/cpumask.h  767  #define cpumask_of_cpu(cpu) (*get_cpu_mask(cpu))
CPU_MASK_LAST_WORD  macro  include/linux/cpumask.h  769  #define CPU_MASK_LAST_WORD BITMAP_LAST_WORD_MASK(NR_CPUS)
CPU_MASK_ALL  macro  include/linux/cpumask.h  780  #define CPU_MASK_ALL (cpumask_t) { { [0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL, [BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD } }
CPU_MASK_NONE  macro  include/linux/cpumask.h  788  #define CPU_MASK_NONE (cpumask_t) { { [0 ... BITS_TO_LONGS(NR_CPUS)-1] =  0UL } }
CPU_MASK_CPU0  macro  include/linux/cpumask.h  793  #define CPU_MASK_CPU0 (cpumask_t) { { [0] =  1UL } }
first_cpu  macro  include/linux/cpumask.h  808  #define first_cpu(src) __first_cpu(&(src))
next_cpu  macro  include/linux/cpumask.h  809  #define next_cpu(n,src) __next_cpu((n),&(src))
any_online_cpu  macro  include/linux/cpumask.h  810  #define any_online_cpu(mask) cpumask_any_and(&mask,cpu_online_mask)
for_each_cpu_mask  macro  include/linux/cpumask.h  811  #define for_each_cpu_mask(cpu,mask) for ((cpu) = -1; (cpu) = next_cpu((cpu), (mask)), (cpu) < NR_CPUS; )
__first_cpu  prototype  include/linux/cpumask.h  805  int __first_cpu(const cpumask_t *srcp);
__next_cpu  prototype  include/linux/cpumask.h  806  int __next_cpu(int n,const cpumask_t *srcp);
for_each_cpu_mask_nr  macro  include/linux/cpumask.h  824  #define for_each_cpu_mask_nr(cpu,mask) for ((cpu) = -1; (cpu) = __next_cpu_nr((cpu), &(mask)), (cpu) < nr_cpu_ids; )
__next_cpu_nr  prototype  include/linux/cpumask.h  823  int __next_cpu_nr(int n,const cpumask_t *srcp);
cpus_addr  macro  include/linux/cpumask.h  831  #define cpus_addr(src) ((src).bits)
cpu_set  macro  include/linux/cpumask.h  833  #define cpu_set(cpu,dst) __cpu_set((cpu),&(dst))
__cpu_set  function  include/linux/cpumask.h  834  static inline void __cpu_set(int cpu,volatile cpumask_t *dstp)
cpu_clear  macro  include/linux/cpumask.h  839  #define cpu_clear(cpu,dst) __cpu_clear((cpu),&(dst))
__cpu_clear  function  include/linux/cpumask.h  840  static inline void __cpu_clear(int cpu,volatile cpumask_t *dstp)
cpus_setall  macro  include/linux/cpumask.h  845  #define cpus_setall(dst) __cpus_setall(&(dst),NR_CPUS)
__cpus_setall  function  include/linux/cpumask.h  846  static inline void __cpus_setall(cpumask_t *dstp,int nbits)
cpus_clear  macro  include/linux/cpumask.h  851  #define cpus_clear(dst) __cpus_clear(&(dst),NR_CPUS)
__cpus_clear  function  include/linux/cpumask.h  852  static inline void __cpus_clear(cpumask_t *dstp,int nbits)
cpu_isset  macro  include/linux/cpumask.h  858  #define cpu_isset(cpu,cpumask) test_bit((cpu),(cpumask).bits)
cpu_test_and_set  macro  include/linux/cpumask.h  860  #define cpu_test_and_set(cpu,cpumask) __cpu_test_and_set((cpu),&(cpumask))
__cpu_test_and_set  function  include/linux/cpumask.h  861  static inline int __cpu_test_and_set(int cpu,cpumask_t *addr)
cpus_and  macro  include/linux/cpumask.h  866  #define cpus_and(dst,src1,src2) __cpus_and(&(dst),&(src1),&(src2),NR_CPUS)
__cpus_and  function  include/linux/cpumask.h  867  static inline int __cpus_and(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_or  macro  include/linux/cpumask.h  873  #define cpus_or(dst,src1,src2) __cpus_or(&(dst),&(src1),&(src2),NR_CPUS)
__cpus_or  function  include/linux/cpumask.h  874  static inline void __cpus_or(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_xor  macro  include/linux/cpumask.h  880  #define cpus_xor(dst,src1,src2) __cpus_xor(&(dst),&(src1),&(src2),NR_CPUS)
__cpus_xor  function  include/linux/cpumask.h  881  static inline void __cpus_xor(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_andnot  macro  include/linux/cpumask.h  887  #define cpus_andnot(dst,src1,src2) __cpus_andnot(&(dst), &(src1), &(src2), NR_CPUS)
__cpus_andnot  function  include/linux/cpumask.h  889  static inline int __cpus_andnot(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_equal  macro  include/linux/cpumask.h  895  #define cpus_equal(src1,src2) __cpus_equal(&(src1),&(src2),NR_CPUS)
__cpus_equal  function  include/linux/cpumask.h  896  static inline int __cpus_equal(const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_intersects  macro  include/linux/cpumask.h  902  #define cpus_intersects(src1,src2) __cpus_intersects(&(src1),&(src2),NR_CPUS)
__cpus_intersects  function  include/linux/cpumask.h  903  static inline int __cpus_intersects(const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_subset  macro  include/linux/cpumask.h  909  #define cpus_subset(src1,src2) __cpus_subset(&(src1),&(src2),NR_CPUS)
__cpus_subset  function  include/linux/cpumask.h  910  static inline int __cpus_subset(const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_empty  macro  include/linux/cpumask.h  916  #define cpus_empty(src) __cpus_empty(&(src),NR_CPUS)
__cpus_empty  function  include/linux/cpumask.h  917  static inline int __cpus_empty(const cpumask_t *srcp,int nbits)
cpus_weight  macro  include/linux/cpumask.h  922  #define cpus_weight(cpumask) __cpus_weight(&(cpumask),NR_CPUS)
__cpus_weight  function  include/linux/cpumask.h  923  static inline int __cpus_weight(const cpumask_t *srcp,int nbits)
cpus_shift_left  macro  include/linux/cpumask.h  928  #define cpus_shift_left(dst,src,n) __cpus_shift_left(&(dst), &(src), (n), NR_CPUS)
__cpus_shift_left  function  include/linux/cpumask.h  930  static inline void __cpus_shift_left(cpumask_t *dstp,const cpumask_t *srcp, int n, int nbits)
_LINUX_ERRNO_H  macro  include/linux/errno.h  2  #define _LINUX_ERRNO_H
ERESTARTSYS  macro  include/linux/errno.h  14  #define ERESTARTSYS 512
ERESTARTNOINTR  macro  include/linux/errno.h  15  #define ERESTARTNOINTR 513
ERESTARTNOHAND  macro  include/linux/errno.h  16  #define ERESTARTNOHAND 514
ENOIOCTLCMD  macro  include/linux/errno.h  17  #define ENOIOCTLCMD 515
ERESTART_RESTARTBLOCK  macro  include/linux/errno.h  18  #define ERESTART_RESTARTBLOCK 516
EPROBE_DEFER  macro  include/linux/errno.h  19  #define EPROBE_DEFER 517
EOPENSTALE  macro  include/linux/errno.h  20  #define EOPENSTALE 518
EBADHANDLE  macro  include/linux/errno.h  23  #define EBADHANDLE 521
ENOTSYNC  macro  include/linux/errno.h  24  #define ENOTSYNC 522
EBADCOOKIE  macro  include/linux/errno.h  25  #define EBADCOOKIE 523
ENOTSUPP  macro  include/linux/errno.h  26  #define ENOTSUPP 524
ETOOSMALL  macro  include/linux/errno.h  27  #define ETOOSMALL 525
ESERVERFAULT  macro  include/linux/errno.h  28  #define ESERVERFAULT 526
EBADTYPE  macro  include/linux/errno.h  29  #define EBADTYPE 527
EJUKEBOX  macro  include/linux/errno.h  30  #define EJUKEBOX 528
EIOCBQUEUED  macro  include/linux/errno.h  31  #define EIOCBQUEUED 529
EIOCBRETRY  macro  include/linux/errno.h  32  #define EIOCBRETRY 530
_LINUX_MM_TYPES_H  macro  include/linux/mm_types.h  2  #define _LINUX_MM_TYPES_H
AT_VECTOR_SIZE_ARCH  macro  include/linux/mm_types.h  20  #define AT_VECTOR_SIZE_ARCH 0
AT_VECTOR_SIZE  macro  include/linux/mm_types.h  22  #define AT_VECTOR_SIZE (2*(AT_VECTOR_SIZE_ARCH + AT_VECTOR_SIZE_BASE + 1))
USE_SPLIT_PTLOCKS  macro  include/linux/mm_types.h  26  #define USE_SPLIT_PTLOCKS (NR_CPUS >= CONFIG_SPLIT_PTLOCK_CPUS)
page  struct  include/linux/mm_types.h  41  struct page { unsigned long flags; struct address_space *mapping; pgoff_t index; void *freelist; }; unsigned long counters; atomic_t _mapcount; struct { unsigned inuse:16; unsigned objects:15; unsigned frozen:1; }; atomic_t _count; }; struct list_head lru; struct page *next; int pages; int pobjects; short int pages; short int pobjects; spinlock_t ptl; struct kmem_cache *slab; struct page *first_page; }; unsigned long debug_flags; void *shadow; }
page_frag  struct  include/linux/mm_types.h  173  struct page_frag { struct page *page; __u32 offset; __u32 size; __u16 offset; __u16 size; };
vm_region  struct  include/linux/mm_types.h  191  struct vm_region { struct rb_node vm_rb; vm_flags_t vm_flags; unsigned long vm_start; unsigned long vm_end; unsigned long vm_top; unsigned long vm_pgoff; struct file *vm_file; int vm_usage; bool vm_icache_flushed : 1; };
vm_area_struct  struct  include/linux/mm_types.h  211  struct vm_area_struct { struct mm_struct * vm_mm; unsigned long vm_start; unsigned long vm_end; struct vm_area_struct *vm_next, *vm_prev; pgprot_t vm_page_prot; unsigned long vm_flags; struct rb_node vm_rb; struct list_head list; void *parent; struct vm_area_struct *head; } vm_set; struct raw_prio_tree_node prio_tree_node; } shared; struct list_head anon_vma_chain; struct anon_vma *anon_vma; const struct vm_operations_struct *vm_ops; unsigned long vm_pgoff; struct file * vm_file; void * vm_private_data; struct vm_region *vm_region; struct mempolicy *vm_policy; };
core_thread  struct  include/linux/mm_types.h  268  struct core_thread { struct task_struct *task; struct core_thread *next; };
core_state  struct  include/linux/mm_types.h  273  struct core_state { atomic_t nr_threads; struct core_thread dumper; struct completion startup; };
SPLIT_RSS_COUNTING  macro  include/linux/mm_types.h  287  #define SPLIT_RSS_COUNTING
task_rss_stat  struct  include/linux/mm_types.h  289  struct task_rss_stat { int events; int count[NR_MM_COUNTERS]; };
mm_rss_stat  struct  include/linux/mm_types.h  295  struct mm_rss_stat { atomic_long_t count[NR_MM_COUNTERS]; };
mm_struct  struct  include/linux/mm_types.h  299  struct mm_struct { struct vm_area_struct * mmap; struct rb_root mm_rb; struct vm_area_struct * mmap_cache; unsigned long (*get_unmapped_area) (struct file *filp,unsigned long addr, unsigned long len,unsigned long pgoff, unsigned long flags); void (*unmap_area) (struct mm_struct *mm, unsigned long addr); unsigned long mmap_base; unsigned long task_size; unsigned long cached_hole_size; unsigned long free_area_cache; pgd_t * pgd; atomic_t mm_users; atomic_t mm_count; int map_count; spinlock_t page_table_lock; struct rw_semaphore mmap_sem; struct list_head mmlist; unsigned long hiwater_rss; unsigned long hiwater_vm; unsigned long total_vm; unsigned long locked_vm; unsigned long pinned_vm; unsigned long shared_vm; unsigned long exec_vm; unsigned long stack_vm; unsigned long reserved_vm; unsigned long def_flags; unsigned long nr_ptes; unsigned long start_code, end_code, start_data, end_data; unsigned long start_brk, brk, start_stack; unsigned long arg_start, arg_end, env_start, env_end; unsigned long saved_auxv[AT_VECTOR_SIZE]; struct mm_rss_stat rss_stat; struct linux_binfmt *binfmt; cpumask_var_t cpu_vm_mask_var; mm_context_t context; unsigned long flags; struct core_state *core_state; spinlock_t ioctx_lock; struct hlist_head ioctx_list; struct task_struct __rcu *owner; struct file *exe_file; unsigned long num_exe_file_vmas; struct mmu_notifier_mm *mmu_notifier_mm; pgtable_t pmd_huge_pte; struct cpumask cpumask_allocation; struct uprobes_state uprobes_state; };
mm_init_cpumask  function  include/linux/mm_types.h  394  static inline void mm_init_cpumask(struct mm_struct *mm)
mm_cpumask  function  include/linux/mm_types.h  402  static inline cpumask_t *mm_cpumask(struct mm_struct *mm)
_ASM_X86_PTRACE_H  macro  arch/x86/include/asm/ptrace.h  2  #define _ASM_X86_PTRACE_H
pt_regs  struct  arch/x86/include/asm/ptrace.h  99  struct pt_regs { unsigned long r15; unsigned long r14; unsigned long r13; unsigned long r12; unsigned long bp; unsigned long bx; unsigned long r11; unsigned long r10; unsigned long r9; unsigned long r8; unsigned long ax; unsigned long cx; unsigned long dx; unsigned long si; unsigned long di; unsigned long orig_ax; unsigned long ip; unsigned long cs; unsigned long flags; unsigned long sp; unsigned long ss; };
profile_pc  macro  arch/x86/include/asm/ptrace.h  142  #define profile_pc profile_pc
convert_ip_to_linear  prototype  arch/x86/include/asm/ptrace.h  145  convert_ip_to_linear(struct task_struct *child,struct pt_regs *regs);
send_sigtrap  prototype  arch/x86/include/asm/ptrace.h  146  extern void send_sigtrap(struct task_struct *tsk,struct pt_regs *regs,int error_code, int si_code);
syscall_trace_enter  prototype  arch/x86/include/asm/ptrace.h  149  extern long syscall_trace_enter(struct pt_regs *);
syscall_trace_leave  prototype  arch/x86/include/asm/ptrace.h  150  extern void syscall_trace_leave(struct pt_regs *);
regs_return_value  function  arch/x86/include/asm/ptrace.h  152  static inline unsigned long regs_return_value(struct pt_regs *regs)
user_mode  function  arch/x86/include/asm/ptrace.h  164  static inline int user_mode(struct pt_regs *regs)
user_mode_vm  function  arch/x86/include/asm/ptrace.h  173  static inline int user_mode_vm(struct pt_regs *regs)
v8086_mode  function  arch/x86/include/asm/ptrace.h  183  static inline int v8086_mode(struct pt_regs *regs)
user_64bit_mode  function  arch/x86/include/asm/ptrace.h  193  static inline bool user_64bit_mode(struct pt_regs *regs)
kernel_stack_pointer  function  arch/x86/include/asm/ptrace.h  215  static inline unsigned long kernel_stack_pointer(struct pt_regs *regs)
GET_IP  macro  arch/x86/include/asm/ptrace.h  224  #define GET_IP(regs) ((regs)->ip)
GET_FP  macro  arch/x86/include/asm/ptrace.h  225  #define GET_FP(regs) ((regs)->bp)
GET_USP  macro  arch/x86/include/asm/ptrace.h  226  #define GET_USP(regs) ((regs)->sp)
regs_query_register_offset  prototype  arch/x86/include/asm/ptrace.h  231  extern int regs_query_register_offset(const char *name);
regs_query_register_name  prototype  arch/x86/include/asm/ptrace.h  232  extern const char *regs_query_register_name(unsigned int offset);
MAX_REG_OFFSET  macro  arch/x86/include/asm/ptrace.h  233  #define MAX_REG_OFFSET (offsetof(struct pt_regs,ss))
regs_get_register  function  arch/x86/include/asm/ptrace.h  244  static inline unsigned long regs_get_register(struct pt_regs *regs,unsigned int offset)
regs_within_kernel_stack  function  arch/x86/include/asm/ptrace.h  260  static inline int regs_within_kernel_stack(struct pt_regs *regs,unsigned long addr)
regs_get_kernel_stack_nth  function  arch/x86/include/asm/ptrace.h  276  static inline unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,unsigned int n)
arch_has_single_step  macro  arch/x86/include/asm/ptrace.h  287  #define arch_has_single_step() (1)
arch_has_block_step  macro  arch/x86/include/asm/ptrace.h  291  #define arch_has_block_step() (boot_cpu_data.x86 >= 6)
ARCH_HAS_USER_SINGLE_STEP_INFO  macro  arch/x86/include/asm/ptrace.h  294  #define ARCH_HAS_USER_SINGLE_STEP_INFO
do_get_thread_area  prototype  arch/x86/include/asm/ptrace.h  297  extern int do_get_thread_area(struct task_struct *p,int idx,struct user_desc __user *info);
do_set_thread_area  prototype  arch/x86/include/asm/ptrace.h  299  extern int do_set_thread_area(struct task_struct *p,int idx,struct user_desc __user *info, int can_allocate);
__LINUX_SMP_H  macro  include/linux/smp.h  2  #define __LINUX_SMP_H
cpu_idle  prototype  include/linux/smp.h  15  extern void cpu_idle(void);
call_single_data  struct  include/linux/smp.h  18  struct call_single_data { struct list_head list; smp_call_func_t func; void *info; u16 flags; u16 priv; };
smp_call_function_single  prototype  include/linux/smp.h  29  int smp_call_function_single(int cpuid,smp_call_func_t func,void *info,int wait);
smp_send_stop  function  include/linux/smp.h  134  static inline void smp_send_stop(void) { }
smp_send_reschedule  function  include/linux/smp.h  183  static inline void smp_send_reschedule(int cpu) { }
smp_prepare_cpus  prototype  include/linux/smp.h  59  extern void smp_prepare_cpus(unsigned int max_cpus);
__cpu_up  prototype  include/linux/smp.h  64  extern int __cpu_up(unsigned int cpunum,struct task_struct *tidle);
smp_cpus_done  prototype  include/linux/smp.h  69  extern void smp_cpus_done(unsigned int max_cpus);
smp_call_function  macro  include/linux/smp.h  144  #define smp_call_function(func,info,wait) (up_smp_call_function(func, info))
smp_call_function_many  macro  include/linux/smp.h  186  #define smp_call_function_many(mask,func,info,wait) (up_smp_call_function(func, info))
__smp_call_function_single  prototype  include/linux/smp.h  78  void __smp_call_function_single(int cpuid,struct call_single_data *data,int wait);
smp_call_function_any  function  include/linux/smp.h  191  smp_call_function_any(const struct cpumask *mask,smp_call_func_t func,void *info, int wait)
kick_all_cpus_sync  function  include/linux/smp.h  197  static inline void kick_all_cpus_sync(void) { }
call_function_init  function  include/linux/smp.h  188  static inline void call_function_init(void) { }
generic_smp_call_function_single_interrupt  prototype  include/linux/smp.h  91  void generic_smp_call_function_single_interrupt(void);
generic_smp_call_function_interrupt  prototype  include/linux/smp.h  92  void generic_smp_call_function_interrupt(void);
ipi_call_lock  prototype  include/linux/smp.h  93  void ipi_call_lock(void);
ipi_call_unlock  prototype  include/linux/smp.h  94  void ipi_call_unlock(void);
ipi_call_lock_irq  prototype  include/linux/smp.h  95  void ipi_call_lock_irq(void);
ipi_call_unlock_irq  prototype  include/linux/smp.h  96  void ipi_call_unlock_irq(void);
on_each_cpu  macro  include/linux/smp.h  146  #define on_each_cpu(func,info,wait) ({ local_irq_disable(); func(info); local_irq_enable(); 0; })
on_each_cpu_mask  macro  include/linux/smp.h  159  #define on_each_cpu_mask(mask,func,info,wait) do { if (cpumask_test_cpu(0, (mask))) { local_irq_disable(); (func)(info); local_irq_enable(); } } while (0)
on_each_cpu_cond  macro  include/linux/smp.h  171  #define on_each_cpu_cond(cond_func,func,info,wait,gfp_flags) do { void *__info = (info); preempt_disable(); if ((cond_func)(0, __info)) { local_irq_disable(); (func)(__info); local_irq_enable(); } preempt_enable(); } while (0)
smp_prepare_boot_cpu  macro  include/linux/smp.h  185  #define smp_prepare_boot_cpu() do {} while (0)
setup_nr_cpu_ids  prototype  include/linux/smp.h  129  extern void __init setup_nr_cpu_ids(void);
smp_init  prototype  include/linux/smp.h  130  extern void __init smp_init(void);
raw_smp_processor_id  macro  include/linux/smp.h  139  #define raw_smp_processor_id() 0
up_smp_call_function  function  include/linux/smp.h  140  static inline int up_smp_call_function(smp_call_func_t func,void *info)
num_booting_cpus  macro  include/linux/smp.h  184  #define num_booting_cpus() 1
debug_smp_processor_id  prototype  include/linux/smp.h  217  extern unsigned int debug_smp_processor_id(void);
smp_processor_id  macro  include/linux/smp.h  220  # define smp_processor_id() raw_smp_processor_id()
get_cpu  macro  include/linux/smp.h  223  #define get_cpu() ({ preempt_disable(); smp_processor_id(); })
put_cpu  macro  include/linux/smp.h  224  #define put_cpu() preempt_enable()
arch_disable_smp_support  prototype  include/linux/smp.h  230  extern void arch_disable_smp_support(void);
smp_setup_processor_id  prototype  include/linux/smp.h  232  void smp_setup_processor_id(void);
_LINUX_SEM_H  macro  include/linux/sem.h  2  #define _LINUX_SEM_H
SEM_UNDO  macro  include/linux/sem.h  7  #define SEM_UNDO 0x1000
GETPID  macro  include/linux/sem.h  10  #define GETPID 11
GETVAL  macro  include/linux/sem.h  11  #define GETVAL 12
GETALL  macro  include/linux/sem.h  12  #define GETALL 13
GETNCNT  macro  include/linux/sem.h  13  #define GETNCNT 14
GETZCNT  macro  include/linux/sem.h  14  #define GETZCNT 15
SETVAL  macro  include/linux/sem.h  15  #define SETVAL 16
SETALL  macro  include/linux/sem.h  16  #define SETALL 17
SEM_STAT  macro  include/linux/sem.h  19  #define SEM_STAT 18
SEM_INFO  macro  include/linux/sem.h  20  #define SEM_INFO 19
semid_ds  struct  include/linux/sem.h  23  struct semid_ds { struct ipc_perm sem_perm; __kernel_time_t sem_otime; __kernel_time_t sem_ctime; struct sem *sem_base; struct sem_queue *sem_pending; struct sem_queue **sem_pending_last; struct sem_undo *undo; unsigned short sem_nsems; };
sembuf  struct  include/linux/sem.h  38  struct sembuf { unsigned short sem_num; short sem_op; short sem_flg; };
semun  union  include/linux/sem.h  45  union semun { int val; struct semid_ds __user *buf; unsigned short __user *array; struct seminfo __user *__buf; void __user *__pad; };
seminfo  struct  include/linux/sem.h  53  struct seminfo { int semmap; int semmni; int semmns; int semmnu; int semmsl; int semopm; int semume; int semusz; int semvmx; int semaem; };
SEMMNI  macro  include/linux/sem.h  66  #define SEMMNI 128
SEMMSL  macro  include/linux/sem.h  67  #define SEMMSL 250
SEMMNS  macro  include/linux/sem.h  68  #define SEMMNS (SEMMNI*SEMMSL)
SEMOPM  macro  include/linux/sem.h  69  #define SEMOPM 32
SEMVMX  macro  include/linux/sem.h  70  #define SEMVMX 32767
SEMAEM  macro  include/linux/sem.h  71  #define SEMAEM SEMVMX
SEMUME  macro  include/linux/sem.h  74  #define SEMUME SEMOPM
SEMMNU  macro  include/linux/sem.h  75  #define SEMMNU SEMMNS
SEMMAP  macro  include/linux/sem.h  76  #define SEMMAP SEMMNS
SEMUSZ  macro  include/linux/sem.h  77  #define SEMUSZ 20
sem_array  struct  include/linux/sem.h  87  struct sem_array { sem_perm; time_t sem_otime; time_t sem_ctime; struct sem *sem_base; struct list_head sem_pending; struct list_head list_id; int sem_nsems; int complex_count; };
sysv_sem  struct  include/linux/sem.h  110  struct sysv_sem { };
copy_semundo  function  include/linux/sem.h  114  static inline int copy_semundo(unsigned long clone_flags,struct task_struct *tsk)
exit_sem  function  include/linux/sem.h  119  static inline void exit_sem(struct task_struct *tsk)
_LINUX_SIGNAL_H  macro  include/linux/signal.h  2  #define _LINUX_SIGNAL_H
sigqueue  struct  include/linux/signal.h  18  struct sigqueue { struct list_head list; int flags; siginfo_t info; struct user_struct *user; };
SIGQUEUE_PREALLOC  macro  include/linux/signal.h  26  #define SIGQUEUE_PREALLOC 1
sigpending  struct  include/linux/signal.h  28  struct sigpending { struct list_head list; sigset_t signal; };
sigaddset  function  include/linux/signal.h  42  static inline void sigaddset(sigset_t *set,int _sig)
sigdelset  function  include/linux/signal.h  51  static inline void sigdelset(sigset_t *set,int _sig)
sigismember  function  include/linux/signal.h  60  static inline int sigismember(sigset_t *set,int _sig)
sigfindinword  function  include/linux/signal.h  69  static inline int sigfindinword(unsigned long word)
sigisemptyset  function  include/linux/signal.h  76  static inline int sigisemptyset(sigset_t *set)
sigmask  macro  include/linux/signal.h  93  #define sigmask(sig) (1UL << ((sig) - 1))
_SIG_SET_BINOP  macro  include/linux/signal.h  131  #undef _SIG_SET_BINOP
_sig_or  macro  include/linux/signal.h  132  #undef _sig_or
_sig_and  macro  include/linux/signal.h  133  #undef _sig_and
_sig_andn  macro  include/linux/signal.h  134  #undef _sig_andn
_SIG_SET_OP  macro  include/linux/signal.h  155  #undef _SIG_SET_OP
_sig_not  macro  include/linux/signal.h  156  #undef _sig_not
sigemptyset  function  include/linux/signal.h  158  static inline void sigemptyset(sigset_t *set)
sigfillset  function  include/linux/signal.h  170  static inline void sigfillset(sigset_t *set)
sigaddsetmask  function  include/linux/signal.h  184  static inline void sigaddsetmask(sigset_t *set,unsigned long mask)
sigdelsetmask  function  include/linux/signal.h  189  static inline void sigdelsetmask(sigset_t *set,unsigned long mask)
sigtestsetmask  function  include/linux/signal.h  194  static inline int sigtestsetmask(sigset_t *set,unsigned long mask)
siginitset  function  include/linux/signal.h  199  static inline void siginitset(sigset_t *set,unsigned long mask)
siginitsetinv  function  include/linux/signal.h  211  static inline void siginitsetinv(sigset_t *set,unsigned long mask)
init_sigpending  function  include/linux/signal.h  225  static inline void init_sigpending(struct sigpending *sig)
flush_sigqueue  prototype  include/linux/signal.h  231  extern void flush_sigqueue(struct sigpending *queue);
valid_signal  function  include/linux/signal.h  234  static inline int valid_signal(unsigned long sig)
next_signal  prototype  include/linux/signal.h  242  extern int next_signal(struct sigpending *pending,sigset_t *mask);
do_send_sig_info  prototype  include/linux/signal.h  243  extern int do_send_sig_info(int sig,struct siginfo *info,struct task_struct *p, bool group);
group_send_sig_info  prototype  include/linux/signal.h  245  extern int group_send_sig_info(int sig,struct siginfo *info,struct task_struct *p);
__group_send_sig_info  prototype  include/linux/signal.h  246  extern int __group_send_sig_info(int,struct siginfo *,struct task_struct *);
do_rt_tgsigqueueinfo  prototype  include/linux/signal.h  247  extern long do_rt_tgsigqueueinfo(pid_t tgid,pid_t pid,int sig,siginfo_t *info);
do_sigpending  prototype  include/linux/signal.h  249  extern long do_sigpending(void __user *,unsigned long);
do_sigtimedwait  prototype  include/linux/signal.h  250  extern int do_sigtimedwait(const sigset_t *,siginfo_t *,const struct timespec *);
sigprocmask  prototype  include/linux/signal.h  252  extern int sigprocmask(int,sigset_t *,sigset_t *);
set_current_blocked  prototype  include/linux/signal.h  253  extern void set_current_blocked(sigset_t *);
__set_current_blocked  prototype  include/linux/signal.h  254  extern void __set_current_blocked(const sigset_t *);
sigsuspend  prototype  include/linux/signal.h  256  extern int sigsuspend(sigset_t *);
get_signal_to_deliver  prototype  include/linux/signal.h  258  extern int get_signal_to_deliver(siginfo_t *info,struct k_sigaction *return_ka,struct pt_regs *regs,void *cookie);
signal_delivered  prototype  include/linux/signal.h  259  extern void signal_delivered(int sig,siginfo_t *info,struct k_sigaction *ka,struct pt_regs *regs,int stepping);
exit_signals  prototype  include/linux/signal.h  260  extern void exit_signals(struct task_struct *tsk);
unhandled_signal  prototype  include/linux/signal.h  264  int unhandled_signal(struct task_struct *tsk,int sig);
SIGEMT_MASK  macro  include/linux/signal.h  343  #define SIGEMT_MASK 0
rt_sigmask  macro  include/linux/signal.h  349  #define rt_sigmask(sig) sigmask(sig)
siginmask  macro  include/linux/signal.h  351  #define siginmask(sig,mask) (rt_sigmask(sig) & (mask))
SIG_KERNEL_ONLY_MASK  macro  include/linux/signal.h  353  #define SIG_KERNEL_ONLY_MASK ( rt_sigmask(SIGKILL)   |  rt_sigmask(SIGSTOP))
SIG_KERNEL_STOP_MASK  macro  include/linux/signal.h  356  #define SIG_KERNEL_STOP_MASK ( rt_sigmask(SIGSTOP)   |  rt_sigmask(SIGTSTP)   | rt_sigmask(SIGTTIN)   |  rt_sigmask(SIGTTOU)   )
SIG_KERNEL_COREDUMP_MASK  macro  include/linux/signal.h  360  #define SIG_KERNEL_COREDUMP_MASK ( rt_sigmask(SIGQUIT)   |  rt_sigmask(SIGILL)    | rt_sigmask(SIGTRAP)   |  rt_sigmask(SIGABRT)   | rt_sigmask(SIGFPE)    |  rt_sigmask(SIGSEGV)   | rt_sigmask(SIGBUS)    |  rt_sigmask(SIGSYS)    | rt_sigmask(SIGXCPU)   |  rt_sigmask(SIGXFSZ)   | SIGEMT_MASK				       )
SIG_KERNEL_IGNORE_MASK  macro  include/linux/signal.h  368  #define SIG_KERNEL_IGNORE_MASK ( rt_sigmask(SIGCONT)   |  rt_sigmask(SIGCHLD)   | rt_sigmask(SIGWINCH)  |  rt_sigmask(SIGURG)    )
sig_kernel_only  macro  include/linux/signal.h  372  #define sig_kernel_only(sig) (((sig) < SIGRTMIN) && siginmask(sig, SIG_KERNEL_ONLY_MASK))
sig_kernel_coredump  macro  include/linux/signal.h  374  #define sig_kernel_coredump(sig) (((sig) < SIGRTMIN) && siginmask(sig, SIG_KERNEL_COREDUMP_MASK))
sig_kernel_ignore  macro  include/linux/signal.h  376  #define sig_kernel_ignore(sig) (((sig) < SIGRTMIN) && siginmask(sig, SIG_KERNEL_IGNORE_MASK))
sig_kernel_stop  macro  include/linux/signal.h  378  #define sig_kernel_stop(sig) (((sig) < SIGRTMIN) && siginmask(sig, SIG_KERNEL_STOP_MASK))
sig_user_defined  macro  include/linux/signal.h  381  #define sig_user_defined(t,signr) (((t)->sighand->action[(signr)-1].sa.sa_handler != SIG_DFL) && ((t)->sighand->action[(signr)-1].sa.sa_handler != SIG_IGN))
sig_fatal  macro  include/linux/signal.h  385  #define sig_fatal(t,signr) (!siginmask(signr, SIG_KERNEL_IGNORE_MASK|SIG_KERNEL_STOP_MASK) && (t)->sighand->action[(signr)-1].sa.sa_handler == SIG_DFL)
signals_init  prototype  include/linux/signal.h  389  void signals_init(void);
__LINUX_COMPLETION_H  macro  include/linux/completion.h  2  #define __LINUX_COMPLETION_H
completion  struct  include/linux/completion.h  25  struct completion { unsigned int done; wait_queue_head_t wait; };
COMPLETION_INITIALIZER  macro  include/linux/completion.h  30  #define COMPLETION_INITIALIZER(work) { 0, __WAIT_QUEUE_HEAD_INITIALIZER((work).wait) }
COMPLETION_INITIALIZER_ONSTACK  macro  include/linux/completion.h  33  #define COMPLETION_INITIALIZER_ONSTACK(work) ({ init_completion(&work); work; })
DECLARE_COMPLETION  macro  include/linux/completion.h  44  #define DECLARE_COMPLETION(work) struct completion work = COMPLETION_INITIALIZER(work)
DECLARE_COMPLETION_ONSTACK  macro  include/linux/completion.h  63  # define DECLARE_COMPLETION_ONSTACK(work) DECLARE_COMPLETION(work)
init_completion  function  include/linux/completion.h  73  static inline void init_completion(struct completion *x)
wait_for_completion  prototype  include/linux/completion.h  79  extern void wait_for_completion(struct completion *);
wait_for_completion_interruptible  prototype  include/linux/completion.h  80  extern int wait_for_completion_interruptible(struct completion *x);
wait_for_completion_killable  prototype  include/linux/completion.h  81  extern int wait_for_completion_killable(struct completion *x);
wait_for_completion_timeout  prototype  include/linux/completion.h  82  extern unsigned long wait_for_completion_timeout(struct completion *x,unsigned long timeout);
wait_for_completion_interruptible_timeout  prototype  include/linux/completion.h  84  extern long wait_for_completion_interruptible_timeout(
wait_for_completion_killable_timeout  prototype  include/linux/completion.h  86  extern long wait_for_completion_killable_timeout(
try_wait_for_completion  prototype  include/linux/completion.h  88  extern bool try_wait_for_completion(struct completion *x);
completion_done  prototype  include/linux/completion.h  89  extern bool completion_done(struct completion *x);
complete  prototype  include/linux/completion.h  91  extern void complete(struct completion *);
complete_all  prototype  include/linux/completion.h  92  extern void complete_all(struct completion *);
INIT_COMPLETION  macro  include/linux/completion.h  101  #define INIT_COMPLETION(x) ((x).done = 0)
_LINUX_PID_H  macro  include/linux/pid.h  2  #define _LINUX_PID_H
pid_type  enum  include/linux/pid.h  6  enum pid_type { PIDTYPE_PID, PIDTYPE_PGID, PIDTYPE_SID, PIDTYPE_MAX };
upid  struct  include/linux/pid.h  50  struct upid { int nr; struct pid_namespace *ns; struct hlist_node pid_chain; };
pid  struct  include/linux/pid.h  57  struct pid { atomic_t count; unsigned int level; struct hlist_head tasks[PIDTYPE_MAX]; struct rcu_head rcu; struct upid numbers[1]; };
pid_link  struct  include/linux/pid.h  69  struct pid_link { struct hlist_node node; struct pid *pid; };
get_pid  function  include/linux/pid.h  75  static inline struct pid *get_pid(struct pid *pid)
put_pid  prototype  include/linux/pid.h  82  extern void put_pid(struct pid *pid);
pid_task  prototype  include/linux/pid.h  83  extern struct task_struct *pid_task(struct pid *pid,enum pid_type);
get_pid_task  prototype  include/linux/pid.h  84  extern struct task_struct *get_pid_task(struct pid *pid,enum pid_type);
get_task_pid  prototype  include/linux/pid.h  86  extern struct pid *get_task_pid(struct task_struct *task,enum pid_type type);
attach_pid  prototype  include/linux/pid.h  92  extern void attach_pid(struct task_struct *task,enum pid_type type,struct pid *pid);
detach_pid  prototype  include/linux/pid.h  94  extern void detach_pid(struct task_struct *task,enum pid_type);
change_pid  prototype  include/linux/pid.h  95  extern void change_pid(struct task_struct *task,enum pid_type,struct pid *pid);
transfer_pid  prototype  include/linux/pid.h  97  extern void transfer_pid(struct task_struct *old,struct task_struct *new,enum pid_type);
find_pid_ns  prototype  include/linux/pid.h  112  extern struct pid *find_pid_ns(int nr,struct pid_namespace *ns);
find_vpid  prototype  include/linux/pid.h  113  extern struct pid *find_vpid(int nr);
find_get_pid  prototype  include/linux/pid.h  118  extern struct pid *find_get_pid(int nr);
find_ge_pid  prototype  include/linux/pid.h  119  extern struct pid *find_ge_pid(int nr,struct pid_namespace *);
next_pidmap  prototype  include/linux/pid.h  120  int next_pidmap(struct pid_namespace *pid_ns,unsigned int last);
alloc_pid  prototype  include/linux/pid.h  122  extern struct pid *alloc_pid(struct pid_namespace *ns);
free_pid  prototype  include/linux/pid.h  123  extern void free_pid(struct pid *pid);
ns_of_pid  function  include/linux/pid.h  135  static inline struct pid_namespace *ns_of_pid(struct pid *pid)
is_child_reaper  function  include/linux/pid.h  149  static inline bool is_child_reaper(struct pid *pid)
pid_nr  function  include/linux/pid.h  165  static inline pid_t pid_nr(struct pid *pid)
pid_nr_ns  prototype  include/linux/pid.h  173  pid_t pid_nr_ns(struct pid *pid,struct pid_namespace *ns);
pid_vnr  prototype  include/linux/pid.h  174  pid_t pid_vnr(struct pid *pid);
do_each_pid_task  macro  include/linux/pid.h  176  #define do_each_pid_task(pid,type,task) do { struct hlist_node *pos___; if ((pid) != NULL) hlist_for_each_entry_rcu((task), pos___, &(pid)->tasks[type], pids[type].node) {
while_each_pid_task  macro  include/linux/pid.h  187  #define while_each_pid_task(pid,type,task) if (type == PIDTYPE_PID) break; } } while (0)
do_each_pid_thread  macro  include/linux/pid.h  193  #define do_each_pid_thread(pid,type,task) do_each_pid_task(pid, type, task) { struct task_struct *tg___ = task; do {
while_each_pid_thread  macro  include/linux/pid.h  198  #define while_each_pid_thread(pid,type,task) } while_each_thread(tg___, task); task = tg___; } while_each_pid_task(pid, type, task)
_LINUX_PROPORTIONS_H  macro  include/linux/proportions.h  10  #define _LINUX_PROPORTIONS_H
prop_global  struct  include/linux/proportions.h  16  struct prop_global { int shift; struct percpu_counter events; };
prop_descriptor  struct  include/linux/proportions.h  37  struct prop_descriptor { int index; struct prop_global pg[2]; struct mutex mutex; };
prop_descriptor_init  prototype  include/linux/proportions.h  43  int prop_descriptor_init(struct prop_descriptor *pd,int shift);
prop_change_shift  prototype  include/linux/proportions.h  44  void prop_change_shift(struct prop_descriptor *pd,int new_shift);
prop_local_percpu  struct  include/linux/proportions.h  50  struct prop_local_percpu { struct percpu_counter events; int shift; unsigned long period; raw_spinlock_t lock; };
prop_local_init_percpu  prototype  include/linux/proportions.h  64  int prop_local_init_percpu(struct prop_local_percpu *pl);
prop_local_destroy_percpu  prototype  include/linux/proportions.h  65  void prop_local_destroy_percpu(struct prop_local_percpu *pl);
__prop_inc_percpu  prototype  include/linux/proportions.h  66  void __prop_inc_percpu(struct prop_descriptor *pd,struct prop_local_percpu *pl);
prop_fraction_percpu  prototype  include/linux/proportions.h  67  void prop_fraction_percpu(struct prop_descriptor *pd,struct prop_local_percpu *pl,long *numerator, long *denominator);
prop_inc_percpu  function  include/linux/proportions.h  71  void prop_inc_percpu(struct prop_descriptor *pd,struct prop_local_percpu *pl)
PROP_MAX_SHIFT  macro  include/linux/proportions.h  87  #define PROP_MAX_SHIFT (BITS_PER_LONG/2)
PROP_FRAC_SHIFT  macro  include/linux/proportions.h  90  #define PROP_FRAC_SHIFT (BITS_PER_LONG - PROP_MAX_SHIFT - 1)
PROP_FRAC_BASE  macro  include/linux/proportions.h  91  #define PROP_FRAC_BASE (1UL << PROP_FRAC_SHIFT)
__prop_inc_percpu_max  prototype  include/linux/proportions.h  93  void __prop_inc_percpu_max(struct prop_descriptor *pd,struct prop_local_percpu *pl, long frac);
prop_local_single  struct  include/linux/proportions.h  101  struct prop_local_single { unsigned long events; unsigned long period; int shift; raw_spinlock_t lock; };
INIT_PROP_LOCAL_SINGLE  macro  include/linux/proportions.h  116  #define INIT_PROP_LOCAL_SINGLE(name) {	.lock = __RAW_SPIN_LOCK_UNLOCKED(name.lock), }
prop_local_init_single  prototype  include/linux/proportions.h  120  int prop_local_init_single(struct prop_local_single *pl);
prop_local_destroy_single  prototype  include/linux/proportions.h  121  void prop_local_destroy_single(struct prop_local_single *pl);
__prop_inc_single  prototype  include/linux/proportions.h  122  void __prop_inc_single(struct prop_descriptor *pd,struct prop_local_single *pl);
prop_fraction_single  prototype  include/linux/proportions.h  123  void prop_fraction_single(struct prop_descriptor *pd,struct prop_local_single *pl,long *numerator, long *denominator);
prop_inc_single  function  include/linux/proportions.h  127  void prop_inc_single(struct prop_descriptor *pd,struct prop_local_single *pl)
_LINUX_SECCOMP_H  macro  include/linux/seccomp.h  2  #define _LINUX_SECCOMP_H
SECCOMP_MODE_DISABLED  macro  include/linux/seccomp.h  9  #define SECCOMP_MODE_DISABLED 0
SECCOMP_MODE_STRICT  macro  include/linux/seccomp.h  10  #define SECCOMP_MODE_STRICT 1
SECCOMP_MODE_FILTER  macro  include/linux/seccomp.h  11  #define SECCOMP_MODE_FILTER 2
SECCOMP_RET_KILL  macro  include/linux/seccomp.h  21  #define SECCOMP_RET_KILL 0x00000000U
SECCOMP_RET_TRAP  macro  include/linux/seccomp.h  22  #define SECCOMP_RET_TRAP 0x00030000U
SECCOMP_RET_ERRNO  macro  include/linux/seccomp.h  23  #define SECCOMP_RET_ERRNO 0x00050000U
SECCOMP_RET_TRACE  macro  include/linux/seccomp.h  24  #define SECCOMP_RET_TRACE 0x7ff00000U
SECCOMP_RET_ALLOW  macro  include/linux/seccomp.h  25  #define SECCOMP_RET_ALLOW 0x7fff0000U
SECCOMP_RET_ACTION  macro  include/linux/seccomp.h  28  #define SECCOMP_RET_ACTION 0x7fff0000U
SECCOMP_RET_DATA  macro  include/linux/seccomp.h  29  #define SECCOMP_RET_DATA 0x0000ffffU
seccomp_data  struct  include/linux/seccomp.h  40  struct seccomp_data { int nr; __u32 arch; __u64 instruction_pointer; __u64 args[6]; };
seccomp  struct  include/linux/seccomp.h  96  struct seccomp { };
__secure_computing  prototype  include/linux/seccomp.h  70  extern int __secure_computing(int);
secure_computing  function  include/linux/seccomp.h  99  static inline int secure_computing(int this_syscall) { return 0; }
secure_computing_strict  function  include/linux/seccomp.h  100  static inline void secure_computing_strict(int this_syscall) { return; }
prctl_get_seccomp  function  include/linux/seccomp.h  102  static inline long prctl_get_seccomp(void)
prctl_set_seccomp  function  include/linux/seccomp.h  107  static inline long prctl_set_seccomp(unsigned long arg2,char __user *arg3)
seccomp_mode  function  include/linux/seccomp.h  112  static inline int seccomp_mode(struct seccomp *s)
seccomp_filter  struct  include/linux/seccomp.h  97  struct seccomp_filter { };
put_seccomp_filter  function  include/linux/seccomp.h  123  static inline void put_seccomp_filter(struct task_struct *tsk)
get_seccomp_filter  function  include/linux/seccomp.h  127  static inline void get_seccomp_filter(struct task_struct *tsk)
seccomp_bpf_load  prototype  include/linux/seccomp.h  121  extern u32 seccomp_bpf_load(int off);
__LINUX_RCUPDATE_H  macro  include/linux/rcupdate.h  34  #define __LINUX_RCUPDATE_H
rcutorture_record_test_transition  function  include/linux/rcupdate.h  58  static inline void rcutorture_record_test_transition(void)
rcutorture_record_progress  function  include/linux/rcupdate.h  61  static inline void rcutorture_record_progress(unsigned long vernum)
do_trace_rcu_torture_read  macro  include/linux/rcupdate.h  68  #define do_trace_rcu_torture_read(rcutorturename,rhp) do { } while (0)
UINT_CMP_GE  macro  include/linux/rcupdate.h  72  #define UINT_CMP_GE(a,b) (UINT_MAX / 2 >= (a) - (b))
UINT_CMP_LT  macro  include/linux/rcupdate.h  73  #define UINT_CMP_LT(a,b) (UINT_MAX / 2 < (a) - (b))
ULONG_CMP_GE  macro  include/linux/rcupdate.h  74  #define ULONG_CMP_GE(a,b) (ULONG_MAX / 2 >= (a) - (b))
ULONG_CMP_LT  macro  include/linux/rcupdate.h  75  #define ULONG_CMP_LT(a,b) (ULONG_MAX / 2 < (a) - (b))
call_rcu  macro  include/linux/rcupdate.h  100  #define call_rcu call_rcu_sched
call_rcu_bh  prototype  include/linux/rcupdate.h  122  extern void call_rcu_bh(struct rcu_head *head,void (*func)(struct rcu_head *head));
call_rcu_sched  prototype  include/linux/rcupdate.h  141  extern void call_rcu_sched(struct rcu_head *head,void (*func)(struct rcu_head *rcu));
synchronize_sched  prototype  include/linux/rcupdate.h  144  extern void synchronize_sched(void);
__rcu_read_lock  function  include/linux/rcupdate.h  162  static inline void __rcu_read_lock(void)
__rcu_read_unlock  function  include/linux/rcupdate.h  167  static inline void __rcu_read_unlock(void)
synchronize_rcu  function  include/linux/rcupdate.h  172  static inline void synchronize_rcu(void)
rcu_preempt_depth  function  include/linux/rcupdate.h  177  static inline int rcu_preempt_depth(void)
rcu_sched_qs  prototype  include/linux/rcupdate.h  185  extern void rcu_sched_qs(int cpu);
rcu_bh_qs  prototype  include/linux/rcupdate.h  186  extern void rcu_bh_qs(int cpu);
rcu_check_callbacks  prototype  include/linux/rcupdate.h  187  extern void rcu_check_callbacks(int cpu,int user);
rcu_idle_enter  prototype  include/linux/rcupdate.h  189  extern void rcu_idle_enter(void);
rcu_idle_exit  prototype  include/linux/rcupdate.h  190  extern void rcu_idle_exit(void);
rcu_irq_enter  prototype  include/linux/rcupdate.h  191  extern void rcu_irq_enter(void);
rcu_irq_exit  prototype  include/linux/rcupdate.h  192  extern void rcu_irq_exit(void);
exit_rcu  prototype  include/linux/rcupdate.h  193  extern void exit_rcu(void);
RCU_NONIDLE  macro  include/linux/rcupdate.h  215  #define RCU_NONIDLE(a) do { rcu_idle_exit(); do { a; } while (0); rcu_idle_enter(); } while (0)
wait_rcu_gp  prototype  include/linux/rcupdate.h  229  void wait_rcu_gp(call_rcu_func_t crf);
init_rcu_head_on_stack  function  include/linux/rcupdate.h  249  static inline void init_rcu_head_on_stack(struct rcu_head *head)
destroy_rcu_head_on_stack  function  include/linux/rcupdate.h  253  static inline void destroy_rcu_head_on_stack(struct rcu_head *head)
rcu_lockdep_current_cpu_online  function  include/linux/rcupdate.h  261  static inline bool rcu_lockdep_current_cpu_online(void)
rcu_is_cpu_idle  function  include/linux/rcupdate.h  272  static inline int rcu_is_cpu_idle(void)
rcu_lock_acquire  macro  include/linux/rcupdate.h  385  # define rcu_lock_acquire(a) do { } while (0)
rcu_lock_release  macro  include/linux/rcupdate.h  386  # define rcu_lock_release(a) do { } while (0)
debug_lockdep_rcu_enabled  prototype  include/linux/rcupdate.h  291  extern int debug_lockdep_rcu_enabled(void);
rcu_read_lock_held  function  include/linux/rcupdate.h  388  static inline int rcu_read_lock_held(void)
rcu_read_lock_bh_held  function  include/linux/rcupdate.h  393  static inline int rcu_read_lock_bh_held(void)
rcu_read_lock_sched_held  function  include/linux/rcupdate.h  404  static inline int rcu_read_lock_sched_held(void)
rcu_my_thread_group_empty  prototype  include/linux/rcupdate.h  414  extern int rcu_my_thread_group_empty(void);
rcu_lockdep_assert  macro  include/linux/rcupdate.h  456  #define rcu_lockdep_assert(c,s) do { } while (0)
rcu_preempt_sleep_check  function  include/linux/rcupdate.h  438  static inline void rcu_preempt_sleep_check(void)
rcu_sleep_check  macro  include/linux/rcupdate.h  457  #define rcu_sleep_check() do { } while (0)
rcu_dereference_sparse  macro  include/linux/rcupdate.h  474  #define rcu_dereference_sparse(p,space)
__rcu_access_pointer  macro  include/linux/rcupdate.h  477  #define __rcu_access_pointer(p,space) ({ typeof(*p) *_________p1 = (typeof(*p)*__force )ACCESS_ONCE(p); rcu_dereference_sparse(p, space); ((typeof(*p) __force __kernel *)(_________p1)); })
__rcu_dereference_check  macro  include/linux/rcupdate.h  483  #define __rcu_dereference_check(p,c,space) ({ typeof(*p) *_________p1 = (typeof(*p)*__force )ACCESS_ONCE(p); rcu_lockdep_assert(c, "suspicious rcu_dereference_check()" " usage"); rcu_dereference_sparse(p, space); smp_read_barrier_depends(); ((typeof(*p) __force __kernel *)(_________p1)); })
__rcu_dereference_protected  macro  include/linux/rcupdate.h  492  #define __rcu_dereference_protected(p,c,space) ({ rcu_lockdep_assert(c, "suspicious rcu_dereference_protected()" " usage"); rcu_dereference_sparse(p, space); ((typeof(*p) __force __kernel *)(p)); })
__rcu_access_index  macro  include/linux/rcupdate.h  500  #define __rcu_access_index(p,space) ({ typeof(p) _________p1 = ACCESS_ONCE(p); rcu_dereference_sparse(p, space); (_________p1); })
__rcu_dereference_index_check  macro  include/linux/rcupdate.h  506  #define __rcu_dereference_index_check(p,c) ({ typeof(p) _________p1 = ACCESS_ONCE(p); rcu_lockdep_assert(c, "suspicious rcu_dereference_index_check()" " usage"); smp_read_barrier_depends(); (_________p1); })
__rcu_assign_pointer  macro  include/linux/rcupdate.h  515  #define __rcu_assign_pointer(p,v,space) ({ smp_wmb(); (p) = (typeof(*v) __force space *)(v); })
rcu_access_pointer  macro  include/linux/rcupdate.h  541  #define rcu_access_pointer(p) __rcu_access_pointer((p),__rcu)
rcu_dereference_check  macro  include/linux/rcupdate.h  576  #define rcu_dereference_check(p,c) __rcu_dereference_check((p), rcu_read_lock_held() || (c), __rcu)
rcu_dereference_bh_check  macro  include/linux/rcupdate.h  586  #define rcu_dereference_bh_check(p,c) __rcu_dereference_check((p), rcu_read_lock_bh_held() || (c), __rcu)
rcu_dereference_sched_check  macro  include/linux/rcupdate.h  596  #define rcu_dereference_sched_check(p,c) __rcu_dereference_check((p), rcu_read_lock_sched_held() || (c), __rcu)
rcu_dereference_raw  macro  include/linux/rcupdate.h  600  #define rcu_dereference_raw(p) rcu_dereference_check(p,1)
rcu_access_index  macro  include/linux/rcupdate.h  614  #define rcu_access_index(p) __rcu_access_index((p),__rcu)
rcu_dereference_index_check  macro  include/linux/rcupdate.h  634  #define rcu_dereference_index_check(p,c) __rcu_dereference_index_check((p), (c))
rcu_dereference_protected  macro  include/linux/rcupdate.h  654  #define rcu_dereference_protected(p,c) __rcu_dereference_protected((p), (c), __rcu)
rcu_dereference  macro  include/linux/rcupdate.h  664  #define rcu_dereference(p) rcu_dereference_check(p,0)
rcu_dereference_bh  macro  include/linux/rcupdate.h  672  #define rcu_dereference_bh(p) rcu_dereference_bh_check(p,0)
rcu_dereference_sched  macro  include/linux/rcupdate.h  680  #define rcu_dereference_sched(p) rcu_dereference_sched_check(p,0)
rcu_read_lock  function  include/linux/rcupdate.h  724  static inline void rcu_read_lock(void)
rcu_read_unlock  function  include/linux/rcupdate.h  748  static inline void rcu_read_unlock(void)
rcu_read_lock_bh  function  include/linux/rcupdate.h  774  static inline void rcu_read_lock_bh(void)
rcu_read_unlock_bh  function  include/linux/rcupdate.h  788  static inline void rcu_read_unlock_bh(void)
rcu_read_lock_sched  function  include/linux/rcupdate.h  810  static inline void rcu_read_lock_sched(void)
rcu_read_lock_sched_notrace  function  include/linux/rcupdate.h  820  static inline notrace void rcu_read_lock_sched_notrace(void)
rcu_read_unlock_sched  function  include/linux/rcupdate.h  831  static inline void rcu_read_unlock_sched(void)
rcu_read_unlock_sched_notrace  function  include/linux/rcupdate.h  841  static inline notrace void rcu_read_unlock_sched_notrace(void)
rcu_assign_pointer  macro  include/linux/rcupdate.h  870  #define rcu_assign_pointer(p,v) __rcu_assign_pointer((p), (v), __rcu)
RCU_INIT_POINTER  macro  include/linux/rcupdate.h  905  #define RCU_INIT_POINTER(p,v) p = (typeof(*v) __force __rcu *)(v)
__is_kfree_rcu_offset  macro  include/linux/rcupdate.h  930  #define __is_kfree_rcu_offset(offset) ((offset) < 4096)
__kfree_rcu  macro  include/linux/rcupdate.h  935  #define __kfree_rcu(head,offset) do { BUILD_BUG_ON(!__is_kfree_rcu_offset(offset)); call_rcu(head, (void (*)(struct rcu_head *))(unsigned long)(offset)); } while (0)
kfree_rcu  macro  include/linux/rcupdate.h  967  #define kfree_rcu(ptr,rcu_head) __kfree_rcu(&((ptr)->rcu_head), offsetof(typeof(*(ptr)), rcu_head))
_LINUX_RCULIST_H  macro  include/linux/rculist.h  2  #define _LINUX_RCULIST_H
list_next_rcu  macro  include/linux/rculist.h  25  #define list_next_rcu(list) (*((struct list_head __rcu **)(&(list)->next)))
__list_add_rcu  prototype  include/linux/rculist.h  43  extern void __list_add_rcu(struct list_head *new,struct list_head *prev, struct list_head *next);
list_add_rcu  function  include/linux/rculist.h  63  static inline void list_add_rcu(struct list_head *new,struct list_head *head)
list_add_tail_rcu  function  include/linux/rculist.h  84  static inline void list_add_tail_rcu(struct list_head *new,struct list_head *head)
list_del_rcu  function  include/linux/rculist.h  114  static inline void list_del_rcu(struct list_head *entry)
hlist_del_init_rcu  function  include/linux/rculist.h  140  static inline void hlist_del_init_rcu(struct hlist_node *n)
list_replace_rcu  function  include/linux/rculist.h  156  static inline void list_replace_rcu(struct list_head *old,struct list_head *new)
list_splice_init_rcu  function  include/linux/rculist.h  183  static inline void list_splice_init_rcu(struct list_head *list,struct list_head *head,void (*sync)(void))
list_entry_rcu  macro  include/linux/rculist.h  230  #define list_entry_rcu(ptr,type,member) ({typeof (*ptr) __rcu *__ptr = (typeof (*ptr) __rcu __force *)ptr; container_of((typeof(ptr))rcu_dereference_raw(__ptr), type, member); })
list_first_or_null_rcu  macro  include/linux/rculist.h  268  #define list_first_or_null_rcu(ptr,type,member) ({struct list_head *__ptr = (ptr); struct list_head __rcu *__next = list_next_rcu(__ptr); likely(__ptr != __next) ? container_of(__next, type, member) : NULL; })
list_for_each_entry_rcu  macro  include/linux/rculist.h  284  #define list_for_each_entry_rcu(pos,head,member) for (pos = list_entry_rcu((head)->next, typeof(*pos), member); &pos->member != (head); pos = list_entry_rcu(pos->member.next, typeof(*pos), member))
list_for_each_continue_rcu  macro  include/linux/rculist.h  301  #define list_for_each_continue_rcu(pos,head) for ((pos) = rcu_dereference_raw(list_next_rcu(pos)); (pos) != (head); (pos) = rcu_dereference_raw(list_next_rcu(pos)))
list_for_each_entry_continue_rcu  macro  include/linux/rculist.h  315  #define list_for_each_entry_continue_rcu(pos,head,member) for (pos = list_entry_rcu(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = list_entry_rcu(pos->member.next, typeof(*pos), member))
hlist_del_rcu  function  include/linux/rculist.h  339  static inline void hlist_del_rcu(struct hlist_node *n)
hlist_replace_rcu  function  include/linux/rculist.h  352  static inline void hlist_replace_rcu(struct hlist_node *old,struct hlist_node *new)
hlist_first_rcu  macro  include/linux/rculist.h  368  #define hlist_first_rcu(head) (*((struct hlist_node __rcu **)(&(head)->first)))
hlist_next_rcu  macro  include/linux/rculist.h  369  #define hlist_next_rcu(node) (*((struct hlist_node __rcu **)(&(node)->next)))
hlist_pprev_rcu  macro  include/linux/rculist.h  370  #define hlist_pprev_rcu(node) (*((struct hlist_node __rcu **)((node)->pprev)))
hlist_add_head_rcu  function  include/linux/rculist.h  391  static inline void hlist_add_head_rcu(struct hlist_node *n,struct hlist_head *h)
hlist_add_before_rcu  function  include/linux/rculist.h  421  static inline void hlist_add_before_rcu(struct hlist_node *n,struct hlist_node *next)
hlist_add_after_rcu  function  include/linux/rculist.h  448  static inline void hlist_add_after_rcu(struct hlist_node *prev,struct hlist_node *n)
__hlist_for_each_rcu  macro  include/linux/rculist.h  458  #define __hlist_for_each_rcu(pos,head) for (pos = rcu_dereference(hlist_first_rcu(head)); pos; pos = rcu_dereference(hlist_next_rcu(pos)))
hlist_for_each_entry_rcu  macro  include/linux/rculist.h  474  #define hlist_for_each_entry_rcu(tpos,pos,head,member) for (pos = rcu_dereference_raw(hlist_first_rcu(head)); pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); pos = rcu_dereference_raw(hlist_next_rcu(pos)))
hlist_for_each_entry_rcu_bh  macro  include/linux/rculist.h  491  #define hlist_for_each_entry_rcu_bh(tpos,pos,head,member) for (pos = rcu_dereference_bh((head)->first); pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); pos = rcu_dereference_bh(pos->next))
hlist_for_each_entry_continue_rcu  macro  include/linux/rculist.h  503  #define hlist_for_each_entry_continue_rcu(tpos,pos,member) for (pos = rcu_dereference((pos)->next); pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); pos = rcu_dereference(pos->next))
hlist_for_each_entry_continue_rcu_bh  macro  include/linux/rculist.h  515  #define hlist_for_each_entry_continue_rcu_bh(tpos,pos,member) for (pos = rcu_dereference_bh((pos)->next); pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); pos = rcu_dereference_bh(pos->next))
__LINUX_RT_MUTEX_H  macro  include/linux/rtmutex.h  13  #define __LINUX_RT_MUTEX_H
rt_mutex  struct  include/linux/rtmutex.h  28  struct rt_mutex { raw_spinlock_t wait_lock; struct plist_head wait_list; struct task_struct *owner; int save_state; const char *name, *file; int line; void *magic; };
rt_mutex_debug_check_no_locks_freed  function  include/linux/rtmutex.h  48  static inline int rt_mutex_debug_check_no_locks_freed(const void *from,unsigned long len)
rt_mutex_debug_check_no_locks_held  macro  include/linux/rtmutex.h  53  # define rt_mutex_debug_check_no_locks_held(task) do { } while (0)
__DEBUG_RT_MUTEX_INITIALIZER  macro  include/linux/rtmutex.h  62  # define __DEBUG_RT_MUTEX_INITIALIZER(mutexname)
rt_mutex_init  macro  include/linux/rtmutex.h  63  # define rt_mutex_init(mutex) __rt_mutex_init(mutex,NULL)
rt_mutex_debug_task_free  macro  include/linux/rtmutex.h  64  # define rt_mutex_debug_task_free(t) do { } while (0)
__RT_MUTEX_INITIALIZER  macro  include/linux/rtmutex.h  67  #define __RT_MUTEX_INITIALIZER(mutexname) { .wait_lock = __RAW_SPIN_LOCK_UNLOCKED(mutexname.wait_lock) , .wait_list = PLIST_HEAD_INIT(mutexname.wait_list) , .owner = NULL __DEBUG_RT_MUTEX_INITIALIZER(mutexname)}
DEFINE_RT_MUTEX  macro  include/linux/rtmutex.h  73  #define DEFINE_RT_MUTEX(mutexname) struct rt_mutex mutexname = __RT_MUTEX_INITIALIZER(mutexname)
rt_mutex_is_locked  function  include/linux/rtmutex.h  82  static inline int rt_mutex_is_locked(struct rt_mutex *lock)
__rt_mutex_init  prototype  include/linux/rtmutex.h  87  extern void __rt_mutex_init(struct rt_mutex *lock,const char *name);
rt_mutex_destroy  prototype  include/linux/rtmutex.h  88  extern void rt_mutex_destroy(struct rt_mutex *lock);
rt_mutex_lock  prototype  include/linux/rtmutex.h  90  extern void rt_mutex_lock(struct rt_mutex *lock);
rt_mutex_lock_interruptible  prototype  include/linux/rtmutex.h  91  extern int rt_mutex_lock_interruptible(struct rt_mutex *lock,int detect_deadlock);
rt_mutex_timed_lock  prototype  include/linux/rtmutex.h  93  extern int rt_mutex_timed_lock(struct rt_mutex *lock,struct hrtimer_sleeper *timeout,int detect_deadlock);
rt_mutex_trylock  prototype  include/linux/rtmutex.h  97  extern int rt_mutex_trylock(struct rt_mutex *lock);
rt_mutex_unlock  prototype  include/linux/rtmutex.h  99  extern void rt_mutex_unlock(struct rt_mutex *lock);
INIT_RT_MUTEXES  macro  include/linux/rtmutex.h  106  # define INIT_RT_MUTEXES(tsk)
_LINUX_TIME_H  macro  include/linux/time.h  2  #define _LINUX_TIME_H
_STRUCT_TIMESPEC  macro  include/linux/time.h  13  #define _STRUCT_TIMESPEC
timespec  struct  include/linux/time.h  14  struct timespec { __kernel_time_t tv_sec; long tv_nsec; };
timeval  struct  include/linux/time.h  20  struct timeval { __kernel_time_t tv_sec; __kernel_suseconds_t tv_usec; };
timezone  struct  include/linux/time.h  25  struct timezone { int tz_minuteswest; int tz_dsttime; };
MSEC_PER_SEC  macro  include/linux/time.h  35  #define MSEC_PER_SEC 1000L
USEC_PER_MSEC  macro  include/linux/time.h  36  #define USEC_PER_MSEC 1000L
NSEC_PER_USEC  macro  include/linux/time.h  37  #define NSEC_PER_USEC 1000L
NSEC_PER_MSEC  macro  include/linux/time.h  38  #define NSEC_PER_MSEC 1000000L
USEC_PER_SEC  macro  include/linux/time.h  39  #define USEC_PER_SEC 1000000L
NSEC_PER_SEC  macro  include/linux/time.h  40  #define NSEC_PER_SEC 1000000000L
FSEC_PER_SEC  macro  include/linux/time.h  41  #define FSEC_PER_SEC 1000000000000000LL
TIME_T_MAX  macro  include/linux/time.h  43  #define TIME_T_MAX (time_t)((1UL << ((sizeof(time_t) << 3) - 1)) - 1)
timespec_equal  function  include/linux/time.h  45  static inline int timespec_equal(const struct timespec *a,const struct timespec *b)
timespec_compare  function  include/linux/time.h  56  static inline int timespec_compare(const struct timespec *lhs,const struct timespec *rhs)
timeval_compare  function  include/linux/time.h  65  static inline int timeval_compare(const struct timeval *lhs,const struct timeval *rhs)
mktime  prototype  include/linux/time.h  74  extern unsigned long mktime(const unsigned int year,const unsigned int mon,const unsigned int day, const unsigned int hour,const unsigned int min, const unsigned int sec);
set_normalized_timespec  prototype  include/linux/time.h  78  extern void set_normalized_timespec(struct timespec *ts,time_t sec,s64 nsec);
timespec_add_safe  prototype  include/linux/time.h  85  extern struct timespec timespec_add_safe(const struct timespec lhs,const struct timespec rhs);
timespec_add  function  include/linux/time.h  89  static inline struct timespec timespec_add(struct timespec lhs,struct timespec rhs)
timespec_sub  function  include/linux/time.h  101  static inline struct timespec timespec_sub(struct timespec lhs,struct timespec rhs)
KTIME_MAX  macro  include/linux/time.h  110  #define KTIME_MAX ((s64)~((u64)1 << 63))
KTIME_SEC_MAX  macro  include/linux/time.h  114  # define KTIME_SEC_MAX LONG_MAX
timespec_valid  function  include/linux/time.h  120  static inline bool timespec_valid(const struct timespec *ts)
timespec_valid_strict  function  include/linux/time.h  131  static inline bool timespec_valid_strict(const struct timespec *ts)
read_persistent_clock  prototype  include/linux/time.h  141  extern void read_persistent_clock(struct timespec *ts);
read_boot_clock  prototype  include/linux/time.h  142  extern void read_boot_clock(struct timespec *ts);
update_persistent_clock  prototype  include/linux/time.h  143  extern int update_persistent_clock(struct timespec now);
timekeeping_init  prototype  include/linux/time.h  144  void timekeeping_init(void);
get_seconds  prototype  include/linux/time.h  147  unsigned long get_seconds(void);
current_kernel_time  prototype  include/linux/time.h  148  struct timespec current_kernel_time(void);
__current_kernel_time  prototype  include/linux/time.h  149  struct timespec __current_kernel_time(void);
get_monotonic_coarse  prototype  include/linux/time.h  150  struct timespec get_monotonic_coarse(void);
get_xtime_and_monotonic_and_sleep_offset  prototype  include/linux/time.h  151  void get_xtime_and_monotonic_and_sleep_offset(struct timespec *xtim,struct timespec *wtom, struct timespec *sleep);
timekeeping_inject_sleeptime  prototype  include/linux/time.h  153  void timekeeping_inject_sleeptime(struct timespec *delta);
CURRENT_TIME  macro  include/linux/time.h  155  #define CURRENT_TIME (current_kernel_time())
CURRENT_TIME_SEC  macro  include/linux/time.h  156  #define CURRENT_TIME_SEC ((struct timespec) { get_seconds(),0 })
arch_gettimeoffset  function  include/linux/time.h  170  static inline u32 arch_gettimeoffset(void) { return 0; }
do_gettimeofday  prototype  include/linux/time.h  173  extern void do_gettimeofday(struct timeval *tv);
do_settimeofday  prototype  include/linux/time.h  174  extern int do_settimeofday(const struct timespec *tv);
do_sys_settimeofday  prototype  include/linux/time.h  175  extern int do_sys_settimeofday(const struct timespec *tv,const struct timezone *tz);
do_posix_clock_monotonic_gettime  macro  include/linux/time.h  177  #define do_posix_clock_monotonic_gettime(ts) ktime_get_ts(ts)
do_utimes  prototype  include/linux/time.h  178  extern long do_utimes(int dfd,const char __user *filename,struct timespec *times,int flags);
do_setitimer  prototype  include/linux/time.h  180  extern int do_setitimer(int which,struct itimerval *value,struct itimerval *ovalue);
alarm_setitimer  prototype  include/linux/time.h  182  extern unsigned int alarm_setitimer(unsigned int seconds);
do_getitimer  prototype  include/linux/time.h  183  extern int do_getitimer(int which,struct itimerval *value);
getnstimeofday  prototype  include/linux/time.h  184  extern void getnstimeofday(struct timespec *tv);
getrawmonotonic  prototype  include/linux/time.h  185  extern void getrawmonotonic(struct timespec *ts);
getnstime_raw_and_real  prototype  include/linux/time.h  186  extern void getnstime_raw_and_real(struct timespec *ts_raw,struct timespec *ts_real);
getboottime  prototype  include/linux/time.h  188  extern void getboottime(struct timespec *ts);
monotonic_to_bootbased  prototype  include/linux/time.h  189  extern void monotonic_to_bootbased(struct timespec *ts);
get_monotonic_boottime  prototype  include/linux/time.h  190  extern void get_monotonic_boottime(struct timespec *ts);
timespec_trunc  prototype  include/linux/time.h  192  extern struct timespec timespec_trunc(struct timespec t,unsigned gran);
timekeeping_valid_for_hres  prototype  include/linux/time.h  193  extern int timekeeping_valid_for_hres(void);
timekeeping_max_deferment  prototype  include/linux/time.h  194  extern u64 timekeeping_max_deferment(void);
timekeeping_inject_offset  prototype  include/linux/time.h  195  extern int timekeeping_inject_offset(struct timespec *ts);
do_sys_times  prototype  include/linux/time.h  198  extern void do_sys_times(struct tms *);
tm  struct  include/linux/time.h  204  struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; long tm_year; int tm_wday; int tm_yday; };
time_to_tm  prototype  include/linux/time.h  226  void time_to_tm(time_t totalsecs,int offset,struct tm *result);
timespec_to_ns  function  include/linux/time.h  235  static inline s64 timespec_to_ns(const struct timespec *ts)
timeval_to_ns  function  include/linux/time.h  247  static inline s64 timeval_to_ns(const struct timeval *tv)
ns_to_timespec  prototype  include/linux/time.h  259  extern struct timespec ns_to_timespec(const s64 nsec);
ns_to_timeval  prototype  include/linux/time.h  267  extern struct timeval ns_to_timeval(const s64 nsec);
timespec_add_ns  function  include/linux/time.h  277  static __always_inline void timespec_add_ns(struct timespec *a,u64 ns)
ITIMER_REAL  macro  include/linux/time.h  289  #define ITIMER_REAL 0
ITIMER_VIRTUAL  macro  include/linux/time.h  290  #define ITIMER_VIRTUAL 1
ITIMER_PROF  macro  include/linux/time.h  291  #define ITIMER_PROF 2
itimerspec  struct  include/linux/time.h  293  struct itimerspec { struct timespec it_interval; struct timespec it_value; };
itimerval  struct  include/linux/time.h  298  struct itimerval { struct timeval it_interval; struct timeval it_value; };
CLOCK_REALTIME  macro  include/linux/time.h  306  #define CLOCK_REALTIME 0
CLOCK_MONOTONIC  macro  include/linux/time.h  307  #define CLOCK_MONOTONIC 1
CLOCK_PROCESS_CPUTIME_ID  macro  include/linux/time.h  308  #define CLOCK_PROCESS_CPUTIME_ID 2
CLOCK_THREAD_CPUTIME_ID  macro  include/linux/time.h  309  #define CLOCK_THREAD_CPUTIME_ID 3
CLOCK_MONOTONIC_RAW  macro  include/linux/time.h  310  #define CLOCK_MONOTONIC_RAW 4
CLOCK_REALTIME_COARSE  macro  include/linux/time.h  311  #define CLOCK_REALTIME_COARSE 5
CLOCK_MONOTONIC_COARSE  macro  include/linux/time.h  312  #define CLOCK_MONOTONIC_COARSE 6
CLOCK_BOOTTIME  macro  include/linux/time.h  313  #define CLOCK_BOOTTIME 7
CLOCK_REALTIME_ALARM  macro  include/linux/time.h  314  #define CLOCK_REALTIME_ALARM 8
CLOCK_BOOTTIME_ALARM  macro  include/linux/time.h  315  #define CLOCK_BOOTTIME_ALARM 9
CLOCK_SGI_CYCLE  macro  include/linux/time.h  320  #define CLOCK_SGI_CYCLE 10
MAX_CLOCKS  macro  include/linux/time.h  321  #define MAX_CLOCKS 16
CLOCKS_MASK  macro  include/linux/time.h  322  #define CLOCKS_MASK (CLOCK_REALTIME | CLOCK_MONOTONIC)
CLOCKS_MONO  macro  include/linux/time.h  323  #define CLOCKS_MONO CLOCK_MONOTONIC
TIMER_ABSTIME  macro  include/linux/time.h  328  #define TIMER_ABSTIME 0x01
_LINUX_PARAM_H  macro  include/linux/param.h  2  #define _LINUX_PARAM_H
_LINUX_RESOURCE_H  macro  include/linux/resource.h  2  #define _LINUX_RESOURCE_H
RUSAGE_SELF  macro  include/linux/resource.h  18  #define RUSAGE_SELF 0
RUSAGE_CHILDREN  macro  include/linux/resource.h  19  #define RUSAGE_CHILDREN (-1)
RUSAGE_BOTH  macro  include/linux/resource.h  20  #define RUSAGE_BOTH (-2)
RUSAGE_THREAD  macro  include/linux/resource.h  21  #define RUSAGE_THREAD 1
rusage  struct  include/linux/resource.h  23  struct rusage { struct timeval ru_utime; struct timeval ru_stime; long ru_maxrss; long ru_ixrss; long ru_idrss; long ru_isrss; long ru_minflt; long ru_majflt; long ru_nswap; long ru_inblock; long ru_oublock; long ru_msgsnd; long ru_msgrcv; long ru_nsignals; long ru_nvcsw; long ru_nivcsw; };
RLIM64_INFINITY  macro  include/linux/resource.h  47  #define RLIM64_INFINITY (~0ULL)
rlimit64  struct  include/linux/resource.h  49  struct rlimit64 { __u64 rlim_cur; __u64 rlim_max; };
PRIO_MIN  macro  include/linux/resource.h  54  #define PRIO_MIN (-20)
PRIO_MAX  macro  include/linux/resource.h  55  #define PRIO_MAX 20
PRIO_PROCESS  macro  include/linux/resource.h  57  #define PRIO_PROCESS 0
PRIO_PGRP  macro  include/linux/resource.h  58  #define PRIO_PGRP 1
PRIO_USER  macro  include/linux/resource.h  59  #define PRIO_USER 2
_STK_LIM  macro  include/linux/resource.h  65  #define _STK_LIM (8*1024*1024)
MLOCK_LIMIT  macro  include/linux/resource.h  71  #define MLOCK_LIMIT ((PAGE_SIZE > 64*1024) ? PAGE_SIZE : 64*1024)
getrusage  prototype  include/linux/resource.h  83  int getrusage(struct task_struct *p,int who,struct rusage __user *ru);
do_prlimit  prototype  include/linux/resource.h  84  int do_prlimit(struct task_struct *tsk,unsigned int resource,struct rlimit *new_rlim, struct rlimit *old_rlim);
_LINUX_TIMER_H  macro  include/linux/timer.h  2  #define _LINUX_TIMER_H
timer_list  struct  include/linux/timer.h  12  struct timer_list { struct list_head entry; unsigned long expires; struct tvec_base *base; void (*function)(unsigned long); unsigned long data; int slack; int start_pid; void *start_site; char start_comm[16]; struct lockdep_map lockdep_map; };
__TIMER_LOCKDEP_MAP_INITIALIZER  macro  include/linux/timer.h  48  #define __TIMER_LOCKDEP_MAP_INITIALIZER(_kn)
TBASE_DEFERRABLE_FLAG  macro  include/linux/timer.h  61  #define TBASE_DEFERRABLE_FLAG (0x1)
TIMER_INITIALIZER  macro  include/linux/timer.h  63  #define TIMER_INITIALIZER(_function,_expires,_data) { .entry = { .prev = TIMER_ENTRY_STATIC }, .function = (_function), .expires = (_expires), .data = (_data), .base = &boot_tvec_bases, .slack = -1, __TIMER_LOCKDEP_MAP_INITIALIZER( __FILE__ ":" __stringify(__LINE__)) }
TBASE_MAKE_DEFERRED  macro  include/linux/timer.h  74  #define TBASE_MAKE_DEFERRED(ptr) ((struct tvec_base *) ((unsigned char *)(ptr) + TBASE_DEFERRABLE_FLAG))
TIMER_DEFERRED_INITIALIZER  macro  include/linux/timer.h  77  #define TIMER_DEFERRED_INITIALIZER(_function,_expires,_data) { .entry = { .prev = TIMER_ENTRY_STATIC }, .function = (_function), .expires = (_expires), .data = (_data), .base = TBASE_MAKE_DEFERRED(&boot_tvec_bases), __TIMER_LOCKDEP_MAP_INITIALIZER( __FILE__ ":" __stringify(__LINE__)) }
DEFINE_TIMER  macro  include/linux/timer.h  87  #define DEFINE_TIMER(_name,_function,_expires,_data) struct timer_list _name = TIMER_INITIALIZER(_function, _expires, _data)
init_timer_key  prototype  include/linux/timer.h  91  void init_timer_key(struct timer_list *timer,const char *name,struct lock_class_key *key);
init_timer_deferrable_key  prototype  include/linux/timer.h  94  void init_timer_deferrable_key(struct timer_list *timer,const char *name,struct lock_class_key *key);
init_timer  macro  include/linux/timer.h  137  #define init_timer(timer) init_timer_key((timer), NULL, NULL)
init_timer_deferrable  macro  include/linux/timer.h  139  #define init_timer_deferrable(timer) init_timer_deferrable_key((timer), NULL, NULL)
init_timer_on_stack  macro  include/linux/timer.h  141  #define init_timer_on_stack(timer) init_timer_on_stack_key((timer), NULL, NULL)
setup_timer  macro  include/linux/timer.h  143  #define setup_timer(timer,fn,data) setup_timer_key((timer), NULL, NULL, (fn), (data))
setup_timer_on_stack  macro  include/linux/timer.h  145  #define setup_timer_on_stack(timer,fn,data) setup_timer_on_stack_key((timer), NULL, NULL, (fn), (data))
setup_deferrable_timer_on_stack  macro  include/linux/timer.h  147  #define setup_deferrable_timer_on_stack(timer,fn,data) setup_deferrable_timer_on_stack_key((timer), NULL, NULL, (fn), (data))
init_timer_on_stack_key  function  include/linux/timer.h  158  static inline void init_timer_on_stack_key(struct timer_list *timer,const char *name,struct lock_class_key *key)
destroy_timer_on_stack  function  include/linux/timer.h  157  static inline void destroy_timer_on_stack(struct timer_list *timer) { }
setup_timer_key  function  include/linux/timer.h  166  static inline void setup_timer_key(struct timer_list * timer,const char *name,struct lock_class_key *key,void (*function)(unsigned long),unsigned long data)
setup_timer_on_stack_key  function  include/linux/timer.h  177  static inline void setup_timer_on_stack_key(struct timer_list *timer,const char *name,struct lock_class_key *key,void (*function)(unsigned long),unsigned long data)
setup_deferrable_timer_on_stack_key  prototype  include/linux/timer.h  188  extern void setup_deferrable_timer_on_stack_key(struct timer_list *timer,const char *name,struct lock_class_key *key,void (*function)(unsigned long),unsigned long data);
timer_pending  function  include/linux/timer.h  204  static inline int timer_pending(const struct timer_list * timer)
add_timer_on  prototype  include/linux/timer.h  209  extern void add_timer_on(struct timer_list *timer,int cpu);
del_timer  prototype  include/linux/timer.h  210  extern int del_timer(struct timer_list * timer);
mod_timer  prototype  include/linux/timer.h  211  extern int mod_timer(struct timer_list *timer,unsigned long expires);
mod_timer_pending  prototype  include/linux/timer.h  212  extern int mod_timer_pending(struct timer_list *timer,unsigned long expires);
mod_timer_pinned  prototype  include/linux/timer.h  213  extern int mod_timer_pinned(struct timer_list *timer,unsigned long expires);
set_timer_slack  prototype  include/linux/timer.h  215  extern void set_timer_slack(struct timer_list *time,int slack_hz);
TIMER_NOT_PINNED  macro  include/linux/timer.h  217  #define TIMER_NOT_PINNED 0
TIMER_PINNED  macro  include/linux/timer.h  218  #define TIMER_PINNED 1
NEXT_TIMER_MAX_DELTA  macro  include/linux/timer.h  223  #define NEXT_TIMER_MAX_DELTA ((1UL << 30) - 1)
get_next_timer_interrupt  prototype  include/linux/timer.h  230  extern unsigned long get_next_timer_interrupt(unsigned long now);
TIMER_STATS_FLAG_DEFERRABLE  macro  include/linux/timer.h  239  #define TIMER_STATS_FLAG_DEFERRABLE 0x1
init_timer_stats  function  include/linux/timer.h  262  static inline void init_timer_stats(void)
timer_stats_update_stats  prototype  include/linux/timer.h  243  extern void timer_stats_update_stats(void *timer,pid_t pid,void *startf,void *timerf, char *comm,unsigned int timer_flag);
__timer_stats_timer_set_start_info  prototype  include/linux/timer.h  247  extern void __timer_stats_timer_set_start_info(struct timer_list *timer,void *addr);
timer_stats_timer_set_start_info  function  include/linux/timer.h  266  static inline void timer_stats_timer_set_start_info(struct timer_list *timer)
timer_stats_timer_clear_start_info  function  include/linux/timer.h  270  static inline void timer_stats_timer_clear_start_info(struct timer_list *timer)
add_timer  prototype  include/linux/timer.h  275  extern void add_timer(struct timer_list *timer);
try_to_del_timer_sync  prototype  include/linux/timer.h  277  extern int try_to_del_timer_sync(struct timer_list *timer);
del_timer_sync  macro  include/linux/timer.h  282  # define del_timer_sync(t) del_timer(t)
del_singleshot_timer_sync  macro  include/linux/timer.h  285  #define del_singleshot_timer_sync(t) del_timer_sync(t)
init_timers  prototype  include/linux/timer.h  287  extern void init_timers(void);
run_local_timers  prototype  include/linux/timer.h  288  extern void run_local_timers(void);
it_real_fn  prototype  include/linux/timer.h  290  extern enum hrtimer_restart it_real_fn(struct hrtimer *);
__round_jiffies  prototype  include/linux/timer.h  292  unsigned long __round_jiffies(unsigned long j,int cpu);
__round_jiffies_relative  prototype  include/linux/timer.h  293  unsigned long __round_jiffies_relative(unsigned long j,int cpu);
round_jiffies  prototype  include/linux/timer.h  294  unsigned long round_jiffies(unsigned long j);
round_jiffies_relative  prototype  include/linux/timer.h  295  unsigned long round_jiffies_relative(unsigned long j);
__round_jiffies_up  prototype  include/linux/timer.h  297  unsigned long __round_jiffies_up(unsigned long j,int cpu);
__round_jiffies_up_relative  prototype  include/linux/timer.h  298  unsigned long __round_jiffies_up_relative(unsigned long j,int cpu);
round_jiffies_up  prototype  include/linux/timer.h  299  unsigned long round_jiffies_up(unsigned long j);
round_jiffies_up_relative  prototype  include/linux/timer.h  300  unsigned long round_jiffies_up_relative(unsigned long j);
_LINUX_HRTIMER_H  macro  include/linux/hrtimer.h  16  #define _LINUX_HRTIMER_H
hrtimer_mode  enum  include/linux/hrtimer.h  33  enum hrtimer_mode { HRTIMER_MODE_ABS = 0x0, HRTIMER_MODE_REL = 0x1, HRTIMER_MODE_PINNED = 0x02, HRTIMER_MODE_ABS_PINNED = 0x02, HRTIMER_MODE_REL_PINNED = 0x03, };
hrtimer_restart  function  include/linux/hrtimer.h  380  static inline int hrtimer_restart(struct hrtimer *timer)
HRTIMER_STATE_INACTIVE  macro  include/linux/hrtimer.h  80  #define HRTIMER_STATE_INACTIVE 0x00
HRTIMER_STATE_ENQUEUED  macro  include/linux/hrtimer.h  81  #define HRTIMER_STATE_ENQUEUED 0x01
HRTIMER_STATE_CALLBACK  macro  include/linux/hrtimer.h  82  #define HRTIMER_STATE_CALLBACK 0x02
HRTIMER_STATE_MIGRATE  macro  include/linux/hrtimer.h  83  #define HRTIMER_STATE_MIGRATE 0x04
hrtimer  struct  include/linux/hrtimer.h  108  struct hrtimer { struct timerqueue_node node; ktime_t _softexpires; enum hrtimer_restart (*function)(struct hrtimer *); struct hrtimer_clock_base *base; unsigned long state; int start_pid; void *start_site; char start_comm[16]; };
hrtimer_sleeper  struct  include/linux/hrtimer.h  128  struct hrtimer_sleeper { struct hrtimer timer; struct task_struct *task; };
hrtimer_clock_base  struct  include/linux/hrtimer.h  145  struct hrtimer_clock_base { struct hrtimer_cpu_base *cpu_base; int index; clockid_t clockid; struct timerqueue_head active; ktime_t resolution; ktime_t (*get_time)(void); ktime_t softirq_time; ktime_t offset; };
hrtimer_base_type  enum  include/linux/hrtimer.h  156  enum hrtimer_base_type { HRTIMER_BASE_MONOTONIC, HRTIMER_BASE_REALTIME, HRTIMER_BASE_BOOTTIME, HRTIMER_MAX_CLOCK_BASES, };
hrtimer_cpu_base  struct  include/linux/hrtimer.h  179  struct hrtimer_cpu_base { raw_spinlock_t lock; unsigned int active_bases; unsigned int clock_was_set; ktime_t expires_next; int hres_active; int hang_detected; unsigned long nr_events; unsigned long nr_retries; unsigned long nr_hangs; ktime_t max_hang_time; struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES]; };
hrtimer_set_expires  function  include/linux/hrtimer.h  195  static inline void hrtimer_set_expires(struct hrtimer *timer,ktime_t time)
hrtimer_set_expires_range  function  include/linux/hrtimer.h  201  static inline void hrtimer_set_expires_range(struct hrtimer *timer,ktime_t time,ktime_t delta)
hrtimer_set_expires_range_ns  function  include/linux/hrtimer.h  207  static inline void hrtimer_set_expires_range_ns(struct hrtimer *timer,ktime_t time,unsigned long delta)
hrtimer_set_expires_tv64  function  include/linux/hrtimer.h  213  static inline void hrtimer_set_expires_tv64(struct hrtimer *timer,s64 tv64)
hrtimer_add_expires  function  include/linux/hrtimer.h  219  static inline void hrtimer_add_expires(struct hrtimer *timer,ktime_t time)
hrtimer_add_expires_ns  function  include/linux/hrtimer.h  225  static inline void hrtimer_add_expires_ns(struct hrtimer *timer,u64 ns)
hrtimer_get_expires  function  include/linux/hrtimer.h  231  static inline ktime_t hrtimer_get_expires(const struct hrtimer *timer)
hrtimer_get_softexpires  function  include/linux/hrtimer.h  236  static inline ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
hrtimer_get_expires_tv64  function  include/linux/hrtimer.h  241  static inline s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
hrtimer_get_softexpires_tv64  function  include/linux/hrtimer.h  245  static inline s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
hrtimer_get_expires_ns  function  include/linux/hrtimer.h  250  static inline s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
hrtimer_expires_remaining  function  include/linux/hrtimer.h  255  static inline ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
hrtimer_interrupt  prototype  include/linux/hrtimer.h  263  extern void hrtimer_interrupt(struct clock_event_device *dev);
hrtimer_cb_get_time  function  include/linux/hrtimer.h  304  static inline ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
hrtimer_is_hres_active  function  include/linux/hrtimer.h  309  static inline int hrtimer_is_hres_active(struct hrtimer *timer)
hrtimer_peek_ahead_timers  function  include/linux/hrtimer.h  298  static inline void hrtimer_peek_ahead_timers(void) { }
HIGH_RES_NSEC  macro  include/linux/hrtimer.h  286  # define HIGH_RES_NSEC 1
KTIME_HIGH_RES  macro  include/linux/hrtimer.h  287  # define KTIME_HIGH_RES (ktime_t) { .tv64 = HIGH_RES_NSEC }
MONOTONIC_RES_NSEC  macro  include/linux/hrtimer.h  295  # define MONOTONIC_RES_NSEC LOW_RES_NSEC
KTIME_MONOTONIC_RES  macro  include/linux/hrtimer.h  296  # define KTIME_MONOTONIC_RES KTIME_LOW_RES
clock_was_set_delayed  function  include/linux/hrtimer.h  314  static inline void clock_was_set_delayed(void) { }
clock_was_set  prototype  include/linux/hrtimer.h  318  extern void clock_was_set(void);
timerfd_clock_was_set  function  include/linux/hrtimer.h  322  static inline void timerfd_clock_was_set(void) { }
hrtimers_resume  prototype  include/linux/hrtimer.h  324  extern void hrtimers_resume(void);
ktime_get  prototype  include/linux/hrtimer.h  326  extern ktime_t ktime_get(void);
ktime_get_real  prototype  include/linux/hrtimer.h  327  extern ktime_t ktime_get_real(void);
ktime_get_boottime  prototype  include/linux/hrtimer.h  328  extern ktime_t ktime_get_boottime(void);
ktime_get_monotonic_offset  prototype  include/linux/hrtimer.h  329  extern ktime_t ktime_get_monotonic_offset(void);
ktime_get_update_offsets  prototype  include/linux/hrtimer.h  330  extern ktime_t ktime_get_update_offsets(ktime_t *offs_real,ktime_t *offs_boot);
hrtimer_init  prototype  include/linux/hrtimer.h  338  extern void hrtimer_init(struct hrtimer *timer,clockid_t which_clock,enum hrtimer_mode mode);
hrtimer_init_on_stack  function  include/linux/hrtimer.h  347  static inline void hrtimer_init_on_stack(struct hrtimer *timer,clockid_t which_clock,enum hrtimer_mode mode)
destroy_hrtimer_on_stack  function  include/linux/hrtimer.h  353  static inline void destroy_hrtimer_on_stack(struct hrtimer *timer) { }
hrtimer_start  prototype  include/linux/hrtimer.h  357  extern int hrtimer_start(struct hrtimer *timer,ktime_t tim,const enum hrtimer_mode mode);
hrtimer_start_range_ns  prototype  include/linux/hrtimer.h  359  extern int hrtimer_start_range_ns(struct hrtimer *timer,ktime_t tim,unsigned long range_ns, const enum hrtimer_mode mode);
__hrtimer_start_range_ns  prototype  include/linux/hrtimer.h  362  __hrtimer_start_range_ns(struct hrtimer *timer,ktime_t tim,unsigned long delta_ns,const enum hrtimer_mode mode, int wakeup);
hrtimer_cancel  prototype  include/linux/hrtimer.h  366  extern int hrtimer_cancel(struct hrtimer *timer);
hrtimer_try_to_cancel  prototype  include/linux/hrtimer.h  367  extern int hrtimer_try_to_cancel(struct hrtimer *timer);
hrtimer_start_expires  function  include/linux/hrtimer.h  369  static inline int hrtimer_start_expires(struct hrtimer *timer,enum hrtimer_mode mode)
hrtimer_get_remaining  prototype  include/linux/hrtimer.h  386  extern ktime_t hrtimer_get_remaining(const struct hrtimer *timer);
hrtimer_get_res  prototype  include/linux/hrtimer.h  387  extern int hrtimer_get_res(const clockid_t which_clock,struct timespec *tp);
hrtimer_get_next_event  prototype  include/linux/hrtimer.h  389  extern ktime_t hrtimer_get_next_event(void);
hrtimer_active  function  include/linux/hrtimer.h  396  static inline int hrtimer_active(const struct hrtimer *timer)
hrtimer_is_queued  function  include/linux/hrtimer.h  404  static inline int hrtimer_is_queued(struct hrtimer *timer)
hrtimer_callback_running  function  include/linux/hrtimer.h  413  static inline int hrtimer_callback_running(struct hrtimer *timer)
hrtimer_forward  prototype  include/linux/hrtimer.h  420  hrtimer_forward(struct hrtimer *timer,ktime_t now,ktime_t interval);
hrtimer_forward_now  function  include/linux/hrtimer.h  423  static inline u64 hrtimer_forward_now(struct hrtimer *timer,ktime_t interval)
hrtimer_nanosleep  prototype  include/linux/hrtimer.h  430  extern long hrtimer_nanosleep(struct timespec *rqtp,struct timespec __user *rmtp,const enum hrtimer_mode mode,const clockid_t clockid);
hrtimer_nanosleep_restart  prototype  include/linux/hrtimer.h  434  extern long hrtimer_nanosleep_restart(struct restart_block *restart_block);
hrtimer_init_sleeper  prototype  include/linux/hrtimer.h  436  extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl,struct task_struct *tsk);
schedule_hrtimeout_range  prototype  include/linux/hrtimer.h  439  extern int schedule_hrtimeout_range(ktime_t *expires,unsigned long delta,const enum hrtimer_mode mode);
schedule_hrtimeout_range_clock  prototype  include/linux/hrtimer.h  441  extern int schedule_hrtimeout_range_clock(ktime_t *expires,unsigned long delta, const enum hrtimer_mode mode, int clock);
schedule_hrtimeout  prototype  include/linux/hrtimer.h  443  extern int schedule_hrtimeout(ktime_t *expires,const enum hrtimer_mode mode);
hrtimer_run_queues  prototype  include/linux/hrtimer.h  446  extern void hrtimer_run_queues(void);
hrtimer_run_pending  prototype  include/linux/hrtimer.h  447  extern void hrtimer_run_pending(void);
hrtimers_init  prototype  include/linux/hrtimer.h  450  extern void __init hrtimers_init(void);
ktime_divns  macro  include/linux/hrtimer.h  455  # define ktime_divns(kt,div) (u64)((kt).tv64 / (div))
sysrq_timer_list_show  prototype  include/linux/hrtimer.h  459  extern void sysrq_timer_list_show(void);
task_io_accounting  struct  include/linux/task_io_accounting.h  11  struct task_io_accounting { u64 rchar; u64 wchar; u64 syscr; u64 syscw; u64 read_bytes; u64 write_bytes; u64 cancelled_write_bytes; };
_INCLUDE_GUARD_LATENCYTOP_H_  macro  include/linux/latencytop.h  10  #define _INCLUDE_GUARD_LATENCYTOP_H_
LT_SAVECOUNT  macro  include/linux/latencytop.h  17  #define LT_SAVECOUNT 32
LT_BACKTRACEDEPTH  macro  include/linux/latencytop.h  18  #define LT_BACKTRACEDEPTH 12
latency_record  struct  include/linux/latencytop.h  20  struct latency_record { unsigned long backtrace[LT_BACKTRACEDEPTH]; unsigned int count; unsigned long time; unsigned long max; };
__account_scheduler_latency  prototype  include/linux/latencytop.h  30  void __account_scheduler_latency(struct task_struct *task,int usecs,int inter);
account_scheduler_latency  function  include/linux/latencytop.h  43  account_scheduler_latency(struct task_struct *task,int usecs,int inter)
clear_all_latency_tracing  function  include/linux/latencytop.h  47  static inline void clear_all_latency_tracing(struct task_struct *p)
_LINUX_CRED_H  macro  include/linux/cred.h  13  #define _LINUX_CRED_H
NGROUPS_SMALL  macro  include/linux/cred.h  29  #define NGROUPS_SMALL 32
NGROUPS_PER_BLOCK  macro  include/linux/cred.h  30  #define NGROUPS_PER_BLOCK ((unsigned int)(PAGE_SIZE / sizeof(kgid_t)))
group_info  struct  include/linux/cred.h  32  struct group_info { atomic_t usage; int ngroups; int nblocks; kgid_t small_block[NGROUPS_SMALL]; kgid_t *blocks[0]; };
get_group_info  function  include/linux/cred.h  49  static inline struct group_info *get_group_info(struct group_info *gi)
put_group_info  macro  include/linux/cred.h  59  #define put_group_info(group_info) do { if (atomic_dec_and_test(&(group_info)->usage)) groups_free(group_info); } while (0)
groups_alloc  prototype  include/linux/cred.h  65  extern struct group_info *groups_alloc(int);
groups_free  prototype  include/linux/cred.h  67  extern void groups_free(struct group_info *);
set_current_groups  prototype  include/linux/cred.h  68  extern int set_current_groups(struct group_info *);
set_groups  prototype  include/linux/cred.h  69  extern int set_groups(struct cred *,struct group_info *);
groups_search  prototype  include/linux/cred.h  70  extern int groups_search(const struct group_info *,kgid_t);
GROUP_AT  macro  include/linux/cred.h  73  #define GROUP_AT(gi,i) ((gi)->blocks[(i) / NGROUPS_PER_BLOCK][(i) % NGROUPS_PER_BLOCK])
in_group_p  prototype  include/linux/cred.h  76  extern int in_group_p(kgid_t);
in_egroup_p  prototype  include/linux/cred.h  77  extern int in_egroup_p(kgid_t);
thread_group_cred  struct  include/linux/cred.h  84  struct thread_group_cred { atomic_t usage; pid_t tgid; spinlock_t lock; struct key __rcu *session_keyring; struct key *process_keyring; struct rcu_head rcu; };
cred  struct  include/linux/cred.h  117  struct cred { atomic_t usage; atomic_t subscribers; void *put_addr; unsigned magic; #define CRED_MAGIC 0x43736564 #define CRED_MAGIC_DEAD 0x44656144 kuid_t uid; kgid_t gid; kuid_t suid; kgid_t sgid; kuid_t euid; kgid_t egid; kuid_t fsuid; kgid_t fsgid; unsigned securebits; kernel_cap_t cap_inheritable; kernel_cap_t cap_permitted; kernel_cap_t cap_effective; kernel_cap_t cap_bset; unsigned char jit_keyring; struct key *thread_keyring; struct key *request_key_auth; struct thread_group_cred *tgcred; void *security; struct user_struct *user; struct user_namespace *user_ns; struct group_info *group_info; struct rcu_head rcu; };
__put_cred  prototype  include/linux/cred.h  155  extern void __put_cred(struct cred *);
exit_creds  prototype  include/linux/cred.h  156  extern void exit_creds(struct task_struct *);
copy_creds  prototype  include/linux/cred.h  157  extern int copy_creds(struct task_struct *,unsigned long);
get_task_cred  prototype  include/linux/cred.h  158  extern const struct cred *get_task_cred(struct task_struct *);
cred_alloc_blank  prototype  include/linux/cred.h  159  extern struct cred *cred_alloc_blank(void);
prepare_creds  prototype  include/linux/cred.h  160  extern struct cred *prepare_creds(void);
prepare_exec_creds  prototype  include/linux/cred.h  161  extern struct cred *prepare_exec_creds(void);
commit_creds  prototype  include/linux/cred.h  162  extern int commit_creds(struct cred *);
abort_creds  prototype  include/linux/cred.h  163  extern void abort_creds(struct cred *);
override_creds  prototype  include/linux/cred.h  164  extern const struct cred *override_creds(const struct cred *);
revert_creds  prototype  include/linux/cred.h  165  extern void revert_creds(const struct cred *);
prepare_kernel_cred  prototype  include/linux/cred.h  166  extern struct cred *prepare_kernel_cred(struct task_struct *);
change_create_files_as  prototype  include/linux/cred.h  167  extern int change_create_files_as(struct cred *,struct inode *);
set_security_override  prototype  include/linux/cred.h  168  extern int set_security_override(struct cred *,u32);
set_security_override_from_ctx  prototype  include/linux/cred.h  169  extern int set_security_override_from_ctx(struct cred *,const char *);
set_create_files_as  prototype  include/linux/cred.h  170  extern int set_create_files_as(struct cred *,struct inode *);
cred_init  prototype  include/linux/cred.h  171  extern void __init cred_init(void);
__invalid_creds  prototype  include/linux/cred.h  177  extern void __invalid_creds(const struct cred *,const char *,unsigned);
__validate_process_creds  prototype  include/linux/cred.h  178  extern void __validate_process_creds(struct task_struct *,const char *, unsigned);
creds_are_invalid  prototype  include/linux/cred.h  181  extern bool creds_are_invalid(const struct cred *cred);
__validate_creds  function  include/linux/cred.h  183  static inline void __validate_creds(const struct cred *cred,const char *file, unsigned line)
validate_creds  function  include/linux/cred.h  202  static inline void validate_creds(const struct cred *cred)
validate_process_creds  function  include/linux/cred.h  208  static inline void validate_process_creds(void)
validate_creds_for_do_exit  function  include/linux/cred.h  205  static inline void validate_creds_for_do_exit(struct task_struct *tsk)
get_new_cred  function  include/linux/cred.h  220  static inline struct cred *get_new_cred(struct cred *cred)
get_cred  function  include/linux/cred.h  239  static inline const struct cred *get_cred(const struct cred *cred)
put_cred  function  include/linux/cred.h  257  static inline void put_cred(const struct cred *_cred)
current_cred  macro  include/linux/cred.h  272  #define current_cred() rcu_dereference_protected(current->cred, 1)
__task_cred  macro  include/linux/cred.h  285  #define __task_cred(task) rcu_dereference((task)->real_cred)
get_current_cred  macro  include/linux/cred.h  295  #define get_current_cred() (get_cred(current_cred()))
get_current_user  macro  include/linux/cred.h  304  #define get_current_user() ({ struct user_struct *__u; const struct cred *__cred; __cred = current_cred(); __u = get_uid(__cred->user); __u; })
get_current_groups  macro  include/linux/cred.h  319  #define get_current_groups() ({ struct group_info *__groups; const struct cred *__cred; __cred = current_cred(); __groups = get_group_info(__cred->group_info); __groups; })
task_cred_xxx  macro  include/linux/cred.h  328  #define task_cred_xxx(task,xxx) ({ __typeof__(((struct cred *)NULL)->xxx) ___val; rcu_read_lock(); ___val = __task_cred((task))->xxx; rcu_read_unlock(); ___val; })
task_uid  macro  include/linux/cred.h  337  #define task_uid(task) (task_cred_xxx((task),uid))
task_euid  macro  include/linux/cred.h  338  #define task_euid(task) (task_cred_xxx((task),euid))
current_cred_xxx  macro  include/linux/cred.h  340  #define current_cred_xxx(xxx) ({ current_cred()->xxx; })
current_uid  macro  include/linux/cred.h  345  #define current_uid() (current_cred_xxx(uid))
current_gid  macro  include/linux/cred.h  346  #define current_gid() (current_cred_xxx(gid))
current_euid  macro  include/linux/cred.h  347  #define current_euid() (current_cred_xxx(euid))
current_egid  macro  include/linux/cred.h  348  #define current_egid() (current_cred_xxx(egid))
current_suid  macro  include/linux/cred.h  349  #define current_suid() (current_cred_xxx(suid))
current_sgid  macro  include/linux/cred.h  350  #define current_sgid() (current_cred_xxx(sgid))
current_fsuid  macro  include/linux/cred.h  351  #define current_fsuid() (current_cred_xxx(fsuid))
current_fsgid  macro  include/linux/cred.h  352  #define current_fsgid() (current_cred_xxx(fsgid))
current_cap  macro  include/linux/cred.h  353  #define current_cap() (current_cred_xxx(cap_effective))
current_user  macro  include/linux/cred.h  354  #define current_user() (current_cred_xxx(user))
current_security  macro  include/linux/cred.h  355  #define current_security() (current_cred_xxx(security))
task_user_ns  macro  include/linux/cred.h  363  #define task_user_ns(task) (&init_user_ns)
current_uid_gid  macro  include/linux/cred.h  367  #define current_uid_gid(_uid,_gid) do { const struct cred *__cred; __cred = current_cred(); *(_uid) = __cred->uid; *(_gid) = __cred->gid; } while(0)
current_euid_egid  macro  include/linux/cred.h  375  #define current_euid_egid(_euid,_egid) do { const struct cred *__cred; __cred = current_cred(); *(_euid) = __cred->euid; *(_egid) = __cred->egid; } while(0)
current_fsuid_fsgid  macro  include/linux/cred.h  383  #define current_fsuid_fsgid(_fsuid,_fsgid) do { const struct cred *__cred; __cred = current_cred(); *(_fsuid) = __cred->fsuid; *(_fsgid) = __cred->fsgid; } while(0)
LLIST_H  macro  include/linux/llist.h  2  #define LLIST_H
llist_head  struct  include/linux/llist.h  61  struct llist_head { struct llist_node *first; };
llist_node  struct  include/linux/llist.h  65  struct llist_node { struct llist_node *next; };
LLIST_HEAD_INIT  macro  include/linux/llist.h  69  #define LLIST_HEAD_INIT(name) { NULL }
LLIST_HEAD  macro  include/linux/llist.h  70  #define LLIST_HEAD(name) struct llist_head name = LLIST_HEAD_INIT(name)
init_llist_head  function  include/linux/llist.h  76  static inline void init_llist_head(struct llist_head *list)
llist_entry  macro  include/linux/llist.h  87  #define llist_entry(ptr,type,member) container_of(ptr, type, member)
llist_for_each  macro  include/linux/llist.h  104  #define llist_for_each(pos,node) for ((pos) = (node); pos; (pos) = (pos)->next)
llist_for_each_entry  macro  include/linux/llist.h  122  #define llist_for_each_entry(pos,node,member) for ((pos) = llist_entry((node), typeof(*(pos)), member); &(pos)->member != NULL; (pos) = llist_entry((pos)->member.next, typeof(*(pos)), member))
llist_empty  function  include/linux/llist.h  135  static inline bool llist_empty(const struct llist_head *head)
llist_next  function  include/linux/llist.h  140  static inline struct llist_node *llist_next(struct llist_node *node)
llist_add  function  include/linux/llist.h  152  static inline bool llist_add(struct llist_node *new,struct llist_head *head)
llist_del_all  function  include/linux/llist.h  176  static inline struct llist_node *llist_del_all(struct llist_head *head)
llist_add_batch  prototype  include/linux/llist.h  181  extern bool llist_add_batch(struct llist_node *new_first,struct llist_node *new_last,struct llist_head *head);
llist_del_first  prototype  include/linux/llist.h  184  extern struct llist_node *llist_del_first(struct llist_head *head);
_LINUX_UIDGID_H  macro  include/linux/uidgid.h  2  #define _LINUX_UIDGID_H
kuid_t  struct  include/linux/uidgid.h  22  typedef struct { uid_t val; } kuid_t;
kgid_t  struct  include/linux/uidgid.h  27  typedef struct { gid_t val; } kgid_t;
KUIDT_INIT  macro  include/linux/uidgid.h  59  #define KUIDT_INIT(value) ((kuid_t) value )
KGIDT_INIT  macro  include/linux/uidgid.h  60  #define KGIDT_INIT(value) ((kgid_t) value )
__kuid_val  function  include/linux/uidgid.h  49  static inline uid_t __kuid_val(kuid_t uid)
__kgid_val  function  include/linux/uidgid.h  54  static inline gid_t __kgid_val(kgid_t gid)
GLOBAL_ROOT_UID  macro  include/linux/uidgid.h  64  #define GLOBAL_ROOT_UID KUIDT_INIT(0)
GLOBAL_ROOT_GID  macro  include/linux/uidgid.h  65  #define GLOBAL_ROOT_GID KGIDT_INIT(0)
INVALID_UID  macro  include/linux/uidgid.h  67  #define INVALID_UID KUIDT_INIT(-1)
INVALID_GID  macro  include/linux/uidgid.h  68  #define INVALID_GID KGIDT_INIT(-1)
uid_eq  function  include/linux/uidgid.h  70  static inline bool uid_eq(kuid_t left,kuid_t right)
gid_eq  function  include/linux/uidgid.h  75  static inline bool gid_eq(kgid_t left,kgid_t right)
uid_gt  function  include/linux/uidgid.h  80  static inline bool uid_gt(kuid_t left,kuid_t right)
gid_gt  function  include/linux/uidgid.h  85  static inline bool gid_gt(kgid_t left,kgid_t right)
uid_gte  function  include/linux/uidgid.h  90  static inline bool uid_gte(kuid_t left,kuid_t right)
gid_gte  function  include/linux/uidgid.h  95  static inline bool gid_gte(kgid_t left,kgid_t right)
uid_lt  function  include/linux/uidgid.h  100  static inline bool uid_lt(kuid_t left,kuid_t right)
gid_lt  function  include/linux/uidgid.h  105  static inline bool gid_lt(kgid_t left,kgid_t right)
uid_lte  function  include/linux/uidgid.h  110  static inline bool uid_lte(kuid_t left,kuid_t right)
gid_lte  function  include/linux/uidgid.h  115  static inline bool gid_lte(kgid_t left,kgid_t right)
uid_valid  function  include/linux/uidgid.h  120  static inline bool uid_valid(kuid_t uid)
gid_valid  function  include/linux/uidgid.h  125  static inline bool gid_valid(kgid_t gid)
make_kuid  function  include/linux/uidgid.h  152  static inline kuid_t make_kuid(struct user_namespace *from,uid_t uid)
make_kgid  function  include/linux/uidgid.h  157  static inline kgid_t make_kgid(struct user_namespace *from,gid_t gid)
from_kuid  function  include/linux/uidgid.h  162  static inline uid_t from_kuid(struct user_namespace *to,kuid_t kuid)
from_kgid  function  include/linux/uidgid.h  167  static inline gid_t from_kgid(struct user_namespace *to,kgid_t kgid)
from_kuid_munged  function  include/linux/uidgid.h  172  static inline uid_t from_kuid_munged(struct user_namespace *to,kuid_t kuid)
from_kgid_munged  function  include/linux/uidgid.h  180  static inline gid_t from_kgid_munged(struct user_namespace *to,kgid_t kgid)
kuid_has_mapping  function  include/linux/uidgid.h  188  static inline bool kuid_has_mapping(struct user_namespace *ns,kuid_t uid)
kgid_has_mapping  function  include/linux/uidgid.h  193  static inline bool kgid_has_mapping(struct user_namespace *ns,kgid_t gid)
_ASM_X86_PROCESSOR_H  macro  arch/x86/include/asm/processor.h  2  #define _ASM_X86_PROCESSOR_H
NET_IP_ALIGN  macro  arch/x86/include/asm/processor.h  40  #define NET_IP_ALIGN 0
HBP_NUM  macro  arch/x86/include/asm/processor.h  42  #define HBP_NUM 4
current_text_addr  function  arch/x86/include/asm/processor.h  47  static inline void *current_text_addr(void)
ARCH_MIN_TASKALIGN  macro  arch/x86/include/asm/processor.h  60  # define ARCH_MIN_TASKALIGN 16
ARCH_MIN_MMSTRUCT_ALIGN  macro  arch/x86/include/asm/processor.h  61  # define ARCH_MIN_MMSTRUCT_ALIGN 0
cpuinfo_x86  struct  arch/x86/include/asm/processor.h  70  struct cpuinfo_x86 { __u8 x86; __u8 x86_vendor; __u8 x86_model; __u8 x86_mask; char wp_works_ok; char hlt_works_ok; char hard_math; char rfu; char fdiv_bug; char f00f_bug; char coma_bug; char pad0; int x86_tlbsize; __u8 x86_virt_bits; __u8 x86_phys_bits; __u8 x86_coreid_bits; __u32 extended_cpuid_level; int cpuid_level; __u32 x86_capability[NCAPINTS]; char x86_vendor_id[16]; char x86_model_id[64]; int x86_cache_size; int x86_cache_alignment; int x86_power; unsigned long loops_per_jiffy; u16 x86_max_cores; u16 apicid; u16 initial_apicid; u16 x86_clflush_size; u16 booted_cores; u16 phys_proc_id; u16 cpu_core_id; u8 compute_unit_id; u16 cpu_index; u32 microcode; } __attribute__((__aligned__(SMP_CACHE_BYTES)));
X86_VENDOR_INTEL  macro  arch/x86/include/asm/processor.h  124  #define X86_VENDOR_INTEL 0
X86_VENDOR_CYRIX  macro  arch/x86/include/asm/processor.h  125  #define X86_VENDOR_CYRIX 1
X86_VENDOR_AMD  macro  arch/x86/include/asm/processor.h  126  #define X86_VENDOR_AMD 2
X86_VENDOR_UMC  macro  arch/x86/include/asm/processor.h  127  #define X86_VENDOR_UMC 3
X86_VENDOR_CENTAUR  macro  arch/x86/include/asm/processor.h  128  #define X86_VENDOR_CENTAUR 5
X86_VENDOR_TRANSMETA  macro  arch/x86/include/asm/processor.h  129  #define X86_VENDOR_TRANSMETA 7
X86_VENDOR_NSC  macro  arch/x86/include/asm/processor.h  130  #define X86_VENDOR_NSC 8
X86_VENDOR_NUM  macro  arch/x86/include/asm/processor.h  131  #define X86_VENDOR_NUM 9
X86_VENDOR_UNKNOWN  macro  arch/x86/include/asm/processor.h  133  #define X86_VENDOR_UNKNOWN 0xff
cpu_data  macro  arch/x86/include/asm/processor.h  150  #define cpu_data(cpu) boot_cpu_data
cpu_info  macro  arch/x86/include/asm/processor.h  149  #define cpu_info boot_cpu_data
hlt_works  function  arch/x86/include/asm/processor.h  155  static inline int hlt_works(int cpu)
cpu_detect  prototype  arch/x86/include/asm/processor.h  166  extern void cpu_detect(struct cpuinfo_x86 *c);
idle_regs  prototype  arch/x86/include/asm/processor.h  168  extern struct pt_regs *idle_regs(struct pt_regs *);
early_cpu_init  prototype  arch/x86/include/asm/processor.h  170  extern void early_cpu_init(void);
identify_boot_cpu  prototype  arch/x86/include/asm/processor.h  171  extern void identify_boot_cpu(void);
identify_secondary_cpu  prototype  arch/x86/include/asm/processor.h  172  extern void identify_secondary_cpu(struct cpuinfo_x86 *);
print_cpu_info  prototype  arch/x86/include/asm/processor.h  173  extern void print_cpu_info(struct cpuinfo_x86 *);
print_cpu_msr  prototype  arch/x86/include/asm/processor.h  174  void print_cpu_msr(struct cpuinfo_x86 *);
init_scattered_cpuid_features  prototype  arch/x86/include/asm/processor.h  175  extern void init_scattered_cpuid_features(struct cpuinfo_x86 *c);
init_intel_cacheinfo  prototype  arch/x86/include/asm/processor.h  176  extern unsigned int init_intel_cacheinfo(struct cpuinfo_x86 *c);
detect_extended_topology  prototype  arch/x86/include/asm/processor.h  179  extern void detect_extended_topology(struct cpuinfo_x86 *c);
detect_ht  prototype  arch/x86/include/asm/processor.h  180  extern void detect_ht(struct cpuinfo_x86 *c);
native_cpuid  function  arch/x86/include/asm/processor.h  182  static inline void native_cpuid(unsigned int *eax,unsigned int *ebx,unsigned int *ecx, unsigned int *edx)
load_cr3  function  arch/x86/include/asm/processor.h  195  static inline void load_cr3(pgd_t *pgdir)
x86_hw_tss  struct  arch/x86/include/asm/processor.h  234  struct x86_hw_tss { u32 reserved1; u64 sp0; u64 sp1; u64 sp2; u64 reserved2; u64 ist[7]; u32 reserved3; u32 reserved4; u16 reserved5; u16 io_bitmap_base; } __attribute__((packed)) ____cacheline_aligned;
IO_BITMAP_BITS  macro  arch/x86/include/asm/processor.h  252  #define IO_BITMAP_BITS 65536
IO_BITMAP_BYTES  macro  arch/x86/include/asm/processor.h  253  #define IO_BITMAP_BYTES (IO_BITMAP_BITS/8)
IO_BITMAP_LONGS  macro  arch/x86/include/asm/processor.h  254  #define IO_BITMAP_LONGS (IO_BITMAP_BYTES/sizeof(long))
IO_BITMAP_OFFSET  macro  arch/x86/include/asm/processor.h  255  #define IO_BITMAP_OFFSET offsetof(struct tss_struct,io_bitmap)
INVALID_IO_BITMAP_OFFSET  macro  arch/x86/include/asm/processor.h  256  #define INVALID_IO_BITMAP_OFFSET 0x8000
tss_struct  struct  arch/x86/include/asm/processor.h  258  struct tss_struct { struct x86_hw_tss x86_tss; unsigned long io_bitmap[IO_BITMAP_LONGS + 1]; unsigned long stack[64]; } ____cacheline_aligned;
orig_ist  struct  arch/x86/include/asm/processor.h  284  struct orig_ist { unsigned long ist[7]; };
MXCSR_DEFAULT  macro  arch/x86/include/asm/processor.h  288  #define MXCSR_DEFAULT 0x1f80
i387_fsave_struct  struct  arch/x86/include/asm/processor.h  290  struct i387_fsave_struct { u32 cwd; u32 swd; u32 twd; u32 fip; u32 fcs; u32 foo; u32 fos; u32 st_space[20]; u32 status; };
i387_fxsave_struct  struct  arch/x86/include/asm/processor.h  306  struct i387_fxsave_struct { u16 cwd; u16 swd; u16 twd; u16 fop; union { u64 rip; u64 rdp; }; u32 fip; u32 fcs; u32 foo; u32 fos; }; u32 mxcsr; u32 mxcsr_mask; u32 st_space[32]; u32 xmm_space[64]; u32 padding[12]; union { u32 padding1[12]; u32 sw_reserved[12]; }; } __attribute__((aligned(16)));
i387_soft_struct  struct  arch/x86/include/asm/processor.h  341  struct i387_soft_struct { u32 cwd; u32 swd; u32 twd; u32 fip; u32 fcs; u32 foo; u32 fos; u32 st_space[20]; u8 ftop; u8 changed; u8 lookahead; u8 no_update; u8 rm; u8 alimit; struct math_emu_info *info; u32 entry_eip; };
ymmh_struct  struct  arch/x86/include/asm/processor.h  361  struct ymmh_struct { u32 ymmh_space[64]; };
xsave_hdr_struct  struct  arch/x86/include/asm/processor.h  366  struct xsave_hdr_struct { u64 xstate_bv; u64 reserved1[2]; u64 reserved2[5]; } __attribute__((packed));
xsave_struct  struct  arch/x86/include/asm/processor.h  372  struct xsave_struct { struct i387_fxsave_struct i387; struct xsave_hdr_struct xsave_hdr; struct ymmh_struct ymmh; } __attribute__ ((packed, aligned (64)));
thread_xstate  union  arch/x86/include/asm/processor.h  379  union thread_xstate { struct i387_fsave_struct fsave; struct i387_fxsave_struct fxsave; struct i387_soft_struct soft; struct xsave_struct xsave; };
fpu  struct  arch/x86/include/asm/processor.h  386  struct fpu { unsigned int last_cpu; unsigned int has_fpu; union thread_xstate *state; };
irq_stack_union  union  arch/x86/include/asm/processor.h  395  union irq_stack_union { char irq_stack[IRQ_STACK_SIZE]; char gs_base[40]; unsigned long stack_canary; };
ignore_sysret  prototype  arch/x86/include/asm/processor.h  414  extern asmlinkage void ignore_sysret(void);
stack_canary  struct  arch/x86/include/asm/processor.h  423  struct stack_canary { char __pad[20]; unsigned long canary; };
free_thread_xstate  prototype  arch/x86/include/asm/processor.h  432  extern void free_thread_xstate(struct task_struct *);
thread_struct  struct  arch/x86/include/asm/processor.h  437  struct thread_struct { struct desc_struct tls_array[GDT_ENTRY_TLS_ENTRIES]; unsigned long sp0; unsigned long sp; unsigned long sysenter_cs; unsigned long usersp; unsigned short es; unsigned short ds; unsigned short fsindex; unsigned short gsindex; unsigned long ip; unsigned long fs; unsigned long gs; struct perf_event *ptrace_bps[HBP_NUM]; unsigned long debugreg6; unsigned long ptrace_dr7; unsigned long cr2; unsigned long trap_nr; unsigned long error_code; struct fpu fpu; struct vm86_struct __user *vm86_info; unsigned long screen_bitmap; unsigned long v86flags; unsigned long v86mask; unsigned long saved_sp0; unsigned int saved_fs; unsigned int saved_gs; unsigned long *io_bitmap_ptr; unsigned long iopl; unsigned io_bitmap_max; };
native_set_iopl_mask  function  arch/x86/include/asm/processor.h  490  static inline void native_set_iopl_mask(unsigned mask)
native_load_sp0  function  arch/x86/include/asm/processor.h  507  native_load_sp0(struct tss_struct *tss,struct thread_struct *thread)
native_swapgs  function  arch/x86/include/asm/processor.h  519  static inline void native_swapgs(void)
__cpuid  macro  arch/x86/include/asm/processor.h  529  #define __cpuid native_cpuid
paravirt_enabled  macro  arch/x86/include/asm/processor.h  530  #define paravirt_enabled() 0
load_sp0  function  arch/x86/include/asm/processor.h  532  static inline void load_sp0(struct tss_struct *tss,struct thread_struct *thread)
set_iopl_mask  macro  arch/x86/include/asm/processor.h  538  #define set_iopl_mask native_set_iopl_mask
set_in_cr4  function  arch/x86/include/asm/processor.h  550  static inline void set_in_cr4(unsigned long mask)
clear_in_cr4  function  arch/x86/include/asm/processor.h  562  static inline void clear_in_cr4(unsigned long mask)
mm_segment_t  struct  arch/x86/include/asm/processor.h  574  typedef struct { unsigned long seg; } mm_segment_t;
kernel_thread  prototype  arch/x86/include/asm/processor.h  582  extern int kernel_thread(int (*fn)(void *),void *arg,unsigned long flags);
release_thread  prototype  arch/x86/include/asm/processor.h  585  extern void release_thread(struct task_struct *);
get_wchan  prototype  arch/x86/include/asm/processor.h  587  unsigned long get_wchan(struct task_struct *p);
cpuid  function  arch/x86/include/asm/processor.h  594  static inline void cpuid(unsigned int op,unsigned int *eax, unsigned int *ebx,unsigned int *ecx, unsigned int *edx)
cpuid_count  function  arch/x86/include/asm/processor.h  604  static inline void cpuid_count(unsigned int op,int count,unsigned int *eax, unsigned int *ebx,unsigned int *ecx, unsigned int *edx)
cpuid_eax  function  arch/x86/include/asm/processor.h  616  static inline unsigned int cpuid_eax(unsigned int op)
cpuid_ebx  function  arch/x86/include/asm/processor.h  625  static inline unsigned int cpuid_ebx(unsigned int op)
cpuid_ecx  function  arch/x86/include/asm/processor.h  634  static inline unsigned int cpuid_ecx(unsigned int op)
cpuid_edx  function  arch/x86/include/asm/processor.h  643  static inline unsigned int cpuid_edx(unsigned int op)
rep_nop  function  arch/x86/include/asm/processor.h  653  static inline void rep_nop(void)
cpu_relax  function  arch/x86/include/asm/processor.h  658  static inline void cpu_relax(void)
sync_core  function  arch/x86/include/asm/processor.h  664  static inline void sync_core(void)
__monitor  function  arch/x86/include/asm/processor.h  682  static inline void __monitor(const void *eax,unsigned long ecx,unsigned long edx)
__mwait  function  arch/x86/include/asm/processor.h  690  static inline void __mwait(unsigned long eax,unsigned long ecx)
__sti_mwait  function  arch/x86/include/asm/processor.h  697  static inline void __sti_mwait(unsigned long eax,unsigned long ecx)
select_idle_routine  prototype  arch/x86/include/asm/processor.h  705  extern void select_idle_routine(const struct cpuinfo_x86 *c);
init_amd_e400_c1e_mask  prototype  arch/x86/include/asm/processor.h  706  extern void init_amd_e400_c1e_mask(void);
idle_boot_override  enum  arch/x86/include/asm/processor.h  711  enum idle_boot_override {IDLE_NO_OVERRIDE=0, IDLE_HALT, IDLE_NOMWAIT, IDLE_POLL, IDLE_FORCE_MWAIT};
enable_sep_cpu  prototype  arch/x86/include/asm/processor.h  714  extern void enable_sep_cpu(void);
sysenter_setup  prototype  arch/x86/include/asm/processor.h  715  extern int sysenter_setup(void);
early_trap_init  prototype  arch/x86/include/asm/processor.h  717  extern void early_trap_init(void);
cpu_set_gdt  prototype  arch/x86/include/asm/processor.h  722  extern void cpu_set_gdt(int);
switch_to_new_gdt  prototype  arch/x86/include/asm/processor.h  723  extern void switch_to_new_gdt(int);
load_percpu_segment  prototype  arch/x86/include/asm/processor.h  724  extern void load_percpu_segment(int);
get_debugctlmsr  function  arch/x86/include/asm/processor.h  727  static inline unsigned long get_debugctlmsr(void)
update_debugctlmsr  function  arch/x86/include/asm/processor.h  740  static inline void update_debugctlmsr(unsigned long debugctlmsr)
HAVE_ARCH_PICK_MMAP_LAYOUT  macro  arch/x86/include/asm/processor.h  763  #define HAVE_ARCH_PICK_MMAP_LAYOUT 1
ARCH_HAS_PREFETCHW  macro  arch/x86/include/asm/processor.h  764  #define ARCH_HAS_PREFETCHW
ARCH_HAS_SPINLOCK_PREFETCH  macro  arch/x86/include/asm/processor.h  765  #define ARCH_HAS_SPINLOCK_PREFETCH
BASE_PREFETCH  macro  arch/x86/include/asm/processor.h  771  # define BASE_PREFETCH "prefetcht0 (%1)"
ARCH_HAS_PREFETCH  macro  arch/x86/include/asm/processor.h  769  # define ARCH_HAS_PREFETCH
prefetch  function  arch/x86/include/asm/processor.h  780  static inline void prefetch(const void *x)
prefetchw  function  arch/x86/include/asm/processor.h  793  static inline void prefetchw(const void *x)
spin_lock_prefetch  function  arch/x86/include/asm/processor.h  801  static inline void spin_lock_prefetch(const void *x)
TASK_SIZE  macro  arch/x86/include/asm/processor.h  878  #define TASK_SIZE (test_thread_flag(TIF_ADDR32) ? IA32_PAGE_OFFSET : TASK_SIZE_MAX)
TASK_SIZE_MAX  macro  arch/x86/include/asm/processor.h  870  #define TASK_SIZE_MAX ((1UL << 47) - PAGE_SIZE)
STACK_TOP  macro  arch/x86/include/asm/processor.h  883  #define STACK_TOP TASK_SIZE
STACK_TOP_MAX  macro  arch/x86/include/asm/processor.h  884  #define STACK_TOP_MAX TASK_SIZE_MAX
INIT_THREAD  macro  arch/x86/include/asm/processor.h  886  #define INIT_THREAD { .sp0 = (unsigned long)&init_stack + sizeof(init_stack) }
INIT_TSS  macro  arch/x86/include/asm/processor.h  890  #define INIT_TSS { .x86_tss.sp0 = (unsigned long)&init_stack + sizeof(init_stack) }
thread_saved_pc  macro  arch/x86/include/asm/processor.h  898  #define thread_saved_pc(t) (*(unsigned long *)((t)->thread.sp - 8))
THREAD_SIZE_LONGS  macro  arch/x86/include/asm/processor.h  840  #define THREAD_SIZE_LONGS (THREAD_SIZE/sizeof(unsigned long))
KSTK_TOP  macro  arch/x86/include/asm/processor.h  841  #define KSTK_TOP(info) ({ unsigned long *__ptr = (unsigned long *)(info); (unsigned long)(&__ptr[THREAD_SIZE_LONGS]); })
task_pt_regs  macro  arch/x86/include/asm/processor.h  900  #define task_pt_regs(tsk) ((struct pt_regs *)(tsk)->thread.sp0 - 1)
KSTK_ESP  prototype  arch/x86/include/asm/processor.h  901  extern unsigned long KSTK_ESP(struct task_struct *task);
IA32_PAGE_OFFSET  macro  arch/x86/include/asm/processor.h  875  #define IA32_PAGE_OFFSET ((current->personality & ADDR_LIMIT_3GB) ? 0xc0000000 : 0xFFFFe000)
start_thread  prototype  arch/x86/include/asm/processor.h  910  extern void start_thread(struct pt_regs *regs,unsigned long new_ip,unsigned long new_sp);
TASK_UNMAPPED_BASE  macro  arch/x86/include/asm/processor.h  917  #define TASK_UNMAPPED_BASE (PAGE_ALIGN(TASK_SIZE / 3))
KSTK_EIP  macro  arch/x86/include/asm/processor.h  919  #define KSTK_EIP(task) (task_pt_regs(task)->ip)
GET_TSC_CTL  macro  arch/x86/include/asm/processor.h  922  #define GET_TSC_CTL(adr) get_tsc_mode((adr))
SET_TSC_CTL  macro  arch/x86/include/asm/processor.h  923  #define SET_TSC_CTL(val) set_tsc_mode((val))
get_tsc_mode  prototype  arch/x86/include/asm/processor.h  925  extern int get_tsc_mode(unsigned long adr);
set_tsc_mode  prototype  arch/x86/include/asm/processor.h  926  extern int set_tsc_mode(unsigned int val);
amd_get_nb_id  prototype  arch/x86/include/asm/processor.h  928  extern int amd_get_nb_id(int cpu);
aperfmperf  struct  arch/x86/include/asm/processor.h  930  struct aperfmperf { u64 aperf, mperf; };
get_aperfmperf  function  arch/x86/include/asm/processor.h  934  static inline void get_aperfmperf(struct aperfmperf *am)
APERFMPERF_SHIFT  macro  arch/x86/include/asm/processor.h  942  #define APERFMPERF_SHIFT 10
calc_aperfmperf_ratio  function  arch/x86/include/asm/processor.h  945  unsigned long calc_aperfmperf_ratio(struct aperfmperf *old,struct aperfmperf *new)
cpu_has_amd_erratum  macro  arch/x86/include/asm/processor.h  976  #define cpu_has_amd_erratum(x) (false)
AMD_LEGACY_ERRATUM  macro  arch/x86/include/asm/processor.h  967  #define AMD_LEGACY_ERRATUM(...) { -1,__VA_ARGS__,0 }
AMD_OSVW_ERRATUM  macro  arch/x86/include/asm/processor.h  968  #define AMD_OSVW_ERRATUM(osvw_id,...) { osvw_id,__VA_ARGS__,0 }
AMD_MODEL_RANGE  macro  arch/x86/include/asm/processor.h  969  #define AMD_MODEL_RANGE(f,m_start,s_start,m_end,s_end) ((f << 24) | (m_start << 16) | (s_start << 12) | (m_end << 4) | (s_end))
AMD_MODEL_RANGE_FAMILY  macro  arch/x86/include/asm/processor.h  971  #define AMD_MODEL_RANGE_FAMILY(range) (((range) >> 24) & 0xff)
AMD_MODEL_RANGE_START  macro  arch/x86/include/asm/processor.h  972  #define AMD_MODEL_RANGE_START(range) (((range) >> 12) & 0xfff)
AMD_MODEL_RANGE_END  macro  arch/x86/include/asm/processor.h  973  #define AMD_MODEL_RANGE_END(range) ((range) & 0xfff)
arch_align_stack  prototype  arch/x86/include/asm/processor.h  979  extern unsigned long arch_align_stack(unsigned long sp);
free_init_pages  prototype  arch/x86/include/asm/processor.h  980  extern void free_init_pages(char *what,unsigned long begin,unsigned long end);
default_idle  prototype  arch/x86/include/asm/processor.h  982  void default_idle(void);
set_pm_idle_to_default  prototype  arch/x86/include/asm/processor.h  983  bool set_pm_idle_to_default(void);
stop_this_cpu  prototype  arch/x86/include/asm/processor.h  985  void stop_this_cpu(void *dummy);
__LINUX__AIO_H  macro  include/linux/aio.h  2  #define __LINUX__AIO_H
AIO_MAXSEGS  macro  include/linux/aio.h  12  #define AIO_MAXSEGS 4
AIO_KIOGRP_NR_ATOMIC  macro  include/linux/aio.h  13  #define AIO_KIOGRP_NR_ATOMIC 8
KIOCB_C_CANCELLED  macro  include/linux/aio.h  23  #define KIOCB_C_CANCELLED 0x01
KIOCB_C_COMPLETE  macro  include/linux/aio.h  24  #define KIOCB_C_COMPLETE 0x02
KIOCB_SYNC_KEY  macro  include/linux/aio.h  26  #define KIOCB_SYNC_KEY (~0U)
KIF_KICKED  macro  include/linux/aio.h  35  #define KIF_KICKED 1
KIF_CANCELLED  macro  include/linux/aio.h  36  #define KIF_CANCELLED 2
kiocbTryLock  macro  include/linux/aio.h  38  #define kiocbTryLock(iocb) test_and_set_bit(KIF_LOCKED,&(iocb)->ki_flags)
kiocbTryKick  macro  include/linux/aio.h  39  #define kiocbTryKick(iocb) test_and_set_bit(KIF_KICKED,&(iocb)->ki_flags)
kiocbSetLocked  macro  include/linux/aio.h  41  #define kiocbSetLocked(iocb) set_bit(KIF_LOCKED,&(iocb)->ki_flags)
kiocbSetKicked  macro  include/linux/aio.h  42  #define kiocbSetKicked(iocb) set_bit(KIF_KICKED,&(iocb)->ki_flags)
kiocbSetCancelled  macro  include/linux/aio.h  43  #define kiocbSetCancelled(iocb) set_bit(KIF_CANCELLED,&(iocb)->ki_flags)
kiocbClearLocked  macro  include/linux/aio.h  45  #define kiocbClearLocked(iocb) clear_bit(KIF_LOCKED,&(iocb)->ki_flags)
kiocbClearKicked  macro  include/linux/aio.h  46  #define kiocbClearKicked(iocb) clear_bit(KIF_KICKED,&(iocb)->ki_flags)
kiocbClearCancelled  macro  include/linux/aio.h  47  #define kiocbClearCancelled(iocb) clear_bit(KIF_CANCELLED,&(iocb)->ki_flags)
kiocbIsLocked  macro  include/linux/aio.h  49  #define kiocbIsLocked(iocb) test_bit(KIF_LOCKED,&(iocb)->ki_flags)
kiocbIsKicked  macro  include/linux/aio.h  50  #define kiocbIsKicked(iocb) test_bit(KIF_KICKED,&(iocb)->ki_flags)
kiocbIsCancelled  macro  include/linux/aio.h  51  #define kiocbIsCancelled(iocb) test_bit(KIF_CANCELLED,&(iocb)->ki_flags)
kiocb  struct  include/linux/aio.h  87  struct kiocb { struct list_head ki_run_list; unsigned long ki_flags; int ki_users; unsigned ki_key; struct file *ki_filp; struct kioctx *ki_ctx; int (*ki_cancel)(struct kiocb *, struct io_event *); ssize_t (*ki_retry)(struct kiocb *); void (*ki_dtor)(struct kiocb *); union { void __user *user; struct task_struct *tsk; } ki_obj; __u64 ki_user_data; loff_t ki_pos; unsigned short ki_opcode; size_t ki_nbytes; char __user *ki_buf; size_t ki_left; struct iovec ki_inline_vec; struct iovec *ki_iovec; unsigned long ki_nr_segs; unsigned long ki_cur_seg; struct list_head ki_list; struct list_head ki_batch; struct eventfd_ctx *ki_eventfd; };
is_sync_kiocb  macro  include/linux/aio.h  129  #define is_sync_kiocb(iocb) ((iocb)->ki_key == KIOCB_SYNC_KEY)
init_sync_kiocb  macro  include/linux/aio.h  130  #define init_sync_kiocb(x,filp) do { struct task_struct *tsk = current; (x)->ki_flags = 0; (x)->ki_users = 1; (x)->ki_key = KIOCB_SYNC_KEY; (x)->ki_filp = (filp); (x)->ki_ctx = NULL; (x)->ki_cancel = NULL; (x)->ki_retry = NULL; (x)->ki_dtor = NULL; (x)->ki_obj.tsk = tsk; (x)->ki_user_data = 0; (x)->private = NULL; } while (0)
AIO_RING_MAGIC  macro  include/linux/aio.h  146  #define AIO_RING_MAGIC 0xa10a10a1
AIO_RING_COMPAT_FEATURES  macro  include/linux/aio.h  147  #define AIO_RING_COMPAT_FEATURES 1
AIO_RING_INCOMPAT_FEATURES  macro  include/linux/aio.h  148  #define AIO_RING_INCOMPAT_FEATURES 0
aio_ring  struct  include/linux/aio.h  149  struct aio_ring { unsigned id; unsigned nr; unsigned head; unsigned tail; unsigned magic; unsigned compat_features; unsigned incompat_features; unsigned header_length; struct io_event io_events[0]; };
aio_ring_avail  macro  include/linux/aio.h  164  #define aio_ring_avail(info,ring) (((ring)->head + (info)->nr - 1 - (ring)->tail) % (info)->nr)
AIO_RING_PAGES  macro  include/linux/aio.h  166  #define AIO_RING_PAGES 8
aio_ring_info  struct  include/linux/aio.h  167  struct aio_ring_info { unsigned long mmap_base; unsigned long mmap_size; struct page **ring_pages; spinlock_t ring_lock; long nr_pages; unsigned nr, tail; struct page *internal_pages[AIO_RING_PAGES]; };
kioctx  struct  include/linux/aio.h  180  struct kioctx { atomic_t users; int dead; struct mm_struct *mm; unsigned long user_id; struct hlist_node list; wait_queue_head_t wait; spinlock_t ctx_lock; int reqs_active; struct list_head active_reqs; struct list_head run_list; unsigned max_reqs; struct aio_ring_info ring_info; struct delayed_work wq; struct rcu_head rcu_head; };
wait_on_sync_kiocb  function  include/linux/aio.h  220  static inline ssize_t wait_on_sync_kiocb(struct kiocb *iocb) { return 0; }
aio_put_req  function  include/linux/aio.h  221  static inline int aio_put_req(struct kiocb *iocb) { return 0; }
kick_iocb  function  include/linux/aio.h  222  static inline void kick_iocb(struct kiocb *iocb) { }
aio_complete  function  include/linux/aio.h  223  static inline int aio_complete(struct kiocb *iocb,long res,long res2) { return 0; }
exit_aio  function  include/linux/aio.h  225  static inline void exit_aio(struct mm_struct *mm) { }
do_io_submit  function  include/linux/aio.h  226  static inline long do_io_submit(aio_context_t ctx_id,long nr,struct iocb __user * __user *iocbpp,bool compat) { return 0; }
list_kiocb  function  include/linux/aio.h  231  static inline struct kiocb *list_kiocb(struct list_head *h)
_LINUX_RWSEM_H  macro  include/linux/rwsem.h  8  #define _LINUX_RWSEM_H
rw_semaphore  struct  include/linux/rwsem.h  25  struct rw_semaphore { long count; raw_spinlock_t wait_lock; struct list_head wait_list; struct lockdep_map dep_map; };
rwsem_down_read_failed  prototype  include/linux/rwsem.h  34  extern struct rw_semaphore *rwsem_down_read_failed(struct rw_semaphore *sem);
rwsem_down_write_failed  prototype  include/linux/rwsem.h  35  extern struct rw_semaphore *rwsem_down_write_failed(struct rw_semaphore *sem);
rwsem_wake  prototype  include/linux/rwsem.h  36  extern struct rw_semaphore *rwsem_wake(struct rw_semaphore *);
rwsem_downgrade_wake  prototype  include/linux/rwsem.h  37  extern struct rw_semaphore *rwsem_downgrade_wake(struct rw_semaphore *sem);
rwsem_is_locked  function  include/linux/rwsem.h  43  static inline int rwsem_is_locked(struct rw_semaphore *sem)
__RWSEM_DEP_MAP_INIT  macro  include/linux/rwsem.h  55  # define __RWSEM_DEP_MAP_INIT(lockname)
__RWSEM_INITIALIZER  macro  include/linux/rwsem.h  58  #define __RWSEM_INITIALIZER(name) { RWSEM_UNLOCKED_VALUE, __RAW_SPIN_LOCK_UNLOCKED(name.wait_lock), LIST_HEAD_INIT((name).wait_list) __RWSEM_DEP_MAP_INIT(name) }
DECLARE_RWSEM  macro  include/linux/rwsem.h  64  #define DECLARE_RWSEM(name) struct rw_semaphore name = __RWSEM_INITIALIZER(name)
__init_rwsem  prototype  include/linux/rwsem.h  67  extern void __init_rwsem(struct rw_semaphore *sem,const char *name,struct lock_class_key *key);
init_rwsem  macro  include/linux/rwsem.h  70  #define init_rwsem(sem) do { static struct lock_class_key __key; __init_rwsem((sem), #sem, &__key); } while (0)
down_read  prototype  include/linux/rwsem.h  80  extern void down_read(struct rw_semaphore *sem);
down_read_trylock  prototype  include/linux/rwsem.h  85  extern int down_read_trylock(struct rw_semaphore *sem);
down_write  prototype  include/linux/rwsem.h  90  extern void down_write(struct rw_semaphore *sem);
down_write_trylock  prototype  include/linux/rwsem.h  95  extern int down_write_trylock(struct rw_semaphore *sem);
up_read  prototype  include/linux/rwsem.h  100  extern void up_read(struct rw_semaphore *sem);
up_write  prototype  include/linux/rwsem.h  105  extern void up_write(struct rw_semaphore *sem);
downgrade_write  prototype  include/linux/rwsem.h  110  extern void downgrade_write(struct rw_semaphore *sem);
down_read_nested  macro  include/linux/rwsem.h  129  # define down_read_nested(sem,subclass) down_read(sem)
down_write_nested  macro  include/linux/rwsem.h  130  # define down_write_nested(sem,subclass) down_write(sem)
_ASM_X86_CURRENT_H  macro  arch/x86/include/asm/current.h  2  #define _ASM_X86_CURRENT_H
get_current  function  arch/x86/include/asm/current.h  12  static __always_inline struct task_struct *get_current(void)
current  macro  arch/x86/include/asm/current.h  17  #define current get_current()
_LINUX_WORKQUEUE_H  macro  include/linux/workqueue.h  6  #define _LINUX_WORKQUEUE_H
work_data_bits  macro  include/linux/workqueue.h  24  #define work_data_bits(work) ((unsigned long *)(&(work)->data))
work_struct  struct  include/linux/workqueue.h  79  struct work_struct { atomic_long_t data; struct list_head entry; work_func_t func; struct lockdep_map lockdep_map; };
WORK_DATA_INIT  macro  include/linux/workqueue.h  88  #define WORK_DATA_INIT() ATOMIC_LONG_INIT(WORK_STRUCT_NO_CPU)
WORK_DATA_STATIC_INIT  macro  include/linux/workqueue.h  89  #define WORK_DATA_STATIC_INIT() ATOMIC_LONG_INIT(WORK_STRUCT_NO_CPU | WORK_STRUCT_STATIC)
delayed_work  struct  include/linux/workqueue.h  92  struct delayed_work { struct work_struct work; struct timer_list timer; };
to_delayed_work  function  include/linux/workqueue.h  97  static inline struct delayed_work *to_delayed_work(struct work_struct *work)
execute_work  struct  include/linux/workqueue.h  102  struct execute_work { struct work_struct work; };
__WORK_INIT_LOCKDEP_MAP  macro  include/linux/workqueue.h  115  #define __WORK_INIT_LOCKDEP_MAP(n,k)
__WORK_INITIALIZER  macro  include/linux/workqueue.h  118  #define __WORK_INITIALIZER(n,f) { .data = WORK_DATA_STATIC_INIT(), .entry	= { &(n).entry, &(n).entry }, .func = (f), __WORK_INIT_LOCKDEP_MAP(#n, &(n)) }
__DELAYED_WORK_INITIALIZER  macro  include/linux/workqueue.h  125  #define __DELAYED_WORK_INITIALIZER(n,f) { .work = __WORK_INITIALIZER((n).work, (f)), .timer = TIMER_INITIALIZER(NULL, 0, 0), }
__DEFERRED_WORK_INITIALIZER  macro  include/linux/workqueue.h  130  #define __DEFERRED_WORK_INITIALIZER(n,f) { .work = __WORK_INITIALIZER((n).work, (f)), .timer = TIMER_DEFERRED_INITIALIZER(NULL, 0, 0), }
DECLARE_WORK  macro  include/linux/workqueue.h  135  #define DECLARE_WORK(n,f) struct work_struct n = __WORK_INITIALIZER(n, f)
DECLARE_DELAYED_WORK  macro  include/linux/workqueue.h  138  #define DECLARE_DELAYED_WORK(n,f) struct delayed_work n = __DELAYED_WORK_INITIALIZER(n, f)
DECLARE_DEFERRED_WORK  macro  include/linux/workqueue.h  141  #define DECLARE_DEFERRED_WORK(n,f) struct delayed_work n = __DEFERRED_WORK_INITIALIZER(n, f)
PREPARE_WORK  macro  include/linux/workqueue.h  147  #define PREPARE_WORK(_work,_func) do { (_work)->func = (_func); } while (0)
PREPARE_DELAYED_WORK  macro  include/linux/workqueue.h  152  #define PREPARE_DELAYED_WORK(_work,_func) PREPARE_WORK(&(_work)->work, (_func))
__init_work  function  include/linux/workqueue.h  163  static inline void __init_work(struct work_struct *work,int onstack) { }
destroy_work_on_stack  function  include/linux/workqueue.h  164  static inline void destroy_work_on_stack(struct work_struct *work) { }
work_static  function  include/linux/workqueue.h  165  static inline unsigned int work_static(struct work_struct *work) { return 0; }
__INIT_WORK  macro  include/linux/workqueue.h  187  #define __INIT_WORK(_work,_func,_onstack) do { __init_work((_work), _onstack); (_work)->data = (atomic_long_t) WORK_DATA_INIT(); INIT_LIST_HEAD(&(_work)->entry); PREPARE_WORK((_work), (_func)); } while (0)
INIT_WORK  macro  include/linux/workqueue.h  196  #define INIT_WORK(_work,_func) do { __INIT_WORK((_work), (_func), 0); } while (0)
INIT_WORK_ONSTACK  macro  include/linux/workqueue.h  201  #define INIT_WORK_ONSTACK(_work,_func) do { __INIT_WORK((_work), (_func), 1); } while (0)
INIT_DELAYED_WORK  macro  include/linux/workqueue.h  206  #define INIT_DELAYED_WORK(_work,_func) do { INIT_WORK(&(_work)->work, (_func)); init_timer(&(_work)->timer); } while (0)
INIT_DELAYED_WORK_ONSTACK  macro  include/linux/workqueue.h  212  #define INIT_DELAYED_WORK_ONSTACK(_work,_func) do { INIT_WORK_ONSTACK(&(_work)->work, (_func)); init_timer_on_stack(&(_work)->timer); } while (0)
INIT_DELAYED_WORK_DEFERRABLE  macro  include/linux/workqueue.h  218  #define INIT_DELAYED_WORK_DEFERRABLE(_work,_func) do { INIT_WORK(&(_work)->work, (_func)); init_timer_deferrable(&(_work)->timer); } while (0)
work_pending  macro  include/linux/workqueue.h  228  #define work_pending(work) test_bit(WORK_STRUCT_PENDING_BIT, work_data_bits(work))
delayed_work_pending  macro  include/linux/workqueue.h  236  #define delayed_work_pending(w) work_pending(&(w)->work)
work_clear_pending  macro  include/linux/workqueue.h  243  #define work_clear_pending(work) clear_bit(WORK_STRUCT_PENDING_BIT, work_data_bits(work))
WQ_UNBOUND_MAX_ACTIVE  macro  include/linux/workqueue.h  267  #define WQ_UNBOUND_MAX_ACTIVE max_t(int, WQ_MAX_ACTIVE, num_possible_cpus() * WQ_MAX_UNBOUND_PER_CPU)
alloc_workqueue  macro  include/linux/workqueue.h  338  #define alloc_workqueue(fmt,flags,max_active,args...) __alloc_workqueue_key((fmt), (flags), (max_active), NULL, NULL, ##args)
alloc_ordered_workqueue  macro  include/linux/workqueue.h  356  #define alloc_ordered_workqueue(fmt,flags,args...) alloc_workqueue(fmt, WQ_UNBOUND | (flags), 1, ##args)
create_workqueue  macro  include/linux/workqueue.h  359  #define create_workqueue(name) alloc_workqueue((name), WQ_MEM_RECLAIM, 1)
create_freezable_workqueue  macro  include/linux/workqueue.h  361  #define create_freezable_workqueue(name) alloc_workqueue((name), WQ_FREEZABLE | WQ_UNBOUND | WQ_MEM_RECLAIM, 1)
create_singlethread_workqueue  macro  include/linux/workqueue.h  363  #define create_singlethread_workqueue(name) alloc_workqueue((name), WQ_UNBOUND | WQ_MEM_RECLAIM, 1)
destroy_workqueue  prototype  include/linux/workqueue.h  366  extern void destroy_workqueue(struct workqueue_struct *wq);
queue_work  prototype  include/linux/workqueue.h  368  extern int queue_work(struct workqueue_struct *wq,struct work_struct *work);
queue_work_on  prototype  include/linux/workqueue.h  369  extern int queue_work_on(int cpu,struct workqueue_struct *wq,struct work_struct *work);
queue_delayed_work  prototype  include/linux/workqueue.h  371  extern int queue_delayed_work(struct workqueue_struct *wq,struct delayed_work *work, unsigned long delay);
queue_delayed_work_on  prototype  include/linux/workqueue.h  373  extern int queue_delayed_work_on(int cpu,struct workqueue_struct *wq,struct delayed_work *work, unsigned long delay);
flush_workqueue  prototype  include/linux/workqueue.h  376  extern void flush_workqueue(struct workqueue_struct *wq);
drain_workqueue  prototype  include/linux/workqueue.h  377  extern void drain_workqueue(struct workqueue_struct *wq);
flush_scheduled_work  prototype  include/linux/workqueue.h  378  extern void flush_scheduled_work(void);
schedule_work  prototype  include/linux/workqueue.h  380  extern int schedule_work(struct work_struct *work);
schedule_work_on  prototype  include/linux/workqueue.h  381  extern int schedule_work_on(int cpu,struct work_struct *work);
schedule_delayed_work  prototype  include/linux/workqueue.h  382  extern int schedule_delayed_work(struct delayed_work *work,unsigned long delay);
schedule_delayed_work_on  prototype  include/linux/workqueue.h  383  extern int schedule_delayed_work_on(int cpu,struct delayed_work *work,unsigned long delay);
schedule_on_each_cpu  prototype  include/linux/workqueue.h  385  extern int schedule_on_each_cpu(work_func_t func);
keventd_up  prototype  include/linux/workqueue.h  386  extern int keventd_up(void);
execute_in_process_context  prototype  include/linux/workqueue.h  388  int execute_in_process_context(work_func_t fn,struct execute_work *);
flush_work  prototype  include/linux/workqueue.h  390  extern bool flush_work(struct work_struct *work);
flush_work_sync  prototype  include/linux/workqueue.h  391  extern bool flush_work_sync(struct work_struct *work);
cancel_work_sync  prototype  include/linux/workqueue.h  392  extern bool cancel_work_sync(struct work_struct *work);
flush_delayed_work  prototype  include/linux/workqueue.h  394  extern bool flush_delayed_work(struct delayed_work *dwork);
flush_delayed_work_sync  prototype  include/linux/workqueue.h  395  extern bool flush_delayed_work_sync(struct delayed_work *work);
cancel_delayed_work_sync  prototype  include/linux/workqueue.h  396  extern bool cancel_delayed_work_sync(struct delayed_work *dwork);
workqueue_set_max_active  prototype  include/linux/workqueue.h  398  extern void workqueue_set_max_active(struct workqueue_struct *wq,int max_active);
workqueue_congested  prototype  include/linux/workqueue.h  400  extern bool workqueue_congested(unsigned int cpu,struct workqueue_struct *wq);
work_cpu  prototype  include/linux/workqueue.h  401  extern unsigned int work_cpu(struct work_struct *work);
work_busy  prototype  include/linux/workqueue.h  402  extern unsigned int work_busy(struct work_struct *work);
cancel_delayed_work  function  include/linux/workqueue.h  410  static inline bool cancel_delayed_work(struct delayed_work *work)
__cancel_delayed_work  function  include/linux/workqueue.h  425  static inline bool __cancel_delayed_work(struct delayed_work *work)
work_on_cpu  prototype  include/linux/workqueue.h  441  long work_on_cpu(unsigned int cpu,long (*fn)(void *),void *arg);
freeze_workqueues_begin  prototype  include/linux/workqueue.h  445  extern void freeze_workqueues_begin(void);
freeze_workqueues_busy  prototype  include/linux/workqueue.h  446  extern bool freeze_workqueues_busy(void);
thaw_workqueues  prototype  include/linux/workqueue.h  447  extern void thaw_workqueues(void);
_ASM_X86_ATOMIC_H  macro  arch/x86/include/asm/atomic.h  2  #define _ASM_X86_ATOMIC_H
ATOMIC_INIT  macro  arch/x86/include/asm/atomic.h  15  #define ATOMIC_INIT(i) { (i) }
atomic_read  function  arch/x86/include/asm/atomic.h  23  static inline int atomic_read(const atomic_t *v)
atomic_set  function  arch/x86/include/asm/atomic.h  35  static inline void atomic_set(atomic_t *v,int i)
atomic_add  function  arch/x86/include/asm/atomic.h  47  static inline void atomic_add(int i,atomic_t *v)
atomic_sub  function  arch/x86/include/asm/atomic.h  61  static inline void atomic_sub(int i,atomic_t *v)
atomic_sub_and_test  function  arch/x86/include/asm/atomic.h  77  static inline int atomic_sub_and_test(int i,atomic_t *v)
atomic_inc  function  arch/x86/include/asm/atomic.h  93  static inline void atomic_inc(atomic_t *v)
atomic_dec  function  arch/x86/include/asm/atomic.h  105  static inline void atomic_dec(atomic_t *v)
atomic_dec_and_test  function  arch/x86/include/asm/atomic.h  119  static inline int atomic_dec_and_test(atomic_t *v)
atomic_inc_and_test  function  arch/x86/include/asm/atomic.h  137  static inline int atomic_inc_and_test(atomic_t *v)
atomic_add_negative  function  arch/x86/include/asm/atomic.h  156  static inline int atomic_add_negative(int i,atomic_t *v)
atomic_add_return  function  arch/x86/include/asm/atomic.h  173  static inline int atomic_add_return(int i,atomic_t *v)
atomic_sub_return  function  arch/x86/include/asm/atomic.h  201  static inline int atomic_sub_return(int i,atomic_t *v)
atomic_inc_return  macro  arch/x86/include/asm/atomic.h  206  #define atomic_inc_return(v) (atomic_add_return(1,v))
atomic_dec_return  macro  arch/x86/include/asm/atomic.h  207  #define atomic_dec_return(v) (atomic_sub_return(1,v))
atomic_cmpxchg  function  arch/x86/include/asm/atomic.h  209  static inline int atomic_cmpxchg(atomic_t *v,int old,int new)
atomic_xchg  function  arch/x86/include/asm/atomic.h  214  static inline int atomic_xchg(atomic_t *v,int new)
__atomic_add_unless  function  arch/x86/include/asm/atomic.h  228  static inline int __atomic_add_unless(atomic_t *v,int a,int u)
atomic_dec_if_positive  function  arch/x86/include/asm/atomic.h  251  static inline int atomic_dec_if_positive(atomic_t *v)
atomic_inc_short  function  arch/x86/include/asm/atomic.h  274  static inline short int atomic_inc_short(short int *v)
atomic_or_long  function  arch/x86/include/asm/atomic.h  289  static inline void atomic_or_long(unsigned long *v1,unsigned long v2)
atomic_clear_mask  macro  arch/x86/include/asm/atomic.h  296  #define atomic_clear_mask(mask,addr) asm volatile(LOCK_PREFIX "andl %0,%1" : : "r" (~(mask)), "m" (*(addr)) : "memory")
atomic_set_mask  macro  arch/x86/include/asm/atomic.h  300  #define atomic_set_mask(mask,addr) asm volatile(LOCK_PREFIX "orl %0,%1" : : "r" ((unsigned)(mask)), "m" (*(addr)) : "memory")
smp_mb__before_atomic_dec  macro  arch/x86/include/asm/atomic.h  306  #define smp_mb__before_atomic_dec() barrier()
smp_mb__after_atomic_dec  macro  arch/x86/include/asm/atomic.h  307  #define smp_mb__after_atomic_dec() barrier()
smp_mb__before_atomic_inc  macro  arch/x86/include/asm/atomic.h  308  #define smp_mb__before_atomic_inc() barrier()
smp_mb__after_atomic_inc  macro  arch/x86/include/asm/atomic.h  309  #define smp_mb__after_atomic_inc() barrier()
_ASM_GENERIC_ATOMIC_LONG_H  macro  include/asm-generic/atomic-long.h  2  #define _ASM_GENERIC_ATOMIC_LONG_H
ATOMIC_LONG_INIT  macro  include/asm-generic/atomic-long.h  143  #define ATOMIC_LONG_INIT(i) ATOMIC_INIT(i)
atomic_long_read  function  include/asm-generic/atomic-long.h  144  static inline long atomic_long_read(atomic_long_t *l)
atomic_long_set  function  include/asm-generic/atomic-long.h  151  static inline void atomic_long_set(atomic_long_t *l,long i)
atomic_long_inc  function  include/asm-generic/atomic-long.h  158  static inline void atomic_long_inc(atomic_long_t *l)
atomic_long_dec  function  include/asm-generic/atomic-long.h  165  static inline void atomic_long_dec(atomic_long_t *l)
atomic_long_add  function  include/asm-generic/atomic-long.h  172  static inline void atomic_long_add(long i,atomic_long_t *l)
atomic_long_sub  function  include/asm-generic/atomic-long.h  179  static inline void atomic_long_sub(long i,atomic_long_t *l)
atomic_long_sub_and_test  function  include/asm-generic/atomic-long.h  186  static inline int atomic_long_sub_and_test(long i,atomic_long_t *l)
atomic_long_dec_and_test  function  include/asm-generic/atomic-long.h  193  static inline int atomic_long_dec_and_test(atomic_long_t *l)
atomic_long_inc_and_test  function  include/asm-generic/atomic-long.h  200  static inline int atomic_long_inc_and_test(atomic_long_t *l)
atomic_long_add_negative  function  include/asm-generic/atomic-long.h  207  static inline int atomic_long_add_negative(long i,atomic_long_t *l)
atomic_long_add_return  function  include/asm-generic/atomic-long.h  214  static inline long atomic_long_add_return(long i,atomic_long_t *l)
atomic_long_sub_return  function  include/asm-generic/atomic-long.h  221  static inline long atomic_long_sub_return(long i,atomic_long_t *l)
atomic_long_inc_return  function  include/asm-generic/atomic-long.h  228  static inline long atomic_long_inc_return(atomic_long_t *l)
atomic_long_dec_return  function  include/asm-generic/atomic-long.h  235  static inline long atomic_long_dec_return(atomic_long_t *l)
atomic_long_add_unless  function  include/asm-generic/atomic-long.h  242  static inline long atomic_long_add_unless(atomic_long_t *l,long a,long u)
atomic_long_inc_not_zero  macro  include/asm-generic/atomic-long.h  249  #define atomic_long_inc_not_zero(l) atomic_inc_not_zero((atomic_t *)(l))
atomic_long_cmpxchg  macro  include/asm-generic/atomic-long.h  251  #define atomic_long_cmpxchg(l,old,new) (atomic_cmpxchg((atomic_t *)(l), (old), (new)))
atomic_long_xchg  macro  include/asm-generic/atomic-long.h  253  #define atomic_long_xchg(v,new) (atomic_xchg((atomic_t *)(v), (new)))
_ASM_GENERIC_ATOMIC64_H  macro  include/asm-generic/atomic64.h  13  #define _ASM_GENERIC_ATOMIC64_H
ATOMIC64_INIT  macro  include/asm-generic/atomic64.h  19  #define ATOMIC64_INIT(i) { (i) }
atomic64_read  prototype  include/asm-generic/atomic64.h  21  extern long long atomic64_read(const atomic64_t *v);
atomic64_set  prototype  include/asm-generic/atomic64.h  22  extern void atomic64_set(atomic64_t *v,long long i);
atomic64_add  prototype  include/asm-generic/atomic64.h  23  extern void atomic64_add(long long a,atomic64_t *v);
atomic64_add_return  prototype  include/asm-generic/atomic64.h  24  extern long long atomic64_add_return(long long a,atomic64_t *v);
atomic64_sub  prototype  include/asm-generic/atomic64.h  25  extern void atomic64_sub(long long a,atomic64_t *v);
atomic64_sub_return  prototype  include/asm-generic/atomic64.h  26  extern long long atomic64_sub_return(long long a,atomic64_t *v);
atomic64_dec_if_positive  prototype  include/asm-generic/atomic64.h  27  extern long long atomic64_dec_if_positive(atomic64_t *v);
atomic64_cmpxchg  prototype  include/asm-generic/atomic64.h  28  extern long long atomic64_cmpxchg(atomic64_t *v,long long o,long long n);
atomic64_xchg  prototype  include/asm-generic/atomic64.h  29  extern long long atomic64_xchg(atomic64_t *v,long long new);
atomic64_add_unless  prototype  include/asm-generic/atomic64.h  30  extern int atomic64_add_unless(atomic64_t *v,long long a,long long u);
atomic64_add_negative  macro  include/asm-generic/atomic64.h  32  #define atomic64_add_negative(a,v) (atomic64_add_return((a),(v)) < 0)
atomic64_inc  macro  include/asm-generic/atomic64.h  33  #define atomic64_inc(v) atomic64_add(1LL,(v))
atomic64_inc_return  macro  include/asm-generic/atomic64.h  34  #define atomic64_inc_return(v) atomic64_add_return(1LL,(v))
atomic64_inc_and_test  macro  include/asm-generic/atomic64.h  35  #define atomic64_inc_and_test(v) (atomic64_inc_return(v) == 0)
atomic64_sub_and_test  macro  include/asm-generic/atomic64.h  36  #define atomic64_sub_and_test(a,v) (atomic64_sub_return((a),(v)) == 0)
atomic64_dec  macro  include/asm-generic/atomic64.h  37  #define atomic64_dec(v) atomic64_sub(1LL,(v))
atomic64_dec_return  macro  include/asm-generic/atomic64.h  38  #define atomic64_dec_return(v) atomic64_sub_return(1LL,(v))
atomic64_dec_and_test  macro  include/asm-generic/atomic64.h  39  #define atomic64_dec_and_test(v) (atomic64_dec_return((v)) == 0)
atomic64_inc_not_zero  macro  include/asm-generic/atomic64.h  40  #define atomic64_inc_not_zero(v) atomic64_add_unless((v),1LL,0LL)
_ASM_X86_PAGE_DEFS_H  macro  arch/x86/include/asm/page_types.h  2  #define _ASM_X86_PAGE_DEFS_H
PAGE_SHIFT  macro  arch/x86/include/asm/page_types.h  8  #define PAGE_SHIFT 12
PAGE_SIZE  macro  arch/x86/include/asm/page_types.h  9  #define PAGE_SIZE (_AC(1,UL) << PAGE_SHIFT)
PAGE_MASK  macro  arch/x86/include/asm/page_types.h  10  #define PAGE_MASK (~(PAGE_SIZE-1))
__PHYSICAL_MASK  macro  arch/x86/include/asm/page_types.h  12  #define __PHYSICAL_MASK ((phys_addr_t)((1ULL << __PHYSICAL_MASK_SHIFT) - 1))
__VIRTUAL_MASK  macro  arch/x86/include/asm/page_types.h  13  #define __VIRTUAL_MASK ((1UL << __VIRTUAL_MASK_SHIFT) - 1)
PHYSICAL_PAGE_MASK  macro  arch/x86/include/asm/page_types.h  18  #define PHYSICAL_PAGE_MASK (((signed long)PAGE_MASK) & __PHYSICAL_MASK)
PMD_PAGE_SIZE  macro  arch/x86/include/asm/page_types.h  20  #define PMD_PAGE_SIZE (_AC(1,UL) << PMD_SHIFT)
PMD_PAGE_MASK  macro  arch/x86/include/asm/page_types.h  21  #define PMD_PAGE_MASK (~(PMD_PAGE_SIZE-1))
HPAGE_SHIFT  macro  arch/x86/include/asm/page_types.h  23  #define HPAGE_SHIFT PMD_SHIFT
HPAGE_SIZE  macro  arch/x86/include/asm/page_types.h  24  #define HPAGE_SIZE (_AC(1,UL) << HPAGE_SHIFT)
HPAGE_MASK  macro  arch/x86/include/asm/page_types.h  25  #define HPAGE_MASK (~(HPAGE_SIZE - 1))
HUGETLB_PAGE_ORDER  macro  arch/x86/include/asm/page_types.h  26  #define HUGETLB_PAGE_ORDER (HPAGE_SHIFT - PAGE_SHIFT)
HUGE_MAX_HSTATE  macro  arch/x86/include/asm/page_types.h  28  #define HUGE_MAX_HSTATE 2
PAGE_OFFSET  macro  arch/x86/include/asm/page_types.h  30  #define PAGE_OFFSET ((unsigned long)__PAGE_OFFSET)
VM_DATA_DEFAULT_FLAGS  macro  arch/x86/include/asm/page_types.h  32  #define VM_DATA_DEFAULT_FLAGS (((current->personality & READ_IMPLIES_EXEC) ? VM_EXEC : 0 ) | VM_READ | VM_WRITE | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)
devmem_is_allowed  prototype  arch/x86/include/asm/page_types.h  44  extern int devmem_is_allowed(unsigned long pagenr);
get_max_mapped  function  arch/x86/include/asm/page_types.h  49  static inline phys_addr_t get_max_mapped(void)
init_memory_mapping  prototype  arch/x86/include/asm/page_types.h  54  extern unsigned long init_memory_mapping(unsigned long start,unsigned long end);
initmem_init  prototype  arch/x86/include/asm/page_types.h  57  extern void initmem_init(void);
_ASM_X86_PAGE_64_H  macro  arch/x86/include/asm/page_64.h  2  #define _ASM_X86_PAGE_64_H
_ASM_X86_PAGE_32_H  macro  arch/x86/include/asm/page_32.h  2  #define _ASM_X86_PAGE_32_H
HAVE_ARCH_HUGETLB_UNMAPPED_AREA  macro  arch/x86/include/asm/page_32.h  9  #define HAVE_ARCH_HUGETLB_UNMAPPED_AREA
__phys_addr_nodebug  macro  arch/x86/include/asm/page_32.h  12  #define __phys_addr_nodebug(x) ((x) - PAGE_OFFSET)
__phys_addr  macro  arch/x86/include/asm/page_32.h  16  #define __phys_addr(x) __phys_addr_nodebug(x)
__phys_reloc_hide  macro  arch/x86/include/asm/page_32.h  18  #define __phys_reloc_hide(x) RELOC_HIDE((x),0)
clear_page  function  arch/x86/include/asm/page_32.h  39  static inline void clear_page(void *page)
copy_page  function  arch/x86/include/asm/page_32.h  44  static inline void copy_page(void *to,void *from)
__ASM_MEMORY_MODEL_H  macro  include/asm-generic/memory_model.h  2  #define __ASM_MEMORY_MODEL_H
ARCH_PFN_OFFSET  macro  include/asm-generic/memory_model.h  9  #define ARCH_PFN_OFFSET (0UL)
arch_pfn_to_nid  macro  include/asm-generic/memory_model.h  15  #define arch_pfn_to_nid(pfn) pfn_to_nid(pfn)
arch_local_page_offset  macro  include/asm-generic/memory_model.h  19  #define arch_local_page_offset(pfn,nid) ((pfn) - NODE_DATA(nid)->node_start_pfn)
__pfn_to_page  macro  include/asm-generic/memory_model.h  65  #define __pfn_to_page(pfn) ({	unsigned long __pfn = (pfn); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; })
__page_to_pfn  macro  include/asm-generic/memory_model.h  59  #define __page_to_pfn(pg) ({	const struct page *__pg = (pg); int __sec = page_to_section(__pg); (unsigned long)(__pg - __section_mem_map_addr(__nr_to_section(__sec))); })
page_to_pfn  macro  include/asm-generic/memory_model.h  72  #define page_to_pfn __page_to_pfn
pfn_to_page  macro  include/asm-generic/memory_model.h  73  #define pfn_to_page __pfn_to_page
__ASM_GENERIC_GETORDER_H  macro  include/asm-generic/getorder.h  2  #define __ASM_GENERIC_GETORDER_H
__get_order  function  include/asm-generic/getorder.h  13  int __get_order(unsigned long size)
get_order  macro  include/asm-generic/getorder.h  49  #define get_order(n) ( __builtin_constant_p(n) ? ( ((n) == 0UL) ? BITS_PER_LONG - PAGE_SHIFT : (((n) < (1UL << PAGE_SHIFT)) ? 0 : ilog2((n) - 1) - PAGE_SHIFT + 1) ) : __get_order(n) )
_LINUX_SYSINFO_H  macro  include/linux/sysinfo.h  2  #define _LINUX_SYSINFO_H
SI_LOAD_SHIFT  macro  include/linux/sysinfo.h  6  #define SI_LOAD_SHIFT 16
sysinfo  struct  include/linux/sysinfo.h  7  struct sysinfo { __kernel_long_t uptime; __kernel_ulong_t loads[3]; __kernel_ulong_t totalram; __kernel_ulong_t freeram; __kernel_ulong_t sharedram; __kernel_ulong_t bufferram; __kernel_ulong_t totalswap; __kernel_ulong_t freeswap; __u16 procs; __u16 pad; __kernel_ulong_t totalhigh; __kernel_ulong_t freehigh; __u32 mem_unit; char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)]; };
_LINUX_LOG2_H  macro  include/linux/log2.h  13  #define _LINUX_LOG2_H
____ilog2_NaN  prototype  include/linux/log2.h  22  int ____ilog2_NaN(void);
__ilog2_u32  function  include/linux/log2.h  32  int __ilog2_u32(u32 n)
__ilog2_u64  function  include/linux/log2.h  40  int __ilog2_u64(u64 n)
is_power_of_2  function  include/linux/log2.h  52  bool is_power_of_2(unsigned long n)
__roundup_pow_of_two  function  include/linux/log2.h  61  unsigned long __roundup_pow_of_two(unsigned long n)
__rounddown_pow_of_two  function  include/linux/log2.h  70  unsigned long __rounddown_pow_of_two(unsigned long n)
ilog2  macro  include/linux/log2.h  85  #define ilog2(n) ( __builtin_constant_p(n) ? ( (n) < 1 ? ____ilog2_NaN() : (n) & (1ULL << 63) ? 63 : (n) & (1ULL << 62) ? 62 : (n) & (1ULL << 61) ? 61 : (n) & (1ULL << 60) ? 60 : (n) & (1ULL << 59) ? 59 : (n) & (1ULL << 58) ? 58 : (n) & (1ULL << 57) ? 57 : (n) & (1ULL << 56) ? 56 : (n) & (1ULL << 55) ? 55 : (n) & (1ULL << 54) ? 54 : (n) & (1ULL << 53) ? 53 : (n) & (1ULL << 52) ? 52 : (n) & (1ULL << 51) ? 51 : (n) & (1ULL << 50) ? 50 : (n) & (1ULL << 49) ? 49 : (n) & (1ULL << 48) ? 48 : (n) & (1ULL << 47) ? 47 : (n) & (1ULL << 46) ? 46 : (n) & (1ULL << 45) ? 45 : (n) & (1ULL << 44) ? 44 : (n) & (1ULL << 43) ? 43 : (n) & (1ULL << 42) ? 42 : (n) & (1ULL << 41) ? 41 : (n) & (1ULL << 40) ? 40 : (n) & (1ULL << 39) ? 39 : (n) & (1ULL << 38) ? 38 : (n) & (1ULL << 37) ? 37 : (n) & (1ULL << 36) ? 36 : (n) & (1ULL << 35) ? 35 : (n) & (1ULL << 34) ? 34 : (n) & (1ULL << 33) ? 33 : (n) & (1ULL << 32) ? 32 : (n) & (1ULL << 31) ? 31 : (n) & (1ULL << 30) ? 30 : (n) & (1ULL << 29) ? 29 : (n) & (1ULL << 28) ? 28 : (n) & (1ULL << 27) ? 27 : (n) & (1ULL << 26) ? 26 : (n) & (1ULL << 25) ? 25 : (n) & (1ULL << 24) ? 24 : (n) & (1ULL << 23) ? 23 : (n) & (1ULL << 22) ? 22 : (n) & (1ULL << 21) ? 21 : (n) & (1ULL << 20) ? 20 : (n) & (1ULL << 19) ? 19 : (n) & (1ULL << 18) ? 18 : (n) & (1ULL << 17) ? 17 : (n) & (1ULL << 16) ? 16 : (n) & (1ULL << 15) ? 15 : (n) & (1ULL << 14) ? 14 : (n) & (1ULL << 13) ? 13 : (n) & (1ULL << 12) ? 12 : (n) & (1ULL << 11) ? 11 : (n) & (1ULL << 10) ? 10 : (n) & (1ULL <<  9) ?  9 : (n) & (1ULL <<  8) ?  8 : (n) & (1ULL <<  7) ?  7 : (n) & (1ULL <<  6) ?  6 : (n) & (1ULL <<  5) ?  5 : (n) & (1ULL <<  4) ?  4 : (n) & (1ULL <<  3) ?  3 : (n) & (1ULL <<  2) ?  2 : (n) & (1ULL <<  1) ?  1 : (n) & (1ULL <<  0) ?  0 : ____ilog2_NaN() ) : (sizeof(n) <= 4) ? __ilog2_u32(n) : __ilog2_u64(n) )
roundup_pow_of_two  macro  include/linux/log2.h  168  #define roundup_pow_of_two(n) ( __builtin_constant_p(n) ? ( (n == 1) ? 1 : (1UL << (ilog2((n) - 1) + 1)) ) : __roundup_pow_of_two(n) )
rounddown_pow_of_two  macro  include/linux/log2.h  185  #define rounddown_pow_of_two(n) ( __builtin_constant_p(n) ? ( (1UL << ilog2(n))) : __rounddown_pow_of_two(n) )
order_base_2  macro  include/linux/log2.h  206  #define order_base_2(n) ilog2(roundup_pow_of_two(n))
__KERNEL_PRINTK__  macro  include/linux/printk.h  2  #define __KERNEL_PRINTK__
KERN_EMERG  macro  include/linux/printk.h  9  #define KERN_EMERG "<0>"
KERN_ALERT  macro  include/linux/printk.h  10  #define KERN_ALERT "<1>"
KERN_CRIT  macro  include/linux/printk.h  11  #define KERN_CRIT "<2>"
KERN_ERR  macro  include/linux/printk.h  12  #define KERN_ERR "<3>"
KERN_WARNING  macro  include/linux/printk.h  13  #define KERN_WARNING "<4>"
KERN_NOTICE  macro  include/linux/printk.h  14  #define KERN_NOTICE "<5>"
KERN_INFO  macro  include/linux/printk.h  15  #define KERN_INFO "<6>"
KERN_DEBUG  macro  include/linux/printk.h  16  #define KERN_DEBUG "<7>"
KERN_DEFAULT  macro  include/linux/printk.h  19  #define KERN_DEFAULT "<d>"
KERN_CONT  macro  include/linux/printk.h  25  #define KERN_CONT "<c>"
console_loglevel  macro  include/linux/printk.h  29  #define console_loglevel (console_printk[0])
default_message_loglevel  macro  include/linux/printk.h  30  #define default_message_loglevel (console_printk[1])
minimum_console_loglevel  macro  include/linux/printk.h  31  #define minimum_console_loglevel (console_printk[2])
default_console_loglevel  macro  include/linux/printk.h  32  #define default_console_loglevel (console_printk[3])
console_silent  function  include/linux/printk.h  34  static inline void console_silent(void)
console_verbose  function  include/linux/printk.h  39  static inline void console_verbose(void)
va_format  struct  include/linux/printk.h  45  struct va_format { const char *fmt; va_list *va; };
FW_BUG  macro  include/linux/printk.h  70  #define FW_BUG "[Firmware Bug]: "
FW_WARN  macro  include/linux/printk.h  71  #define FW_WARN "[Firmware Warn]: "
FW_INFO  macro  include/linux/printk.h  72  #define FW_INFO "[Firmware Info]: "
HW_ERR  macro  include/linux/printk.h  79  #define HW_ERR "[Hardware Error]: "
no_printk  function  include/linux/printk.h  86  int no_printk(const char *fmt,...)
early_printk  prototype  include/linux/printk.h  92  void early_printk(const char *fmt,...);
printk_needs_cpu  prototype  include/linux/printk.h  94  extern int printk_needs_cpu(int cpu);
printk_tick  prototype  include/linux/printk.h  95  extern void printk_tick(void);
vprintk_emit  prototype  include/linux/printk.h  99  int vprintk_emit(int facility,int level,const char *dict, size_t dictlen,const char *fmt, va_list args);
vprintk  function  include/linux/printk.h  137  int vprintk(const char *s,va_list args)
printk_emit  prototype  include/linux/printk.h  107  asmlinkage int printk_emit(int facility,int level,const char *dict, size_t dictlen,const char *fmt, ...);
printk  function  include/linux/printk.h  142  int printk(const char *s,...)
printk_sched  function  include/linux/printk.h  147  int printk_sched(const char *s,...)
__printk_ratelimit  prototype  include/linux/printk.h  124  extern int __printk_ratelimit(const char *func);
printk_ratelimit  function  include/linux/printk.h  151  static inline int printk_ratelimit(void)
printk_timed_ratelimit  function  include/linux/printk.h  155  static inline bool printk_timed_ratelimit(unsigned long *caller_jiffies,unsigned int interval_msec)
log_buf_kexec_setup  function  include/linux/printk.h  161  static inline void log_buf_kexec_setup(void)
setup_log_buf  function  include/linux/printk.h  165  static inline void setup_log_buf(int early)
pr_fmt  macro  include/linux/printk.h  173  #define pr_fmt(fmt) fmt
pr_emerg  macro  include/linux/printk.h  176  #define pr_emerg(fmt,...) printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
pr_alert  macro  include/linux/printk.h  178  #define pr_alert(fmt,...) printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
pr_crit  macro  include/linux/printk.h  180  #define pr_crit(fmt,...) printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
pr_err  macro  include/linux/printk.h  182  #define pr_err(fmt,...) printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
pr_warning  macro  include/linux/printk.h  184  #define pr_warning(fmt,...) printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
pr_warn  macro  include/linux/printk.h  186  #define pr_warn pr_warning
pr_notice  macro  include/linux/printk.h  187  #define pr_notice(fmt,...) printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
pr_info  macro  include/linux/printk.h  189  #define pr_info(fmt,...) printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
pr_cont  macro  include/linux/printk.h  191  #define pr_cont(fmt,...) printk(KERN_CONT fmt, ##__VA_ARGS__)
pr_devel  macro  include/linux/printk.h  199  #define pr_devel(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
pr_debug  macro  include/linux/printk.h  212  #define pr_debug(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
printk_once  macro  include/linux/printk.h  231  #define printk_once(fmt,...) no_printk(fmt, ##__VA_ARGS__)
pr_emerg_once  macro  include/linux/printk.h  235  #define pr_emerg_once(fmt,...) printk_once(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
pr_alert_once  macro  include/linux/printk.h  237  #define pr_alert_once(fmt,...) printk_once(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
pr_crit_once  macro  include/linux/printk.h  239  #define pr_crit_once(fmt,...) printk_once(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
pr_err_once  macro  include/linux/printk.h  241  #define pr_err_once(fmt,...) printk_once(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
pr_warn_once  macro  include/linux/printk.h  243  #define pr_warn_once(fmt,...) printk_once(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
pr_notice_once  macro  include/linux/printk.h  245  #define pr_notice_once(fmt,...) printk_once(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
pr_info_once  macro  include/linux/printk.h  247  #define pr_info_once(fmt,...) printk_once(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
pr_cont_once  macro  include/linux/printk.h  249  #define pr_cont_once(fmt,...) printk_once(KERN_CONT pr_fmt(fmt), ##__VA_ARGS__)
pr_debug_once  macro  include/linux/printk.h  256  #define pr_debug_once(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
printk_ratelimited  macro  include/linux/printk.h  275  #define printk_ratelimited(fmt,...) no_printk(fmt, ##__VA_ARGS__)
pr_emerg_ratelimited  macro  include/linux/printk.h  279  #define pr_emerg_ratelimited(fmt,...) printk_ratelimited(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
pr_alert_ratelimited  macro  include/linux/printk.h  281  #define pr_alert_ratelimited(fmt,...) printk_ratelimited(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
pr_crit_ratelimited  macro  include/linux/printk.h  283  #define pr_crit_ratelimited(fmt,...) printk_ratelimited(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
pr_err_ratelimited  macro  include/linux/printk.h  285  #define pr_err_ratelimited(fmt,...) printk_ratelimited(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
pr_warn_ratelimited  macro  include/linux/printk.h  287  #define pr_warn_ratelimited(fmt,...) printk_ratelimited(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
pr_notice_ratelimited  macro  include/linux/printk.h  289  #define pr_notice_ratelimited(fmt,...) printk_ratelimited(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
pr_info_ratelimited  macro  include/linux/printk.h  291  #define pr_info_ratelimited(fmt,...) printk_ratelimited(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
pr_debug_ratelimited  macro  include/linux/printk.h  299  #define pr_debug_ratelimited(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
hex_dump_to_buffer  prototype  include/linux/printk.h  310  extern void hex_dump_to_buffer(const void *buf,size_t len,int rowsize, int groupsize,char *linebuf, size_t linebuflen, bool ascii);
print_hex_dump  function  include/linux/printk.h  320  static inline void print_hex_dump(const char *level,const char *prefix_str,int prefix_type, int rowsize, int groupsize,const void *buf, size_t len, bool ascii)
print_hex_dump_bytes  function  include/linux/printk.h  325  static inline void print_hex_dump_bytes(const char *prefix_str,int prefix_type,const void *buf, size_t len)
_DYNAMIC_DEBUG_H  macro  include/linux/dynamic_debug.h  2  #define _DYNAMIC_DEBUG_H
_ddebug  struct  include/linux/dynamic_debug.h  9  struct _ddebug { const char *modname; const char *function; const char *filename; const char *format; unsigned int lineno:18; #define _DPRINTK_FLAGS_NONE 0 #define _DPRINTK_FLAGS_PRINT (1<<0) #define _DPRINTK_FLAGS_INCL_MODNAME (1<<1) #define _DPRINTK_FLAGS_INCL_FUNCNAME (1<<2) #define _DPRINTK_FLAGS_INCL_LINENO (1<<3) #define _DPRINTK_FLAGS_INCL_TID (1<<4) #define _DPRINTK_FLAGS_DEFAULT _DPRINTK_FLAGS_PRINT #define _DPRINTK_FLAGS_DEFAULT 0 unsigned int flags:8; } __attribute__((aligned(8)));
ddebug_add_module  prototype  include/linux/dynamic_debug.h  39  int ddebug_add_module(struct _ddebug *tab,unsigned int n,const char *modname);
ddebug_remove_module  function  include/linux/dynamic_debug.h  103  static inline int ddebug_remove_module(const char *mod)
__dynamic_pr_debug  prototype  include/linux/dynamic_debug.h  45  int __dynamic_pr_debug(struct _ddebug *descriptor,const char *fmt,...);
ddebug_dyndbg_module_param_cb  function  include/linux/dynamic_debug.h  108  static inline int ddebug_dyndbg_module_param_cb(char *param,char *val,const char *modname)
__dynamic_dev_dbg  prototype  include/linux/dynamic_debug.h  53  int __dynamic_dev_dbg(struct _ddebug *descriptor,const struct device *dev,const char *fmt, ...);
__dynamic_netdev_dbg  prototype  include/linux/dynamic_debug.h  59  int __dynamic_netdev_dbg(struct _ddebug *descriptor,const struct net_device *dev,const char *fmt, ...);
DEFINE_DYNAMIC_DEBUG_METADATA  macro  include/linux/dynamic_debug.h  63  #define DEFINE_DYNAMIC_DEBUG_METADATA(name,fmt) static struct _ddebug __used __aligned(8) __attribute__((section("__verbose"))) name = { .modname = KBUILD_MODNAME, .function = __func__, .filename = __FILE__, .format = (fmt), .lineno = __LINE__, .flags =  _DPRINTK_FLAGS_DEFAULT, }
dynamic_pr_debug  macro  include/linux/dynamic_debug.h  120  #define dynamic_pr_debug(fmt,...) do { if (0) printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__); } while (0)
dynamic_dev_dbg  macro  include/linux/dynamic_debug.h  122  #define dynamic_dev_dbg(dev,fmt,...) do { if (0) dev_printk(KERN_DEBUG, dev, fmt, ##__VA_ARGS__); } while (0)
dynamic_netdev_dbg  macro  include/linux/dynamic_debug.h  90  #define dynamic_netdev_dbg(dev,fmt,...) do { DEFINE_DYNAMIC_DEBUG_METADATA(descriptor, fmt); if (unlikely(descriptor.flags & _DPRINTK_FLAGS_PRINT)) __dynamic_netdev_dbg(&descriptor, dev, fmt, ##__VA_ARGS__); } while (0)
_ASM_X86_BYTEORDER_H  macro  arch/x86/include/asm/byteorder.h  2  #define _ASM_X86_BYTEORDER_H
_ASM_X86_DIV64_H  macro  arch/x86/include/asm/div64.h  2  #define _ASM_X86_DIV64_H
do_div  macro  arch/x86/include/asm/div64.h  21  #define do_div(n,base) ({ unsigned long __upper, __low, __high, __mod, __base; __base = (base); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __mod = n & (__base - 1); n >>= ilog2(__base); } else { asm("" : "=a" (__low), "=d" (__high) : "A" (n)); __upper = __high; if (__high) { __upper = __high % (__base); __high = __high / (__base); } asm("divl %2" : "=a" (__low), "=d" (__mod) : "rm" (__base), "0" (__low), "1" (__upper)); asm("" : "=A" (n) : "a" (__low), "d" (__high)); } __mod; })
div_u64_rem  macro  arch/x86/include/asm/div64.h  60  #define div_u64_rem div_u64_rem
__ASM_GENERIC_DELAY_H  macro  include/asm-generic/delay.h  2  #define __ASM_GENERIC_DELAY_H
__bad_udelay  prototype  include/asm-generic/delay.h  5  extern void __bad_udelay(void);
__bad_ndelay  prototype  include/asm-generic/delay.h  6  extern void __bad_ndelay(void);
__udelay  prototype  include/asm-generic/delay.h  8  extern void __udelay(unsigned long usecs);
__ndelay  prototype  include/asm-generic/delay.h  9  extern void __ndelay(unsigned long nsecs);
__const_udelay  prototype  include/asm-generic/delay.h  10  extern void __const_udelay(unsigned long xloops);
__delay  prototype  include/asm-generic/delay.h  11  extern void __delay(unsigned long loops);
udelay  macro  include/asm-generic/delay.h  19  #define udelay(n) ({ if (__builtin_constant_p(n)) { if ((n) / 20000 >= 1) __bad_udelay(); else __const_udelay((n) * 0x10c7ul); } else { __udelay(n); } })
__KMEMLEAK_H  macro  include/linux/kmemleak.h  22  #define __KMEMLEAK_H
kmemleak_alloc_recursive  function  include/linux/kmemleak.h  68  static inline void kmemleak_alloc_recursive(const void *ptr,size_t size,int min_count, unsigned long flags,gfp_t gfp)
kmemleak_free_recursive  function  include/linux/kmemleak.h  82  static inline void kmemleak_free_recursive(const void *ptr,unsigned long flags)
kmemleak_erase  function  include/linux/kmemleak.h  97  static inline void kmemleak_erase(void **ptr)
kmemleak_init  function  include/linux/kmemleak.h  61  static inline void kmemleak_init(void)
kmemleak_alloc  function  include/linux/kmemleak.h  64  static inline void kmemleak_alloc(const void *ptr,size_t size,int min_count,gfp_t gfp)
kmemleak_alloc_percpu  function  include/linux/kmemleak.h  73  static inline void kmemleak_alloc_percpu(const void __percpu *ptr,size_t size)
kmemleak_free  function  include/linux/kmemleak.h  76  static inline void kmemleak_free(const void *ptr)
kmemleak_free_part  function  include/linux/kmemleak.h  79  static inline void kmemleak_free_part(const void *ptr,size_t size)
kmemleak_free_percpu  function  include/linux/kmemleak.h  85  static inline void kmemleak_free_percpu(const void __percpu *ptr)
kmemleak_not_leak  function  include/linux/kmemleak.h  88  static inline void kmemleak_not_leak(const void *ptr)
kmemleak_ignore  function  include/linux/kmemleak.h  91  static inline void kmemleak_ignore(const void *ptr)
kmemleak_scan_area  function  include/linux/kmemleak.h  94  static inline void kmemleak_scan_area(const void *ptr,size_t size,gfp_t gfp)
kmemleak_no_scan  function  include/linux/kmemleak.h  100  static inline void kmemleak_no_scan(const void *ptr)
_ASM_X86_CACHE_H  macro  arch/x86/include/asm/cache.h  2  #define _ASM_X86_CACHE_H
L1_CACHE_SHIFT  macro  arch/x86/include/asm/cache.h  7  #define L1_CACHE_SHIFT (CONFIG_X86_L1_CACHE_SHIFT)
L1_CACHE_BYTES  macro  arch/x86/include/asm/cache.h  8  #define L1_CACHE_BYTES (1 << L1_CACHE_SHIFT)
INTERNODE_CACHE_BYTES  macro  arch/x86/include/asm/cache.h  13  #define INTERNODE_CACHE_BYTES (1 << INTERNODE_CACHE_SHIFT)
_ASM_X86_STAT_H  macro  arch/x86/include/asm/stat.h  2  #define _ASM_X86_STAT_H
STAT_HAVE_NSEC  macro  arch/x86/include/asm/stat.h  4  #define STAT_HAVE_NSEC 1
stat  struct  arch/x86/include/asm/stat.h  80  struct stat { unsigned long st_dev; unsigned long st_ino; unsigned long st_nlink; unsigned int st_mode; unsigned int st_uid; unsigned int st_gid; unsigned int __pad0; unsigned long st_rdev; long st_size; long st_blksize; long st_blocks; unsigned long st_atime; unsigned long st_atime_nsec; unsigned long st_mtime; unsigned long st_mtime_nsec; unsigned long st_ctime; unsigned long st_ctime_nsec; long __unused[3]; };
INIT_STRUCT_STAT_PADDING  macro  arch/x86/include/asm/stat.h  104  #define INIT_STRUCT_STAT_PADDING(st) do { st.__pad0 = 0; st.__unused[0] = 0; st.__unused[1] = 0; st.__unused[2] = 0; } while (0)
STAT64_HAS_BROKEN_ST_INO  macro  arch/x86/include/asm/stat.h  34  #define STAT64_HAS_BROKEN_ST_INO 1
stat64  struct  arch/x86/include/asm/stat.h  39  struct stat64 { unsigned long long st_dev; unsigned char __pad0[4]; unsigned long __st_ino; unsigned int st_mode; unsigned int st_nlink; unsigned long st_uid; unsigned long st_gid; unsigned long long st_rdev; unsigned char __pad3[4]; long long st_size; unsigned long st_blksize; unsigned long long st_blocks; unsigned long st_atime; unsigned long st_atime_nsec; unsigned long st_mtime; unsigned int st_mtime_nsec; unsigned long st_ctime; unsigned long st_ctime_nsec; unsigned long long st_ino; };
INIT_STRUCT_STAT64_PADDING  macro  arch/x86/include/asm/stat.h  73  #define INIT_STRUCT_STAT64_PADDING(st) do { memset(&st.__pad0, 0, sizeof(st.__pad0)); memset(&st.__pad3, 0, sizeof(st.__pad3)); } while (0)
__old_kernel_stat  struct  arch/x86/include/asm/stat.h  114  struct __old_kernel_stat { unsigned short st_dev; unsigned short st_ino; unsigned short st_mode; unsigned short st_nlink; unsigned short st_uid; unsigned short st_gid; unsigned short st_rdev; unsigned long st_size; unsigned long st_atime; unsigned long st_mtime; unsigned long st_ctime; unsigned int st_size; unsigned int st_atime; unsigned int st_mtime; unsigned int st_ctime; };
__must_be_array  macro  include/linux/compiler-intel.h  27  #define __must_be_array(a) 0
inline  macro  include/linux/compiler-gcc.h  55  # define inline inline notrace
__inline__  macro  include/linux/compiler-gcc.h  56  # define __inline__ __inline__ notrace
__inline  macro  include/linux/compiler-gcc.h  57  # define __inline __inline notrace
__packed  macro  include/linux/compiler-gcc.h  61  #define __packed __attribute__((packed))
__weak  macro  include/linux/compiler-gcc.h  62  #define __weak __attribute__((weak))
__naked  macro  include/linux/compiler-gcc.h  74  #define __naked __attribute__((naked)) noinline __noclone notrace
__noreturn  macro  include/linux/compiler-gcc.h  76  #define __noreturn __attribute__((noreturn))
__pure  macro  include/linux/compiler-gcc.h  88  #define __pure __attribute__((pure))
__aligned  macro  include/linux/compiler-gcc.h  89  #define __aligned(x) __attribute__((aligned(x)))
__printf  macro  include/linux/compiler-gcc.h  90  #define __printf(a,b) __attribute__((format(printf,a,b)))
__scanf  macro  include/linux/compiler-gcc.h  91  #define __scanf(a,b) __attribute__((format(scanf,a,b)))
__gcc_header  macro  include/linux/compiler-gcc.h  97  #define __gcc_header(x) #x
_gcc_header  macro  include/linux/compiler-gcc.h  98  #define _gcc_header(x) __gcc_header(linux/compiler-gcc##x.h)
gcc_header  macro  include/linux/compiler-gcc.h  99  #define gcc_header(x) _gcc_header(x)
__noclone  macro  include/linux/compiler-gcc.h  103  #define __noclone
uninitialized_var  macro  include/linux/compiler-intel.h  31  #define uninitialized_var(x) x
_LINUX_SYSCTL_H  macro  include/linux/sysctl.h  23  #define _LINUX_SYSCTL_H
CTL_MAXNAME  macro  include/linux/sysctl.h  31  #define CTL_MAXNAME 10
__sysctl_args  struct  include/linux/sysctl.h  36  struct __sysctl_args { int __user *name; int nlen; void __user *oldval; size_t __user *oldlenp; void __user *newval; size_t newlen; unsigned long __unused[4]; };
proc_dostring  prototype  include/linux/sysctl.h  949  extern int proc_dostring(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec  prototype  include/linux/sysctl.h  951  extern int proc_dointvec(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_minmax  prototype  include/linux/sysctl.h  953  extern int proc_dointvec_minmax(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_jiffies  prototype  include/linux/sysctl.h  955  extern int proc_dointvec_jiffies(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_userhz_jiffies  prototype  include/linux/sysctl.h  957  extern int proc_dointvec_userhz_jiffies(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_ms_jiffies  prototype  include/linux/sysctl.h  959  extern int proc_dointvec_ms_jiffies(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_doulongvec_minmax  prototype  include/linux/sysctl.h  961  extern int proc_doulongvec_minmax(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_doulongvec_ms_jiffies_minmax  prototype  include/linux/sysctl.h  963  extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table,int,void __user *, size_t *, loff_t *);
proc_do_large_bitmap  prototype  include/linux/sysctl.h  965  extern int proc_do_large_bitmap(struct ctl_table *,int,void __user *, size_t *, loff_t *);
ctl_table_poll  struct  include/linux/sysctl.h  996  struct ctl_table_poll { atomic_t event; wait_queue_head_t wait; };
proc_sys_poll_event  function  include/linux/sysctl.h  1001  static inline void *proc_sys_poll_event(struct ctl_table_poll *poll)
__CTL_TABLE_POLL_INITIALIZER  macro  include/linux/sysctl.h  1006  #define __CTL_TABLE_POLL_INITIALIZER(name) { .event = ATOMIC_INIT(0), .wait = __WAIT_QUEUE_HEAD_INITIALIZER(name.wait) }
DEFINE_CTL_TABLE_POLL  macro  include/linux/sysctl.h  1010  #define DEFINE_CTL_TABLE_POLL(name) struct ctl_table_poll name = __CTL_TABLE_POLL_INITIALIZER(name)
ctl_table  struct  include/linux/sysctl.h  1014  struct ctl_table { const char *procname; void *data; int maxlen; umode_t mode; struct ctl_table *child; proc_handler *proc_handler; struct ctl_table_poll *poll; void *extra1; void *extra2; };
ctl_node  struct  include/linux/sysctl.h  1027  struct ctl_node { struct rb_node node; struct ctl_table_header *header; };
ctl_table_header  struct  include/linux/sysctl.h  1034  struct ctl_table_header { struct ctl_table *ctl_table; int used; int count; int nreg; }; struct rcu_head rcu; }; struct completion *unregistering; struct ctl_table *ctl_table_arg; struct ctl_table_root *root; struct ctl_table_set *set; struct ctl_dir *parent; struct ctl_node *node; };
ctl_dir  struct  include/linux/sysctl.h  1053  struct ctl_dir { struct ctl_table_header header; struct rb_root root; };
ctl_table_set  struct  include/linux/sysctl.h  1059  struct ctl_table_set { int (*is_seen)(struct ctl_table_set *); struct ctl_dir dir; };
ctl_table_root  struct  include/linux/sysctl.h  1064  struct ctl_table_root { struct ctl_table_set default_set; struct ctl_table_set *(*lookup)(struct ctl_table_root *root,struct nsproxy *namespaces); int (*permissions)(struct ctl_table_root *root,struct nsproxy *namespaces, struct ctl_table *table); };
ctl_path  struct  include/linux/sysctl.h  1073  struct ctl_path { const char *procname; };
proc_sys_poll_notify  prototype  include/linux/sysctl.h  1079  void proc_sys_poll_notify(struct ctl_table_poll *poll);
setup_sysctl_set  function  include/linux/sysctl.h  1117  static inline void setup_sysctl_set(struct ctl_table_set *p,struct ctl_table_root *root,int (*is_seen)(struct ctl_table_set *))
retire_sysctl_set  prototype  include/linux/sysctl.h  1084  extern void retire_sysctl_set(struct ctl_table_set *set);
register_sysctl_root  prototype  include/linux/sysctl.h  1086  void register_sysctl_root(struct ctl_table_root *root);
__register_sysctl_table  prototype  include/linux/sysctl.h  1087  struct ctl_table_header *__register_sysctl_table(
__register_sysctl_paths  prototype  include/linux/sysctl.h  1090  struct ctl_table_header *__register_sysctl_paths(
register_sysctl  prototype  include/linux/sysctl.h  1093  struct ctl_table_header *register_sysctl(const char *path,struct ctl_table *table);
register_sysctl_table  function  include/linux/sysctl.h  1102  static inline struct ctl_table_header *register_sysctl_table(struct ctl_table * table)
register_sysctl_paths  function  include/linux/sysctl.h  1107  static inline struct ctl_table_header *register_sysctl_paths(
unregister_sysctl_table  function  include/linux/sysctl.h  1113  static inline void unregister_sysctl_table(struct ctl_table_header * table)
sysctl_init  prototype  include/linux/sysctl.h  1100  extern int sysctl_init(void);
_LINUX_ELF_EM_H  macro  include/linux/elf-em.h  2  #define _LINUX_ELF_EM_H
EM_NONE  macro  include/linux/elf-em.h  5  #define EM_NONE 0
EM_M32  macro  include/linux/elf-em.h  6  #define EM_M32 1
EM_SPARC  macro  include/linux/elf-em.h  7  #define EM_SPARC 2
EM_386  macro  include/linux/elf-em.h  8  #define EM_386 3
EM_68K  macro  include/linux/elf-em.h  9  #define EM_68K 4
EM_88K  macro  include/linux/elf-em.h  10  #define EM_88K 5
EM_486  macro  include/linux/elf-em.h  11  #define EM_486 6
EM_860  macro  include/linux/elf-em.h  12  #define EM_860 7
EM_MIPS  macro  include/linux/elf-em.h  13  #define EM_MIPS 8
EM_MIPS_RS3_LE  macro  include/linux/elf-em.h  17  #define EM_MIPS_RS3_LE 10
EM_MIPS_RS4_BE  macro  include/linux/elf-em.h  18  #define EM_MIPS_RS4_BE 10
EM_PARISC  macro  include/linux/elf-em.h  20  #define EM_PARISC 15
EM_SPARC32PLUS  macro  include/linux/elf-em.h  21  #define EM_SPARC32PLUS 18
EM_PPC  macro  include/linux/elf-em.h  22  #define EM_PPC 20
EM_PPC64  macro  include/linux/elf-em.h  23  #define EM_PPC64 21
EM_SPU  macro  include/linux/elf-em.h  24  #define EM_SPU 23
EM_SH  macro  include/linux/elf-em.h  25  #define EM_SH 42
EM_SPARCV9  macro  include/linux/elf-em.h  26  #define EM_SPARCV9 43
EM_IA_64  macro  include/linux/elf-em.h  27  #define EM_IA_64 50
EM_X86_64  macro  include/linux/elf-em.h  28  #define EM_X86_64 62
EM_S390  macro  include/linux/elf-em.h  29  #define EM_S390 22
EM_CRIS  macro  include/linux/elf-em.h  30  #define EM_CRIS 76
EM_V850  macro  include/linux/elf-em.h  31  #define EM_V850 87
EM_M32R  macro  include/linux/elf-em.h  32  #define EM_M32R 88
EM_H8_300  macro  include/linux/elf-em.h  33  #define EM_H8_300 46
EM_MN10300  macro  include/linux/elf-em.h  34  #define EM_MN10300 89
EM_BLACKFIN  macro  include/linux/elf-em.h  35  #define EM_BLACKFIN 106
EM_TI_C6000  macro  include/linux/elf-em.h  36  #define EM_TI_C6000 140
EM_FRV  macro  include/linux/elf-em.h  37  #define EM_FRV 0x5441
EM_AVR32  macro  include/linux/elf-em.h  38  #define EM_AVR32 0x18ad
EM_ALPHA  macro  include/linux/elf-em.h  44  #define EM_ALPHA 0x9026
EM_CYGNUS_V850  macro  include/linux/elf-em.h  47  #define EM_CYGNUS_V850 0x9080
EM_CYGNUS_M32R  macro  include/linux/elf-em.h  49  #define EM_CYGNUS_M32R 0x9041
EM_S390_OLD  macro  include/linux/elf-em.h  51  #define EM_S390_OLD 0xA390
EM_CYGNUS_MN10300  macro  include/linux/elf-em.h  53  #define EM_CYGNUS_MN10300 0xbeef
_ASM_X86_ELF_H  macro  arch/x86/include/asm/elf.h  2  #define _ASM_X86_ELF_H
ELF_NGREG  macro  arch/x86/include/asm/elf.h  15  #define ELF_NGREG (sizeof(struct user_regs_struct) / sizeof(elf_greg_t))
R_386_NONE  macro  arch/x86/include/asm/elf.h  24  #define R_386_NONE 0
R_386_32  macro  arch/x86/include/asm/elf.h  25  #define R_386_32 1
R_386_PC32  macro  arch/x86/include/asm/elf.h  26  #define R_386_PC32 2
R_386_GOT32  macro  arch/x86/include/asm/elf.h  27  #define R_386_GOT32 3
R_386_PLT32  macro  arch/x86/include/asm/elf.h  28  #define R_386_PLT32 4
R_386_COPY  macro  arch/x86/include/asm/elf.h  29  #define R_386_COPY 5
R_386_GLOB_DAT  macro  arch/x86/include/asm/elf.h  30  #define R_386_GLOB_DAT 6
R_386_JMP_SLOT  macro  arch/x86/include/asm/elf.h  31  #define R_386_JMP_SLOT 7
R_386_RELATIVE  macro  arch/x86/include/asm/elf.h  32  #define R_386_RELATIVE 8
R_386_GOTOFF  macro  arch/x86/include/asm/elf.h  33  #define R_386_GOTOFF 9
R_386_GOTPC  macro  arch/x86/include/asm/elf.h  34  #define R_386_GOTPC 10
R_386_NUM  macro  arch/x86/include/asm/elf.h  35  #define R_386_NUM 11
ELF_CLASS  macro  arch/x86/include/asm/elf.h  70  #define ELF_CLASS ELFCLASS64
ELF_DATA  macro  arch/x86/include/asm/elf.h  71  #define ELF_DATA ELFDATA2LSB
ELF_ARCH  macro  arch/x86/include/asm/elf.h  72  #define ELF_ARCH EM_X86_64
R_X86_64_NONE  macro  arch/x86/include/asm/elf.h  47  #define R_X86_64_NONE 0
R_X86_64_64  macro  arch/x86/include/asm/elf.h  48  #define R_X86_64_64 1
R_X86_64_PC32  macro  arch/x86/include/asm/elf.h  49  #define R_X86_64_PC32 2
R_X86_64_GOT32  macro  arch/x86/include/asm/elf.h  50  #define R_X86_64_GOT32 3
R_X86_64_PLT32  macro  arch/x86/include/asm/elf.h  51  #define R_X86_64_PLT32 4
R_X86_64_COPY  macro  arch/x86/include/asm/elf.h  52  #define R_X86_64_COPY 5
R_X86_64_GLOB_DAT  macro  arch/x86/include/asm/elf.h  53  #define R_X86_64_GLOB_DAT 6
R_X86_64_JUMP_SLOT  macro  arch/x86/include/asm/elf.h  54  #define R_X86_64_JUMP_SLOT 7
R_X86_64_RELATIVE  macro  arch/x86/include/asm/elf.h  55  #define R_X86_64_RELATIVE 8
R_X86_64_GOTPCREL  macro  arch/x86/include/asm/elf.h  56  #define R_X86_64_GOTPCREL 9
R_X86_64_32  macro  arch/x86/include/asm/elf.h  58  #define R_X86_64_32 10
R_X86_64_32S  macro  arch/x86/include/asm/elf.h  59  #define R_X86_64_32S 11
R_X86_64_16  macro  arch/x86/include/asm/elf.h  60  #define R_X86_64_16 12
R_X86_64_PC16  macro  arch/x86/include/asm/elf.h  61  #define R_X86_64_PC16 13
R_X86_64_8  macro  arch/x86/include/asm/elf.h  62  #define R_X86_64_8 14
R_X86_64_PC8  macro  arch/x86/include/asm/elf.h  63  #define R_X86_64_PC8 15
R_X86_64_NUM  macro  arch/x86/include/asm/elf.h  65  #define R_X86_64_NUM 16
elf_check_arch_ia32  macro  arch/x86/include/asm/elf.h  83  #define elf_check_arch_ia32(x) (((x)->e_machine == EM_386) || ((x)->e_machine == EM_486))
elf_check_arch  macro  arch/x86/include/asm/elf.h  155  #define elf_check_arch(x) ((x)->e_machine == EM_X86_64)
ELF_PLAT_INIT  macro  arch/x86/include/asm/elf.h  177  #define ELF_PLAT_INIT(_r,load_addr) elf_common_init(&current->thread, _r, 0)
ELF_CORE_COPY_REGS_COMMON  macro  arch/x86/include/asm/elf.h  115  #define ELF_CORE_COPY_REGS_COMMON(pr_reg,regs) do { pr_reg[0] = regs->bx; pr_reg[1] = regs->cx; pr_reg[2] = regs->dx; pr_reg[3] = regs->si; pr_reg[4] = regs->di; pr_reg[5] = regs->bp; pr_reg[6] = regs->ax; pr_reg[7] = regs->ds & 0xffff; pr_reg[8] = regs->es & 0xffff; pr_reg[9] = regs->fs & 0xffff; pr_reg[11] = regs->orig_ax; pr_reg[12] = regs->ip; pr_reg[13] = regs->cs & 0xffff; pr_reg[14] = regs->flags; pr_reg[15] = regs->sp; pr_reg[16] = regs->ss & 0xffff; } while (0);
ELF_CORE_COPY_REGS  macro  arch/x86/include/asm/elf.h  198  #define ELF_CORE_COPY_REGS(pr_reg,regs) do { unsigned v; (pr_reg)[0] = (regs)->r15; (pr_reg)[1] = (regs)->r14; (pr_reg)[2] = (regs)->r13; (pr_reg)[3] = (regs)->r12; (pr_reg)[4] = (regs)->bp; (pr_reg)[5] = (regs)->bx; (pr_reg)[6] = (regs)->r11; (pr_reg)[7] = (regs)->r10; (pr_reg)[8] = (regs)->r9; (pr_reg)[9] = (regs)->r8; (pr_reg)[10] = (regs)->ax; (pr_reg)[11] = (regs)->cx; (pr_reg)[12] = (regs)->dx; (pr_reg)[13] = (regs)->si; (pr_reg)[14] = (regs)->di; (pr_reg)[15] = (regs)->orig_ax; (pr_reg)[16] = (regs)->ip; (pr_reg)[17] = (regs)->cs; (pr_reg)[18] = (regs)->flags; (pr_reg)[19] = (regs)->sp; (pr_reg)[20] = (regs)->ss; (pr_reg)[21] = current->thread.fs; (pr_reg)[22] = current->thread.gs; asm("movl %%ds,%0" : "=r" (v)); (pr_reg)[23] = v; asm("movl %%es,%0" : "=r" (v)); (pr_reg)[24] = v; asm("movl %%fs,%0" : "=r" (v)); (pr_reg)[25] = v; asm("movl %%gs,%0" : "=r" (v)); (pr_reg)[26] = v; } while (0);
ELF_CORE_COPY_KERNEL_REGS  macro  arch/x86/include/asm/elf.h  141  #define ELF_CORE_COPY_KERNEL_REGS(pr_reg,regs) do { ELF_CORE_COPY_REGS_COMMON(pr_reg, regs); savesegment(gs, pr_reg[10]); } while (0);
ELF_PLATFORM  macro  arch/x86/include/asm/elf.h  231  #define ELF_PLATFORM ("x86_64")
set_personality_64bit  prototype  arch/x86/include/asm/elf.h  232  extern void set_personality_64bit(void);
compat_elf_check_arch  macro  arch/x86/include/asm/elf.h  158  #define compat_elf_check_arch(x) (elf_check_arch_ia32(x) || (x)->e_machine == EM_X86_64)
elf_common_init  function  arch/x86/include/asm/elf.h  165  static inline void elf_common_init(struct thread_struct *t,struct pt_regs *regs, const u16 ds)
COMPAT_ELF_PLAT_INIT  macro  arch/x86/include/asm/elf.h  180  #define COMPAT_ELF_PLAT_INIT(regs,load_addr) elf_common_init(&current->thread, regs, __USER_DS)
start_thread_ia32  prototype  arch/x86/include/asm/elf.h  183  void start_thread_ia32(struct pt_regs *regs,u32 new_ip,u32 new_sp);
compat_start_thread  macro  arch/x86/include/asm/elf.h  184  #define compat_start_thread start_thread_ia32
set_personality_ia32  prototype  arch/x86/include/asm/elf.h  186  void set_personality_ia32(bool);
COMPAT_SET_PERSONALITY  macro  arch/x86/include/asm/elf.h  187  #define COMPAT_SET_PERSONALITY(ex) set_personality_ia32((ex).e_machine == EM_X86_64)
COMPAT_ELF_PLATFORM  macro  arch/x86/include/asm/elf.h  190  #define COMPAT_ELF_PLATFORM ("i686")
CORE_DUMP_USE_REGSET  macro  arch/x86/include/asm/elf.h  238  #define CORE_DUMP_USE_REGSET
ELF_EXEC_PAGESIZE  macro  arch/x86/include/asm/elf.h  239  #define ELF_EXEC_PAGESIZE 4096
ELF_ET_DYN_BASE  macro  arch/x86/include/asm/elf.h  246  #define ELF_ET_DYN_BASE (TASK_SIZE / 3 * 2)
ELF_HWCAP  macro  arch/x86/include/asm/elf.h  252  #define ELF_HWCAP (boot_cpu_data.x86_capability[0])
SET_PERSONALITY  macro  arch/x86/include/asm/elf.h  261  #define SET_PERSONALITY(ex) set_personality_64bit()
ARCH_DLINFO_IA32  macro  arch/x86/include/asm/elf.h  272  #define ARCH_DLINFO_IA32(vdso_enabled) do { if (vdso_enabled) { NEW_AUX_ENT(AT_SYSINFO,	VDSO_ENTRY); NEW_AUX_ENT(AT_SYSINFO_EHDR, VDSO_CURRENT_BASE); } } while (0)
STACK_RND_MASK  macro  arch/x86/include/asm/elf.h  295  #define STACK_RND_MASK (test_thread_flag(TIF_ADDR32) ? 0x7ff : 0x3fffff)
VDSO_HIGH_BASE  macro  arch/x86/include/asm/elf.h  292  #define VDSO_HIGH_BASE 0xffffe000U
ARCH_DLINFO  macro  arch/x86/include/asm/elf.h  297  #define ARCH_DLINFO do { if (vdso_enabled) NEW_AUX_ENT(AT_SYSINFO_EHDR, (unsigned long)current->mm->context.vdso); } while (0)
ARCH_DLINFO_X32  macro  arch/x86/include/asm/elf.h  304  #define ARCH_DLINFO_X32 do { if (vdso_enabled) NEW_AUX_ENT(AT_SYSINFO_EHDR, (unsigned long)current->mm->context.vdso); } while (0)
AT_SYSINFO  macro  arch/x86/include/asm/elf.h  311  #define AT_SYSINFO 32
COMPAT_ARCH_DLINFO  macro  arch/x86/include/asm/elf.h  313  #define COMPAT_ARCH_DLINFO if (test_thread_flag(TIF_X32)) ARCH_DLINFO_X32; else ARCH_DLINFO_IA32(sysctl_vsyscall32)
COMPAT_ELF_ET_DYN_BASE  macro  arch/x86/include/asm/elf.h  319  #define COMPAT_ELF_ET_DYN_BASE (TASK_UNMAPPED_BASE + 0x1000000)
VDSO_CURRENT_BASE  macro  arch/x86/include/asm/elf.h  323  #define VDSO_CURRENT_BASE ((unsigned long)current->mm->context.vdso)
VDSO_ENTRY  macro  arch/x86/include/asm/elf.h  325  #define VDSO_ENTRY ((unsigned long)VDSO32_SYMBOL(VDSO_CURRENT_BASE, vsyscall))
ARCH_HAS_SETUP_ADDITIONAL_PAGES  macro  arch/x86/include/asm/elf.h  330  #define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1
arch_setup_additional_pages  prototype  arch/x86/include/asm/elf.h  331  extern int arch_setup_additional_pages(struct linux_binprm *bprm,int uses_interp);
x32_setup_additional_pages  prototype  arch/x86/include/asm/elf.h  333  extern int x32_setup_additional_pages(struct linux_binprm *bprm,int uses_interp);
syscall32_setup_pages  prototype  arch/x86/include/asm/elf.h  336  extern int syscall32_setup_pages(struct linux_binprm *,int exstack);
compat_arch_setup_additional_pages  macro  arch/x86/include/asm/elf.h  337  #define compat_arch_setup_additional_pages syscall32_setup_pages
arch_randomize_brk  macro  arch/x86/include/asm/elf.h  340  #define arch_randomize_brk arch_randomize_brk
mmap_is_ia32  function  arch/x86/include/asm/elf.h  345  static inline int mmap_is_ia32(void)
align_flags  enum  arch/x86/include/asm/elf.h  358  enum align_flags { ALIGN_VA_32 = BIT(0), ALIGN_VA_64 = BIT(1), ALIGN_VDSO = BIT(2), ALIGN_TOPDOWN = BIT(3), };
va_alignment  struct  arch/x86/include/asm/elf.h  365  struct va_alignment { int flags; unsigned long mask; } ____cacheline_aligned;
align_addr  prototype  arch/x86/include/asm/elf.h  371  extern unsigned long align_addr(unsigned long,struct file *,enum align_flags);
_SYSFS_H_  macro  include/linux/sysfs.h  13  #define _SYSFS_H_
attribute  struct  include/linux/sysfs.h  26  struct attribute { const char *name; umode_t mode; bool ignore_lockdep:1; struct lock_class_key *key; struct lock_class_key skey; };
sysfs_attr_init  macro  include/linux/sysfs.h  54  #define sysfs_attr_init(attr) do {} while(0)
attribute_group  struct  include/linux/sysfs.h  57  struct attribute_group { const char *name; umode_t (*is_visible)(struct kobject *,struct attribute *, int); struct attribute **attrs; };
__ATTR  macro  include/linux/sysfs.h  71  #define __ATTR(_name,_mode,_show,_store) { .attr = {.name = __stringify(_name), .mode = _mode }, .show	= _show, .store	= _store, }
__ATTR_RO  macro  include/linux/sysfs.h  77  #define __ATTR_RO(_name) { .attr	= { .name = __stringify(_name), .mode = 0444 }, .show	= _name##_show, }
__ATTR_NULL  macro  include/linux/sysfs.h  82  #define __ATTR_NULL { .attr = { .name = NULL } }
__ATTR_IGNORE_LOCKDEP  macro  include/linux/sysfs.h  92  #define __ATTR_IGNORE_LOCKDEP __ATTR
attr_name  macro  include/linux/sysfs.h  95  #define attr_name(_attr) (_attr).attr.name
bin_attribute  struct  include/linux/sysfs.h  100  struct bin_attribute { struct attribute attr; size_t size; ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,char *, loff_t, size_t); ssize_t (*write)(struct file *,struct kobject *, struct bin_attribute *,char *, loff_t, size_t); int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,struct vm_area_struct *vma); };
sysfs_bin_attr_init  macro  include/linux/sysfs.h  122  #define sysfs_bin_attr_init(bin_attr) sysfs_attr_init(&(bin_attr)->attr)
sysfs_ops  struct  include/linux/sysfs.h  124  struct sysfs_ops { ssize_t (*show)(struct kobject *, struct attribute *,char *); ssize_t (*store)(struct kobject *,struct attribute *,const char *, size_t); };
sysfs_schedule_callback  function  include/linux/sysfs.h  197  static inline int sysfs_schedule_callback(struct kobject *kobj,void (*func)(void *), void *data, struct module *owner)
sysfs_create_dir  function  include/linux/sysfs.h  203  static inline int sysfs_create_dir(struct kobject *kobj)
sysfs_remove_dir  function  include/linux/sysfs.h  208  static inline void sysfs_remove_dir(struct kobject *kobj)
sysfs_rename_dir  function  include/linux/sysfs.h  212  static inline int sysfs_rename_dir(struct kobject *kobj,const char *new_name)
sysfs_move_dir  function  include/linux/sysfs.h  217  static inline int sysfs_move_dir(struct kobject *kobj,struct kobject *new_parent_kobj)
sysfs_create_file  function  include/linux/sysfs.h  223  static inline int sysfs_create_file(struct kobject *kobj,const struct attribute *attr)
sysfs_create_files  function  include/linux/sysfs.h  229  static inline int sysfs_create_files(struct kobject *kobj,const struct attribute **attr)
sysfs_chmod_file  function  include/linux/sysfs.h  235  static inline int sysfs_chmod_file(struct kobject *kobj,const struct attribute *attr, umode_t mode)
sysfs_remove_file  function  include/linux/sysfs.h  241  static inline void sysfs_remove_file(struct kobject *kobj,const struct attribute *attr)
sysfs_remove_files  function  include/linux/sysfs.h  246  static inline void sysfs_remove_files(struct kobject *kobj,const struct attribute **attr)
sysfs_create_bin_file  function  include/linux/sysfs.h  251  static inline int sysfs_create_bin_file(struct kobject *kobj,const struct bin_attribute *attr)
sysfs_remove_bin_file  function  include/linux/sysfs.h  257  static inline void sysfs_remove_bin_file(struct kobject *kobj,const struct bin_attribute *attr)
sysfs_create_link  function  include/linux/sysfs.h  262  static inline int sysfs_create_link(struct kobject *kobj,struct kobject *target, const char *name)
sysfs_create_link_nowarn  function  include/linux/sysfs.h  268  static inline int sysfs_create_link_nowarn(struct kobject *kobj,struct kobject *target,const char *name)
sysfs_remove_link  function  include/linux/sysfs.h  275  static inline void sysfs_remove_link(struct kobject *kobj,const char *name)
sysfs_rename_link  function  include/linux/sysfs.h  279  static inline int sysfs_rename_link(struct kobject *k,struct kobject *t,const char *old_name, const char *new_name)
sysfs_delete_link  function  include/linux/sysfs.h  285  static inline void sysfs_delete_link(struct kobject *k,struct kobject *t,const char *name)
sysfs_create_group  function  include/linux/sysfs.h  290  static inline int sysfs_create_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_update_group  function  include/linux/sysfs.h  296  static inline int sysfs_update_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_remove_group  function  include/linux/sysfs.h  302  static inline void sysfs_remove_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_add_file_to_group  function  include/linux/sysfs.h  307  static inline int sysfs_add_file_to_group(struct kobject *kobj,const struct attribute *attr, const char *group)
sysfs_remove_file_from_group  function  include/linux/sysfs.h  313  static inline void sysfs_remove_file_from_group(struct kobject *kobj,const struct attribute *attr, const char *group)
sysfs_merge_group  function  include/linux/sysfs.h  318  static inline int sysfs_merge_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_unmerge_group  function  include/linux/sysfs.h  324  static inline void sysfs_unmerge_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_notify  function  include/linux/sysfs.h  329  static inline void sysfs_notify(struct kobject *kobj,const char *dir,const char *attr)
sysfs_notify_dirent  function  include/linux/sysfs.h  333  static inline void sysfs_notify_dirent(struct sysfs_dirent *sd)
sysfs_get_dirent  function  include/linux/sysfs.h  337  struct sysfs_dirent *sysfs_get_dirent(struct sysfs_dirent *parent_sd,const void *ns,const unsigned char *name)
sysfs_get  function  include/linux/sysfs.h  343  static inline struct sysfs_dirent *sysfs_get(struct sysfs_dirent *sd)
sysfs_put  function  include/linux/sysfs.h  347  static inline void sysfs_put(struct sysfs_dirent *sd)
sysfs_init  function  include/linux/sysfs.h  351  static inline int __must_check sysfs_init(void)
_KREF_H_  macro  include/linux/kref.h  16  #define _KREF_H_
kref  struct  include/linux/kref.h  22  struct kref { atomic_t refcount; };
kref_init  function  include/linux/kref.h  30  static inline void kref_init(struct kref *kref)
kref_get  function  include/linux/kref.h  39  static inline void kref_get(struct kref *kref)
kref_sub  function  include/linux/kref.h  63  static inline int kref_sub(struct kref *kref,unsigned int count,void (*release)(struct kref *kref))
kref_put  function  include/linux/kref.h  92  static inline int kref_put(struct kref *kref,void (*release)(struct kref *kref))
_LINUX_KOBJECT_NS_H  macro  include/linux/kobject_ns.h  18  #define _LINUX_KOBJECT_NS_H
kobj_ns_type  enum  include/linux/kobject_ns.h  27  enum kobj_ns_type { KOBJ_NS_TYPE_NONE = 0, KOBJ_NS_TYPE_NET, KOBJ_NS_TYPES };
kobj_ns_type_operations  struct  include/linux/kobject_ns.h  40  struct kobj_ns_type_operations { enum kobj_ns_type type; void *(*grab_current_ns)(void); const void *(*netlink_ns)(struct sock *sk); const void *(*initial_ns)(void); void (*drop_ns)(void *); };
kobj_ns_type_register  prototype  include/linux/kobject_ns.h  48  int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
kobj_ns_type_registered  prototype  include/linux/kobject_ns.h  49  int kobj_ns_type_registered(enum kobj_ns_type type);
kobj_child_ns_ops  prototype  include/linux/kobject_ns.h  50  const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
kobj_ns_ops  prototype  include/linux/kobject_ns.h  51  const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);
kobj_ns_grab_current  prototype  include/linux/kobject_ns.h  53  void *kobj_ns_grab_current(enum kobj_ns_type type);
kobj_ns_netlink  prototype  include/linux/kobject_ns.h  54  const void *kobj_ns_netlink(enum kobj_ns_type type,struct sock *sk);
kobj_ns_initial  prototype  include/linux/kobject_ns.h  55  const void *kobj_ns_initial(enum kobj_ns_type type);
kobj_ns_drop  prototype  include/linux/kobject_ns.h  56  void kobj_ns_drop(enum kobj_ns_type type,void *ns);
_LINUX_PFN_H_  macro  include/linux/pfn.h  2  #define _LINUX_PFN_H_
PFN_ALIGN  macro  include/linux/pfn.h  8  #define PFN_ALIGN(x) (((unsigned long)(x) + (PAGE_SIZE - 1)) & PAGE_MASK)
PFN_UP  macro  include/linux/pfn.h  9  #define PFN_UP(x) (((x) + PAGE_SIZE-1) >> PAGE_SHIFT)
PFN_DOWN  macro  include/linux/pfn.h  10  #define PFN_DOWN(x) ((x) >> PAGE_SHIFT)
PFN_PHYS  macro  include/linux/pfn.h  11  #define PFN_PHYS(x) ((phys_addr_t)(x) << PAGE_SHIFT)
_ASM_X86_PERCPU_H  macro  arch/x86/include/asm/percpu.h  2  #define _ASM_X86_PERCPU_H
__percpu_seg  macro  arch/x86/include/asm/percpu.h  8  #define __percpu_seg fs
__percpu_mov_op  macro  arch/x86/include/asm/percpu.h  9  #define __percpu_mov_op movl
PER_CPU  macro  arch/x86/include/asm/percpu.h  32  #define PER_CPU(var,reg) __percpu_mov_op $var,reg
PER_CPU_VAR  macro  arch/x86/include/asm/percpu.h  33  #define PER_CPU_VAR(var) var
INIT_PER_CPU_VAR  macro  arch/x86/include/asm/percpu.h  39  #define INIT_PER_CPU_VAR(var) var
__percpu_prefix  macro  arch/x86/include/asm/percpu.h  65  #define __percpu_prefix ""
__my_cpu_offset  macro  arch/x86/include/asm/percpu.h  49  #define __my_cpu_offset this_cpu_read(this_cpu_off)
__this_cpu_ptr  macro  arch/x86/include/asm/percpu.h  55  #define __this_cpu_ptr(ptr) ({ unsigned long tcp_ptr__; __verify_pcpu_ptr(ptr); asm volatile("add " __percpu_arg(1) ", %0" : "=r" (tcp_ptr__) : "m" (this_cpu_off), "0" (ptr)); (typeof(*(ptr)) __kernel __force *)tcp_ptr__; })
__percpu_arg  macro  arch/x86/include/asm/percpu.h  68  #define __percpu_arg(x) __percpu_prefix "%P" #x
DECLARE_INIT_PER_CPU  macro  arch/x86/include/asm/percpu.h  77  #define DECLARE_INIT_PER_CPU(var) extern typeof(var) init_per_cpu_var(var)
init_per_cpu_var  macro  arch/x86/include/asm/percpu.h  83  #define init_per_cpu_var(var) var
__bad_percpu_size  prototype  arch/x86/include/asm/percpu.h  88  extern void __bad_percpu_size(void);
percpu_to_op  macro  arch/x86/include/asm/percpu.h  90  #define percpu_to_op(op,var,val) do { typedef typeof(var) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (val); (void)pto_tmp__; } switch (sizeof(var)) { case 1: asm(op "b %1,"__percpu_arg(0) : "+m" (var) : "qi" ((pto_T__)(val))); break; case 2: asm(op "w %1,"__percpu_arg(0) : "+m" (var) : "ri" ((pto_T__)(val))); break; case 4: asm(op "l %1,"__percpu_arg(0) : "+m" (var) : "ri" ((pto_T__)(val))); break; case 8: asm(op "q %1,"__percpu_arg(0) : "+m" (var) : "re" ((pto_T__)(val))); break; default: __bad_percpu_size(); } } while (0)
percpu_add_op  macro  arch/x86/include/asm/percpu.h  127  #define percpu_add_op(var,val) do { typedef typeof(var) pao_T__; const int pao_ID__ = (__builtin_constant_p(val) && ((val) == 1 || (val) == -1)) ? (val) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (val); (void)pao_tmp__; } switch (sizeof(var)) { case 1: if (pao_ID__ == 1) asm("incb "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decb "__percpu_arg(0) : "+m" (var)); else asm("addb %1, "__percpu_arg(0) : "+m" (var) : "qi" ((pao_T__)(val))); break; case 2: if (pao_ID__ == 1) asm("incw "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decw "__percpu_arg(0) : "+m" (var)); else asm("addw %1, "__percpu_arg(0) : "+m" (var) : "ri" ((pao_T__)(val))); break; case 4: if (pao_ID__ == 1) asm("incl "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decl "__percpu_arg(0) : "+m" (var)); else asm("addl %1, "__percpu_arg(0) : "+m" (var) : "ri" ((pao_T__)(val))); break; case 8: if (pao_ID__ == 1) asm("incq "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decq "__percpu_arg(0) : "+m" (var)); else asm("addq %1, "__percpu_arg(0) : "+m" (var) : "re" ((pao_T__)(val))); break; default: __bad_percpu_size(); } } while (0)
percpu_from_op  macro  arch/x86/include/asm/percpu.h  182  #define percpu_from_op(op,var,constraint) ({ typeof(var) pfo_ret__; switch (sizeof(var)) { case 1: asm(op "b "__percpu_arg(1)",%0" : "=q" (pfo_ret__) : constraint); break; case 2: asm(op "w "__percpu_arg(1)",%0" : "=r" (pfo_ret__) : constraint); break; case 4: asm(op "l "__percpu_arg(1)",%0" : "=r" (pfo_ret__) : constraint); break; case 8: asm(op "q "__percpu_arg(1)",%0" : "=r" (pfo_ret__) : constraint); break; default: __bad_percpu_size(); } pfo_ret__; })
percpu_unary_op  macro  arch/x86/include/asm/percpu.h  211  #define percpu_unary_op(op,var) ({ switch (sizeof(var)) { case 1: asm(op "b "__percpu_arg(0) : "+m" (var)); break; case 2: asm(op "w "__percpu_arg(0) : "+m" (var)); break; case 4: asm(op "l "__percpu_arg(0) : "+m" (var)); break; case 8: asm(op "q "__percpu_arg(0) : "+m" (var)); break; default: __bad_percpu_size(); } })
percpu_add_return_op  macro  arch/x86/include/asm/percpu.h  237  #define percpu_add_return_op(var,val) ({ typeof(var) paro_ret__ = val; switch (sizeof(var)) { case 1: asm("xaddb %0, "__percpu_arg(1) : "+q" (paro_ret__), "+m" (var) : : "memory"); break; case 2: asm("xaddw %0, "__percpu_arg(1) : "+r" (paro_ret__), "+m" (var) : : "memory"); break; case 4: asm("xaddl %0, "__percpu_arg(1) : "+r" (paro_ret__), "+m" (var) : : "memory"); break; case 8: asm("xaddq %0, "__percpu_arg(1) : "+re" (paro_ret__), "+m" (var) : : "memory"); break; default: __bad_percpu_size(); } paro_ret__ += val; paro_ret__; })
percpu_xchg_op  macro  arch/x86/include/asm/percpu.h  272  #define percpu_xchg_op(var,nval) ({ typeof(var) pxo_ret__; typeof(var) pxo_new__ = (nval); switch (sizeof(var)) { case 1: asm("\n\tmov "__percpu_arg(1)",%%al" "\n1:\tcmpxchgb %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "q" (pxo_new__) : "memory"); break; case 2: asm("\n\tmov "__percpu_arg(1)",%%ax" "\n1:\tcmpxchgw %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "r" (pxo_new__) : "memory"); break; case 4: asm("\n\tmov "__percpu_arg(1)",%%eax" "\n1:\tcmpxchgl %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "r" (pxo_new__) : "memory"); break; case 8: asm("\n\tmov "__percpu_arg(1)",%%rax" "\n1:\tcmpxchgq %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "r" (pxo_new__) : "memory"); break; default: __bad_percpu_size(); } pxo_ret__; })
percpu_cmpxchg_op  macro  arch/x86/include/asm/percpu.h  318  #define percpu_cmpxchg_op(var,oval,nval) ({ typeof(var) pco_ret__; typeof(var) pco_old__ = (oval); typeof(var) pco_new__ = (nval); switch (sizeof(var)) { case 1: asm("cmpxchgb %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "q" (pco_new__), "0" (pco_old__) : "memory"); break; case 2: asm("cmpxchgw %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; case 4: asm("cmpxchgl %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; case 8: asm("cmpxchgq %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; default: __bad_percpu_size(); } pco_ret__; })
this_cpu_read_stable  macro  arch/x86/include/asm/percpu.h  362  #define this_cpu_read_stable(var) percpu_from_op("mov",var,"p" (&(var)))
percpu_cmpxchg8b_double  macro  arch/x86/include/asm/percpu.h  427  #define percpu_cmpxchg8b_double(pcp1,pcp2,o1,o2,n1,n2) ({ bool __ret; typeof(pcp1) __o1 = (o1), __n1 = (n1); typeof(pcp2) __o2 = (o2), __n2 = (n2); asm volatile("cmpxchg8b "__percpu_arg(1)"\n\tsetz %0\n\t" : "=a" (__ret), "+m" (pcp1), "+m" (pcp2), "+d" (__o2) :  "b" (__n1), "c" (__n2), "a" (__o1)); __ret; })
percpu_cmpxchg16b_double  macro  arch/x86/include/asm/percpu.h  473  #define percpu_cmpxchg16b_double(pcp1,pcp2,o1,o2,n1,n2) ({ bool __ret; typeof(pcp1) __o1 = (o1), __n1 = (n1); typeof(pcp2) __o2 = (o2), __n2 = (n2); alternative_io("leaq %P1,%%rsi\n\tcall this_cpu_cmpxchg16b_emu\n\t", "cmpxchg16b " __percpu_arg(1) "\n\tsetz %0\n\t", X86_FEATURE_CX16, ASM_OUTPUT2("=a" (__ret), "+m" (pcp1), "+m" (pcp2), "+d" (__o2)), "b" (__n1), "c" (__n2), "a" (__o1) : "rsi"); __ret; })
x86_test_and_clear_bit_percpu  macro  arch/x86/include/asm/percpu.h  493  #define x86_test_and_clear_bit_percpu(bit,var) ({ int old__; asm volatile("btr %2,"__percpu_arg(1)"\n\tsbbl %0,%0" : "=r" (old__), "+m" (var) : "dIr" (bit)); old__; })
x86_this_cpu_constant_test_bit  function  arch/x86/include/asm/percpu.h  502  static __always_inline int x86_this_cpu_constant_test_bit(unsigned int nr,const unsigned long __percpu *addr)
x86_this_cpu_variable_test_bit  function  arch/x86/include/asm/percpu.h  514  static inline int x86_this_cpu_variable_test_bit(int nr,const unsigned long __percpu *addr)
x86_this_cpu_test_bit  macro  arch/x86/include/asm/percpu.h  527  #define x86_this_cpu_test_bit(nr,addr) (__builtin_constant_p((nr)) ? x86_this_cpu_constant_test_bit((nr), (addr)) : x86_this_cpu_variable_test_bit((nr), (addr)))
DEFINE_EARLY_PER_CPU  macro  arch/x86/include/asm/percpu.h  570  #define DEFINE_EARLY_PER_CPU(_type,_name,_initvalue) DEFINE_PER_CPU(_type, _name) = _initvalue
EXPORT_EARLY_PER_CPU_SYMBOL  macro  arch/x86/include/asm/percpu.h  573  #define EXPORT_EARLY_PER_CPU_SYMBOL(_name) EXPORT_PER_CPU_SYMBOL(_name)
DECLARE_EARLY_PER_CPU  macro  arch/x86/include/asm/percpu.h  576  #define DECLARE_EARLY_PER_CPU(_type,_name) DECLARE_PER_CPU(_type, _name)
early_per_cpu_ptr  macro  arch/x86/include/asm/percpu.h  580  #define early_per_cpu_ptr(_name) NULL
early_per_cpu_map  macro  arch/x86/include/asm/percpu.h  563  #define early_per_cpu_map(_name,_idx) (_name##_early_map[_idx])
early_per_cpu  macro  arch/x86/include/asm/percpu.h  579  #define early_per_cpu(_name,_cpu) per_cpu(_name,_cpu)
__ASM_GENERIC_MODULE_H  macro  include/asm-generic/module.h  2  #define __ASM_GENERIC_MODULE_H
mod_arch_specific  struct  include/asm-generic/module.h  8  struct mod_arch_specific { };
Elf_Shdr  macro  include/asm-generic/module.h  17  #define Elf_Shdr Elf32_Shdr
Elf_Sym  macro  include/asm-generic/module.h  18  #define Elf_Sym Elf32_Sym
Elf_Ehdr  macro  include/asm-generic/module.h  19  #define Elf_Ehdr Elf32_Ehdr
