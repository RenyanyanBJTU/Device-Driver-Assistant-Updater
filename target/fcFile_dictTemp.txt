BUILD_BUG_ON ['macro', 'include/linux/bug.h', '59', '#define BUILD_BUG_ON(condition) do { ((void)sizeof(char[1 - 2*!!(condition)])); if (condition) __build_bug_on_failed = 1; } while(0)']
pfn_to_page ['macro', 'include/asm-generic/memory_model.h', '73', '#define pfn_to_page __pfn_to_page']
wake_up ['macro', 'include/linux/wait.h', '169', '#define wake_up(x) __wake_up(x,TASK_NORMAL,1,NULL)']
__wake_up ['prototype', 'include/linux/wait.h', '155', 'void __wake_up(wait_queue_head_t *q,unsigned int mode,int nr,void *key);']
sg_init_one ['prototype', 'include/linux/scatterlist.h', '207', 'void sg_init_one(struct scatterlist *,const void *,unsigned int);']
virtqueue_add_buf ['prototype', 'include/linux/virtio.h', '28', 'int virtqueue_add_buf(struct virtqueue *vq,struct scatterlist sg[],unsigned int out_num,unsigned int in_num,void *data,gfp_t gfp);']
virtqueue_kick ['prototype', 'include/linux/virtio.h', '35', 'void virtqueue_kick(struct virtqueue *vq);']
wait_event ['macro', 'include/linux/wait.h', '217', '#define wait_event(wq,condition) do { if (condition) break; __wait_event(wq, condition); } while (0)']
virtqueue_get_buf ['prototype', 'include/linux/virtio.h', '41', 'void *virtqueue_get_buf(struct virtqueue *vq,unsigned int *len);']
prepare_to_wait ['prototype', 'include/linux/wait.h', '584', 'void prepare_to_wait(wait_queue_head_t *q,wait_queue_t *wait,int state);']
schedule ['prototype', 'include/linux/sched.h', '364', 'asmlinkage void schedule(void);']
finish_wait ['prototype', 'include/linux/wait.h', '586', 'void finish_wait(wait_queue_head_t *q,wait_queue_t *wait);']
printk_ratelimit ['function', 'include/linux/printk.h', '151', 'static inline int printk_ratelimit(void)']
min ['macro', 'include/linux/kernel.h', '560', '#define min(x,y) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })']
__printk_ratelimit ['prototype', 'include/linux/printk.h', '124', 'extern int __printk_ratelimit(const char *func);']
KERN_INFO ['macro', 'include/linux/printk.h', '15', '#define KERN_INFO "<6>"']
dev_printk ['function', 'include/linux/device.h', '914', 'int dev_printk(const char *level,const struct device *dev,const char *fmt, ...)']
msleep ['prototype', 'include/linux/delay.h', '46', 'void msleep(unsigned int msecs);']
list_add ['function', 'include/linux/list.h', '60', 'static inline void list_add(struct list_head *new,struct list_head *head)']
__free_page ['macro', 'include/linux/gfp.h', '365', '#define __free_page(page) __free_pages((page),0)']
__free_pages ['prototype', 'include/linux/gfp.h', '360', 'extern void __free_pages(struct page *page,unsigned int order);']
list_first_entry ['macro', 'include/linux/list.h', '361', '#define list_first_entry(ptr,type,member) list_entry((ptr)->next, type, member)']
list_del ['prototype', 'include/linux/list.h', '112', 'extern void list_del(struct list_head *entry);']
si_meminfo ['prototype', 'include/linux/mm.h', '1324', 'extern void si_meminfo(struct sysinfo * val);']
set_freezable ['function', 'include/linux/freezer.h', '185', 'static inline void set_freezable(void) {}']
try_to_freeze ['function', 'include/linux/freezer.h', '180', 'static inline bool try_to_freeze(void) { return false; }']
wait_event_interruptible ['macro', 'include/linux/wait.h', '296', '#define wait_event_interruptible(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_interruptible(wq, condition, __ret); __ret; })']
kthread_should_stop ['prototype', 'include/linux/kthread.h', '37', 'int kthread_should_stop(void);']
current ['macro', 'arch/x86/include/asm/current.h', '17', '#define current get_current()']
freezing ['function', 'include/linux/freezer.h', '171', 'static inline bool freezing(struct task_struct *p) { return false; }']
get_current ['function', 'arch/x86/include/asm/current.h', '12', 'static __always_inline struct task_struct *get_current(void)']
signal_pending ['function', 'include/linux/sched.h', '2579', 'static inline int signal_pending(struct task_struct *p)']
virtio_has_feature ['function', 'include/linux/virtio_config.h', '130', 'static inline bool virtio_has_feature(const struct virtio_device *vdev,unsigned int fbit)']
kmalloc ['function', 'include/linux/slab_def.h', '128', 'static __always_inline void *kmalloc(size_t size,gfp_t flags)']
INIT_LIST_HEAD ['function', 'include/linux/list.h', '24', 'static inline void INIT_LIST_HEAD(struct list_head *list)']
init_waitqueue_head ['macro', 'include/linux/wait.h', '81', '#define init_waitqueue_head(q) do { static struct lock_class_key __key; __init_waitqueue_head((q), #q, &__key); } while (0)']
__init_waitqueue_head ['prototype', 'include/linux/wait.h', '79', 'extern void __init_waitqueue_head(wait_queue_head_t *q,const char *name,struct lock_class_key *);']
kthread_run ['macro', 'include/linux/kthread.h', '26', '#define kthread_run(threadfn,data,namefmt,...) ({ struct task_struct *__k = kthread_create(threadfn, data, namefmt, ## __VA_ARGS__); if (!IS_ERR(__k)) wake_up_process(__k); __k; })']
IS_ERR ['function', 'include/linux/err.h', '32', 'static inline long __must_check IS_ERR(const void *ptr)']
wake_up_process ['prototype', 'include/linux/sched.h', '2170', 'extern int wake_up_process(struct task_struct *tsk);']
PTR_ERR ['function', 'include/linux/err.h', '27', 'static inline long __must_check PTR_ERR(const void *ptr)']
kfree ['prototype', 'include/linux/slab.h', '161', 'void kfree(const void *);']
kthread_stop ['prototype', 'include/linux/kthread.h', '36', 'int kthread_stop(struct task_struct *k);']
register_virtio_driver ['prototype', 'include/linux/virtio.h', '103', 'int register_virtio_driver(struct virtio_driver *drv);']
unregister_virtio_driver ['prototype', 'include/linux/virtio.h', '104', 'void unregister_virtio_driver(struct virtio_driver *drv);']
